/* 

  Subset sum problem (Rosetta Code) in Picat.

  http://rosettacode.org/wiki/Subset_sum_problem
  """
  Implement a function/procedure/method/subroutine that takes a 
  set/array/list/stream/table/collection of words with integer weights, 
  and identifies a non-empty subset of them whose weights sum to zero 
  (cf. the Dropbox Diet candidate screening exercise and the Subset sum 
  problem Wikipedia article).

  For example, for this set of weighted words, one solution would be the set of 
  words {elysee, efferent, deploy, departure, centipede, bonnet, balm, archbishop}, 
  because their respective weights of -326, 54, 44, 952, -658, 452, 397, and -915 
  sum to zero.

Table of weighted words word 	weight
alliance 	-624
archbishop 	-915
balm 	397
bonnet 	452
brute 	870
centipede 	-658
cobol 	362
covariate 	590
departure 	952
deploy 	44
diophantine 	645
efferent 	54
elysee 	-326
eradicate 	376
escritoire 	856
exorcism 	-983
fiat 	170
filmy 	-874
flatworm 	503
gestapo 	915
infra 	-847
isis 	-982
lindholm 	999
markham 	475
mincemeat 	-880
moresby 	756
mycenae 	183
plugging 	-266
smokescreen 	423
speakeasy 	-745
vein 	813 
  """

  The plain model (go/0) solve this problem - first solution - in 0.01s.

  It takes about 2:08minutes to generate (and print) all 349168 subsets via cp's solve/fail.


  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/


import cp.


main => go.

%
% Get any solution.
%
go =>
  things(Things),
  subset_sum(Things, X, Z),
  println(z=Z),
  println(x=X),
  println([Things[I] : I in 1..Things.length, X[I] == 1]),
  nl.


%
% Solve for a specific length of solutions.
%
go2 => 
  things(Things),
  foreach(Len in 1..Things.length)
     println(len=Len),
     (subset_sum(Things, Len, X, _Z) -> 
         println([Things[I,1] : I in 1..Things.length, X[I] == 1])
      ;
      true
     ),
     nl
  end,

  nl.

% It takes about 5minutes to count all count the 349167 solutions.
% We require that there should be at least one thing.
go3 =>
  things(Things),
  Count = count_all(subset_sum(Things, _X, _Z)),
  println(count=Count),
  nl.

%
% Solve subset problem for any length (wrapper).
%
subset_sum(Things, X, Z) =>
  subset_sum(Things,_,X,Z).

%
% Solve for a specific length (if Len2 is nonvar).
%
subset_sum(Things, Len2, X, Z) =>
  Weights = [ T[2] : T in Things],
  Len = Things.length,
  X = new_list(Len),
  X :: 0..1,

  Z #= sum(X),
  if nonvar(Len2) then
     Z #= Len2
  end,
  Z #> 0, % require at least one thing
  sum([X[I] * Weights[I] : I in 1..Len]) #= 0,
  solve($[ff], X).


things(Things) =>  
  Things = [
         [alliance, 	-624],
         [archbishop, 	-915],
         [balm, 	397],
         [bonnet, 	452],
         [brute, 	870],
         [centipede, 	-658],
         [cobol, 	362],
         [covariate, 	590],
         [departure, 	952],
         [deploy, 	44],
         [diophantine, 	645],
         [efferent, 	54],
         [elysee, 	-326],
         [eradicate, 	376],
         [escritoire, 	856],
         [exorcism, 	-983],
         [fiat, 	170],
         [filmy, 	-874],
         [flatworm, 	503],
         [gestapo, 	915],
         [infra, 	-847],
         [isis, 	-982],
         [lindholm, 	999],
         [markham, 	475],
         [mincemeat, 	-880],
         [moresby, 	756],
         [mycenae, 	183],
         [plugging, 	-266],
         [smokescreen, 	423],
         [speakeasy, 	-745],
         [vein, 	813 ]
  ].

