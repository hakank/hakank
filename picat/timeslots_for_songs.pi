/* 

  Timeslot problem in Picat.

  From Stack Overflow
  "What category of combinatorial problems appear on the logic games section of the LSAT?"
  http://stackoverflow.com/questions/2707619/what-category-of-combinatorial-problems-appear-on-the-logic-games-section-of-the
  """
  EDIT: See 
  http://stackoverflow.com/questions/318888/solving-who-owns-the-zebra-programmatically 
  for a similar class of problem
  
  There's a category of logic problem on the LSAT that goes like this:
  
    Seven consecutive time slots for a broadcast, numbered in chronological order 
    I through 7, will be filled by six song tapes-G, H, L, O, P, S-and exactly 
    one news tape. Each tape is to be assigned to a different time slot, and 
    no tape is longer than any other tape. The broadcast is subject to the 
    following restrictions:
    - L must be played immediately before O.
    - The news tape must be played at some time after L.
    - There must be exactly two time slots between G and P, regardless of 
      whether G comes before P or whether G comes after P.

  I'm interested in generating a list of permutations that satisfy the conditions 
  as a way of studying for the test and as a programming challenge. However, I'm 
  not sure what class of permutation problem this is. I've generalized the type 
  problem as follows:
  
  Given an n-length array A:
  
  - How many ways can a set of n unique items be arranged within A? 
    Eg. How many ways are there to rearrange ABCDEFG?
  - If the length of the set of unique items is less than the length of A, 
    how many ways can the set be arranged within A if items in the set 
    may occur more than once? Eg. ABCDEF => AABCDEF; ABBCDEF, etc.
  - How many ways can a set of unique items be arranged within A if the 
    items of the set are subject to "blocking conditions"?

  My thought is to encode the restrictions and then use something like Python's 
  itertools to generate the permutations. Thoughts and suggestions are welcome.
  """

  Note: There are 60 solutions to this specific problem.

  This program was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

import cp.

main => go.

go =>
  N = 7,

  % Which timeslot would each song/News go?
  X = [G,_H,L,O,P,_S,News],
  X :: 1..N,
  
  Str = ["G","H","L","O","P","S","News"],

  % The timeline
  TimeLine = new_list(N),
  TimeLine :: 1..N,

  all_different(X),
  all_different(TimeLine),

  % L must be played immediately before O.
  O-L #= 1,

  % The news tape must be played at some time after L.
  News #> L,

  % There must be exactly two time slots between G and P, regardless of    
  % whether G comes before P or whether G comes after P.
  abs(G-P) #= 3,

  % convert to timeline
  assignment(X, TimeLine),

  Vars = TimeLine ++ X,
  solve(Vars),

  println(x=X),
  println("TimeLine:"),
  foreach(I in 1..N)
    println(Str[TimeLine[I]])
  end,
  nl,
  fail,
  
  nl.
