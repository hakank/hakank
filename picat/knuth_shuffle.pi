/* 

  Knuth shuffle (Rosetta code) in Picat.

  http://rosettacode.org/wiki/Knuth_shuffle
  """
  Implement the Knuth shuffle [http://en.wikipedia.org/wiki/Knuth_shuffle] 
  (a.k.a. the Fisher-Yates shuffle) for an integer array (or, if possible, 
  an array of any type). The Knuth shuffle is used to create a random 
  permutation of an array. 
  """

  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/


% import util.
% import cp.


main => go.


go =>
  % _ = random2(), % random seed

  L = 1..10,
  println(l=L),
  println(sorted=knuth_shuffle(L)),
  nl,
  
  L2 = "picat programming",
  println(l2=L2),
  println(sorted=knuth_shuffle(L2)),
  nl,
  
  % inline
  L3 = "picat programming inline3",
  println(l3=L3),
  knuth_shuffle_inline(L3),
  println(l3_after=L3),
  nl,
  
  L4 = "picat programming inline4",
  println(l4_before=L4),
  L4.knuth_shuffle_inline(),
  println(l4_after=L4),

  nl.


%
% As a function.
%
knuth_shuffle(List) = Sorted => 
  Sorted = copy_term(List),
  Len = List.length,
  foreach(I in Len..-1..1)
    J = 1 + random() mod I,
    if J != I then
      Tmp = Sorted[I],
      Sorted[I] := Sorted[J],
      Sorted[J] := Tmp
    end
  end.

%
% Inline sorting.
%
knuth_shuffle_inline(List) => 
  foreach(I in List.length..-1..1)
    J = 1 + random() mod I,
    Tmp = List[I],
    List[I] := List[J],
    List[J] := Tmp
  end.
