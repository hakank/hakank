/* 

  Euler #8 in Picat.

  Problem 8:
  """
  Find the greatest product of five consecutive digits in the 
  1000-digit number.
  ...
  """

  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

import util.

main => time(go).

go => euler8. % , euler8b.


%
% Euler 8
%
p8b(A) => 
  A = [7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,9,6,9,8,3,
5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,8,5,8,6,1,5,6,0,7,8,9,1,1,2
,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,
0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0
,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,
8,6,6,4,5,2,3,8,7,4,9,3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8
,6,6,7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,6,5,7,2,7,3,
3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,5,2,5,8,4,9,0,7,7,1,1,6,7,0,5
,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,
1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2
,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,
7,5,8,8,6,6,6,8,8,1,1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8
,6,1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,2,4,2,1,9,0,2,
2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5
,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,
9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1
,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,
7,5,2,9,6,3,4,5,0].

p8 = A =>
  p8b(A).

%
% recursive version
%
% 0.021s
euler8 =>
   p8b(P),
   e8(P,Max),
   println(Max).

e8(P,Max) =>
   e8(P,0,Max).

% table

% base case (exactly 5 elements)
e8([X1,X2,X3,X4,X5],Max0,Max) => 
  Prod = X1*X2*X3*X4*X5,
  e8_check(Max0,Prod,Max1),
  Max = Max1.
  % Max = max(Max0,Prod). % slightly slower

% more than 5 elements
e8([X1,X2,X3,X4,X5|T], Max0, Max) =>
  Prod = X1*X2*X3*X4*X5,
  e8_check(Max0,Prod,Max1),
  % Max1 = max(Max0,Prod), % slighly slower
  e8([X2,X3,X4,X5|T], Max1, Max).

e8_check(Max0,Prod,Max1) =>
   Prod > Max0 ->
     Max1 = Prod
   ; 
     Max1 = Max0.

% 0.024s
euler8a =>
   p8b(P),
   List = array_slice(P, 5),
   L2 = [Prod : L in List, Prod = prod(L)],
   Max = max(L2),
   writeln(Max).

% explicit loop instead of list comprehension
% 0.036s
euler8b =>
   p8b(P),
   List = array_slice(P, 5),
   L2 = [],
   foreach(T in List) 
      PL = prod(T),
      L2 := L2 ++ [PL]
   end,
   Max = max(L2),
   writeln(Max).

% 0.024
euler8c => 
   p8b(P),
   writeln(array_slice(P,5).map(prod).max()).


% using builtin slice/3
% 0.028s
euler8d =>
   p8b(P),
   Len = P.length,
   SliceLen = 5,
   println([prod(P.slice(I,I+SliceLen-1)): I in 1..Len-SliceLen+1].max()).

% Recursive version (From my Curry program euler8.curry)
euler8e_([]) = [0]. % Note: This adds some extra 0s to the end, but that's OK
euler8e_(A@[X|Xs]) = [prod(A[1..5])] ++ euler8e_(Xs).
% It's one of the shortest versions...
% 0.0s
euler8e =>
  p8().euler8e_.max.println.


%
% slices an array A [...] into slices of length SliceLen
% and returns a list List
%
array_slice(A, SliceLen) = List =>
   List = [A2 : I in 1..A.length-SliceLen,
           A2 = [ A[J] : J in I..I+SliceLen-1] ].

