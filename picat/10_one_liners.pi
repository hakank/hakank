/* 

  10 Picat one liners.

  From 
  10 Scala One Liners to Impress Your Friends
  http://mkaz.com/solog/scala/10-scala-one-liners-to-impress-your-friends.html
  Updated Gist:
  https://gist.github.com/mkaz/d11f8f08719d6d27bab5

  Note: This program just implement 8 of these one liners.

  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/


import util.
% import cp.
import ordset.

main => go.

go => 
   foreach(I in 1..10)
     T = parse_term("go" ++ I.to_string()),
     println(T),
     call(T),
     nl
   end,
   nl.

%
% 1. Multiple Each Item in a List by 2
% """
% The map function takes each element in the list and applies it to the 
% corresponding function. In this example, we take each element and multiply it by 2. 
% This will return a list of equivalent size, compare to other examples which use 
% reduceLeft and foldLeft those functions return only a single value not a list.
% 
% (1 to 10) map { _ * 2 }
% """
%
double(X) = X*2.
go1 => 
  println([I*2 : I in 1..10]),
  (1..10).map(double).println().

%
% 2. Sum a List of Numbers
% """
% The most common example using reduceLeft is summing a list of 
% numbers. This example sums the numbers 1 to 1000 using the range 
% function to create our list of numbers and reduceLeft iterates and 
% sum together returning a single value. Added simpler example using built-in sum function.
%
%   (1 to 1000).reduceLeft( _ + _ )
%   (1 to 1000).sum
% """
%
go2 =>
   L=1..1000,
   println(L.sum()),
   println(reduce(+,L)),
   println(L.reduce(+)),
   % println($(+).reduce(L)), % we "escape" the +
   nl.


%
% 3. Verify if Exists in a String
% """
% This example returns a boolean if a word in a list exists in a string. 
% I used this example for checking if a tweet contains a word I’m interested in. 
% I suppose technically it is three lines, but the first two are just setting variables.
%    val wordList = List("scala", "akka", "play framework", "sbt", "typesafe")
%    val tweet = "This is an example tweet talking about scala and sbt."
%    (wordList.foldLeft(false)( _ || tweet.contains(_) ))
%    wordList.exists(tweet.contains)
% """
%
go3 =>
   Words = ["picat", "bprolog", "constraints", "csp", "action rules"],
   Tweet = "This is an example tweet talking about picat and constraints.",
   println(list_comp1=[W: W in Words, find(Tweet,W,_,_)]),
   println(list_comp2=[W : W in Words, membchk(W,Tweet.split(" ."))]),

   % logic programming
   println(find=findall(W,(member(W,Words),find(Tweet,W,_,_)))),
   println(append=findall(W,(member(W,Words),append(_,W,_,Tweet)))),
   println(cond=cond( (member(W,Words),find(Tweet,W,_,_)), "exists", "not exists")),

   nl.


%
% 4. Read in a File
% """
% This one-liner might only be impressive if you are coming from a Java 
% background, it is pretty common now to be able to read a file in with 
% one line of code. Here are two examples of reading in a file, one reads 
% entire file in to a string, the other reads in each line as an entry in a List.
% 
%    val fileText = io.Source.fromFile("data.txt").mkString
%    val fileLines = io.Source.fromFile("data.txt").getLines.toList
%
% """
%
go4 =>
   println(read_file_lines("10_one_liners.pi")),
   println(as_chars=len=read_file_chars("10_one_liners.pi").len),
   nl.

%
% 5. Happy Birthday to You!
% """
% A common one-liner which prints out the Happy Birthday song. This 
% illustrates scala’s ternary operator as well as combining map and foreach.
%   (1 to 4).map { i => "Happy Birthday " + (if (i == 3) "dear NAME" else "to You") }.foreach { println }
% """
%
go5 =>
  [ "Happy Birthday " ++ cond(I == 3, "dear NAME", "to You") :  I in 1..4].join("\n").println(). 


%
% 6. Filter list of numbers
% """
% Filter a list of numbers into two categories based on a criteria using partition.
% This example creates two lists of students based on their test scores.
%      val (passed, failed) = List(49, 58, 76, 82, 88, 90) partition ( _ > 60 )
% """
%
% Note: Picat don't have partition/2 as a built-in...
%
partition([],_P) = [[],[]].
partition([X|Xs],P) = cond(call(P,X),
                            [[X|Ys],Zs],
                            [Ys,[X|Zs]]) =>
                       [Ys,Zs] = partition(Xs,P).

f(X) => X > 60. % ... nor general support for lambdas.
go6 =>
   [Passed1,Failed1] = [49, 58, 76, 82, 88, 9,60].partition(f),
   println([passed1=Passed1,failed1=Failed1]),
   
   % However, this works (note that we change the condition)
   [Passed2,Failed2] = [49, 58, 76, 82, 88, 9,60].partition($('<'(60))),
   println([passed2=Passed2,failed2=Failed2]),

   

   nl.
   

%
% 7. Fetch and Parse an XML web service
% """
% Since XML is a native structure to scala, parsing an XML feed comes with no effort. 
% Here’s an example fetching the Twitter search feed.
% """
%
% Note: Picat (currently) don't have built-in support for XML parsing.
%
go7 => 
   println(nope7).


%
% 8. Find minimum (or maximum) in a List
% """
% Another couple of examples using reduceLeft to iterate through a list and 
% apply a function. Added simpler examples of the method min/max on the list.
%    List(14, 35, -7, 46, 98).reduceLeft ( _ min _ )
%    List(14, 35, -7, 46, 98).min
%    List(14, 35, -7, 46, 98).reduceLeft ( _ max _ )
%    List(14, 35, -7, 46, 98).max
% """
%
go8 =>

   L = [14, 35, -7, 46, 98],
   L.reduce(min).println(),
   L.min().println(),

   L.reduce(max).println(),
   L.max().println(),
   nl.


% 9. Parallel Processing
% """
% Scala 2.9 introduced a new collection type called "parallel collections" which 
% utilize multi-core processors when performing bulk operations such as foreach, 
% map, filter, etc… Here’s a video of Aleksandar Prokopec explaining parallel 
% collections at Scala Days 2010.
% 
% This example is not quite a copy-and-paste into the REPL, but it illustrates 
% how to use parallel collections. Imagine you had a set of data defined in a list 
% dataList and a function processItem which was very cpu intense. The following 
% one-liner would give you parallel processing over the list.
% 
%    val result = dataList.par.map( line => processItem(line) )
% """
%
% Note: Picat (currently) don't support parallel processing.
%
go9 => 
  println(nope9).


% 10. Sieve of Eratosthenes
% """
% Ok, this one isn’t quite practical and technically is not a one-liner since it 
% relies on a operator being previously defined, but it is still pretty 
% darn cool, even if it is unreadable. Daniel Sobral created the Sieve of 
% Eratosthenes which is a algorithm used to determine if a number is prime.
% 
%   (n: Int) => (2 to n) |> (r => r.foldLeft(r.toSet)((ps, x) => if (ps(x)) ps -- (x * x to n by x) else ps))
% Requires definition of |> operator, a syntax borrowed from F#. See Steve Gilham’s blog for an example.
% """
%
%
notin(Value,List) => not membchk(Value,List).
% Note: This are not at all a faithful translations of the Scala version.
go10 =>
   M = 1000,
   % This don't work: assignment_in_meta_call:not
   % println([J : J in [2]++3..2..M, not member(J,[K : I in 2..round(sqrt(M)), K in I*I..I..M])]),

   println([J : J in [2]++3..2..M, notin(J,[K : I in 2..round(sqrt(M)), K in I*I..I..M])]),
   println([I:I in 2..M,[_:J in 2..sqrt(I), I mod J = 0].length == 0]),

   % faster using ordset
   println([ N=subtract(new_ordset([J:J in [2]++3..2..N]), 
                        new_ordset([K:I in 2..round(sqrt(N)),K in I*I..I..N])).length :
             Ix in 0..5, 
             N=10**Ix]).
