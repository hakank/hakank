/* 

  Movies night puzzle in Picat.

  From Adrian Groza "Modelling Puzzles in First Order Logic"
  See https://www.researchgate.net/publication/374588335_Measuring_reasoning_capabilities_of_ChatGPT
  """
  Puzzle 57. Movies night

  Four boys are at home to watch some movies. Figure out which is the favourite kind of
  movie of each one.
  1.  Joshua is in one of the ends.
  2.  The boy wearing the Black shirt is somewhere to the left of the youngest boy.
  3.  Joshua likes Horror movies.
  4.  The 14-year-old boy is in the third position.
  5.  The boy wearing the Red shirt is somewhere between the 13-year-old boy and the
      one who likes Action movies, in that order.
  6.  Daniel likes Thriller movies.
  7.  The boy who is going to eat Cookies is in one of the ends.
  8.  The boy wearing the Black shirt is exactly to the left of the one who likes Thriller
      movies.
  9.  The boy who is going to eat Crackers is exactly to the right of the boy who likes
      Comedy movies.
  10. The boy wearing the Red shirt is somewhere between the boy who is going to eat
      Popcorn and Nicholas, in that order.
  11. In one of the ends is the boy who likes Thriller movies.
  12. Nicholas is somewhere between Joshua and Daniel, in that order.
  13. At first position is the boy wearing the Green shirt.
  (taken from Brainzillaâ€”www.brainzilla.com)  
  """

  This is a port of Groza's Mace4 model.

  Solution:
  Joshua   Green  Horror   Popcorn  13      
  Ryan     Red    Comedy   Chips    12      
  Nicholas Black  Action   Crackers 14      
  Daniel   Blue   Thriller Cookies  11      


  This program was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

import cp.

main => go.

go ?=>
  N = 4,

  Names = [Joshua,_Ryan,Nicholas,Daniel],
  Names = 0..N-1,
  NamesS = ["Joshua","Ryan","Nicholas","Daniel"],
 

  Colors = [Green,Black,Red,_Blue],
  Colors :: 0..N-1,
  ColorsS = ["Green","Black","Red","Blue"],
  all_different(Colors),
  
  Genre = [Thriller,Horror,Comedy,Action],
  Genre :: 0..N-1,
  GenreS = ["Thriller","Horror","Comedy","Action"],  
  all_different(Genre),
  
  Snacks = [Popcorn,_Chips,Crackers,Cookies],
  Snacks :: 0..N-1,
  SnacksS = ["Popcorn","Chips","Crackers","Cookies"],  
  all_different(Snacks),
  
  Ages = [Age14,Age13,_Age12,Age11],
  Ages :: 0..N-1,
  AgesS = ["14","13","12","11"],
  all_different(Ages),

  % 1.  Joshua is in one of the ends.
  Joshua #= 0 #\/ Joshua #= 3,
  
  % 2.  The boy wearing the Black shirt is somewhere to the left of the youngest boy.
  Black #< Age11,
  
  % 3.  Joshua likes Horror movies.
  Joshua #= Horror,
  
  % 4.  The 14-year-old boy is in the third position.
  Age14 #= 2,
  
  % 5.  The boy wearing the Red shirt is somewhere between the 13-year-old boy and the
  %     one who likes Action movies, in that order.  
  Red #> Age13 #/\ Red #< Action,
  
  % 6.  Daniel likes Thriller movies.
  Daniel #= Thriller,
  
  % 7.  The boy who is going to eat Cookies is in one of the ends.
  Cookies #= 0 #\/ Cookies #= 3,
  
  % 8.  The boy wearing the Black shirt is exactly to the left of the one who likes Thriller
  %     movies.
  Black+1 #= Thriller,
  
  % 9.  The boy who is going to eat Crackers is exactly to the right of the boy who likes
  %     Comedy movies.
  Crackers #= Comedy+1,
  
  % 10. The boy wearing the Red shirt is somewhere between the boy who is going to eat
  %     Popcorn and Nicholas, in that order.  
  Popcorn #< Red #/\ Red #< Nicholas,
  
  % 11. In one of the ends is the boy who likes Thriller movies.
  Thriller #= 0 #\/ Thriller #= 3,
  
  % 12. Nicholas is somewhere between Joshua and Daniel, in that order.
  Joshua #< Nicholas #/\ Nicholas #< Daniel,
  
  % 13. At first position is the boy wearing the Green shirt.  
  Green #= 0,

  Vars = Colors ++ Names ++ Genre ++ Snacks ++ Ages,
  solve([Vars]),
  
  foreach(I in 0..N-1)
    element(Name,Names,I),
    element(C,Colors,I),
    element(G,Genre,I),
    element(S,Snacks,I),
    element(A,Ages,I),
    printf("%-8w %-6w %-8w %-8w %-8w\n",NamesS[Name],ColorsS[C],GenreS[G],SnacksS[S],AgesS[A])
  end,

  fail,

  nl.
go => true.
