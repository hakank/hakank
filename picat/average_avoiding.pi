/* 

  Average avoiding in Picat.

  From Stack Overflow
  "Arrange an array such that the average of 2 numbers does not lie between them"
  http://stackoverflow.com/questions/19345090/arrange-an-array-such-that-the-average-of-2-numbers-does-not-lie-between-them
  """
  As the question says, find an algorithm to arrange the array. This was a 
  Facebook interview question.
  
  The average needs to be exact. We do not round of, take floor or ceil of the average.
  
  Edit : To quote an example, if the numbers are 1,2,5,9, then the arrangement 
  {1,9,2,5} is valid but {1,5,9,2} is not since average of 1 and 9 is 5 and lies 
  between them. Why is everybody downvoting this?
  
  """

  Note: This question don't say anything about the sequence, ie.
  - if it contains all the integers from min..max
  - if the integers are distinct or not, i.e. if duplicates are allowed

  This Picat model is a general approach for solving both the free version and 
  and the restricted 0..N-1 variant.


  [Later:
   It seems that the 0..N-1 (or 1..N) problem is quite known:
   
   See 
   - http://cs.stackexchange.com/questions/13857/order-a-list-of-whole-numbers-so-that-no-two-numbers-have-the-average-of-them-si
   """
   Here's a simple recursive construction for the more restrictive version of the problem.
   ....
   """



   - http://math.stackexchange.com/questions/3060/arrangement-of-numbers
   """
   Assume the inductive hypothesis that it is true for lists smaller than n. 
   To reorder 1...n this way as well, split it into evens and odds, and apply the 
   function floor((x+1)/2) to these sets to create two half-problems of the same type 
   which by the hypothesis can be solved. Now unapply the transformation to each half-solution 
   using the function 2x to recover the evens and the function 2x-1 to recover the odds. 
   These functions are linear so the condition is still satisfied. Now concatenate these 
   two lists together to form the solution. This concatenation always works because the 
   average of an even and an odd is not an integer.
   """

   - http://math.stackexchange.com/questions/108439/total-ordering-of-the-reals-with-a-certain-property
   """
   I was communicated the following 1994 Miklos Schweitzer problem:

    Is there an ordering of the real numbers such that whenever 
         x<y<z (in this ordering), we have y!=(x+z)/2?

   ....
   
   Looks like the answer is yes, there is such an ordering. An article titled 
   "Chaotic ordering of rationals and reals" appeared in December 2011 issue of the 
   American Mathematical Monthly.

   The first page of the article can be seen here: http://www.jstor.org/pss/10.4169/amer.math.monthly.118.10.921

   Apparently the question is due to Erdos and Graham.
   """

  ]


 
  Here is an analysis of the sequence 0..99 (i.e. N=100) from a comment.
  This is a valid solution for N=100 (according to one of the comments):
  [0,64,32,96,16,80,48,8,72,40,24,88,56,4,68,36,20,84,52,12,76,44,28,92,60,2,66,34,98,18,82,50,10,74,42,26,90,58,6,70,38,22,86,54,14,78,46,30,94,62,1,65,33,97,17,81,49,9,73,41,25,89,57,5,69,37,21,85,53,13,77,45,29,93,61,3,67,35,99,19,83,51,11,75,43,27,91,59,7,71,39,23,87,55,15,79,47,31,95,63]

  The most obvious observation is that this sequence has collected the even to the left 
  and the odd to the right.

  There are also quite a few interesting symmetries in Oct and Hex:

    - all the numbers with the same last number (in Oct and Hex) are collected together,
      i.e. modulo 8 and 16.

    - the Hex last digits are in this order:
         0,8,4,C,2,A,6,E,1,9,5,D,3,B,7,F

    - the sequence always start with the single digit (called "X") of that sequence 
      and then proceeds either as these two sequences
          X,4X,2X,1X,5X,3X 
          X,4X,2X,_6X_,1X,5X,3X

    - the divisors (div 16) also show a regularity
         0,4,2,(6),
         1,5,3,

      These four groups mod 16 groups has (in order) the extra 6:
        0, 2, 
        1, 3

    - we see the groups clearly in the "mod 16" column

    - when studying the oct versions we see (of course) a similar pattern, though
      it's not that obvious...

    - modulo 16 we see these collected sequences:

       0,8,4,12,2,10,6,14,
       1,9,5,13,3,11,7,15

      where the odd is the same as the evens + 1

    - Global symmetry: The 50 second last entries are mirrored as the first entries + 1:

      0,64,32,96,16,80,48,8,72,40,24,88,56,4,68,36,20,84,52,12,76,44,28,92,60,2,66,34,98,18,82,50,10,74,42,26,90,58,6,70,38,22,86,54,14,78,46,30,94,62,
      1,65,33,97,17,81,49,9,73,41,25,89,57,5,69,37,21,85,53,13,77,45,29,93,61,3,67,35,99,19,83,51,11,75,43,27,91,59,7,71,39,23,87,55,15,79,47,31,95,63

      And here is a more recursive pattern where each 8 groups are collected and has
      a relation with 
      (1  2  3  4  5  6  7  8  9 10 11 12 13  14 15 16 17 18 19 20 21 22 23 24 25)

       0,64,32,96,16,80,48, 8,72,40,24,88,56,  4,68,36,20,84,52,12,76,44,28,92,60,
       2,66,34,98,18,82,50,10,74,42,26,90,58,  6,70,38,22,86,54,14,78,46,30,94,62,
       1,65,33,97,17,81,49, 9,73,41,25,89,57,  5,69,37,21,85,53,13,77,45,29,93,61,
       3,67,35,99,19,83,51,11,75,43,27,91,59,  7,71,39,23,87,55,15,79,47,31,95,63


start  0 64 32 .. .. .. 48
end   16 79 47 .. .. ..

       0,64,32,96,16,80,48, 
       8,72,40,24,88,56,    
       4,68,36,20,84,52,
      12,76,44,28,92,60,
       2,66,34,98,18,82,50,
      10,74,42,26,90,58,  
       6,70,38,22,86,54,
      14,78,46,30,94,62,
       1,65,33,97,17,81,49, 
       9,73,41,25,89,57,  
       5,69,37,21,85,53,
      13,77,45,29,93,61,
       3,67,35,99,19,83,51,
      11,75,43,27,91,59,  
       7,71,39,23,87,55,
      15,79,47,31,95,63


    - So, I see a lot of patterns but don't understand it fully and especially 
      don't understand why it would be a average avoiding sequence. 
      Also, I'm not sure how to generalize this for any sequence of 0..N-1, even
      less how it could be used for generating a sequence of any numbers of 
      any length.

    - differences
      Here are the differences of the sequence with many patterns...

           [64,-32,64,-80,
            64,-32,-40,64,-32,-16,
            64,-32,-52,
            64,-32,-16,
            64,-32,-40,64,-32,-16,
            64,-32,-58,
            64,-32,
            64,-80,
            64,-32,-40,64,-32,-16,
            64,-32,-52,
            64,-32,-16,
            64,-32,-40,
            64,-32,-16,
            64,-32,
            -61, % the break from even to odd
            64,-32,
            64,-80,
            64,-32,-40,
            64,-32,-16,
            64,-32,-52,
            64,-32,-16,
            64,-32,-40,
            64,-32,-16,
            64,-32,-58,
            64,-32,
            64,-80,
            64,-32,-40,
            64,-32,-16,
            64,-32,-52,
            64,-32,-16,
            64,-32,-40,
            64,-32,-16,
            64,-32]



goal=go3
  1 ( 1)   0 [0,0,0,0,0,0,0,0] [0,0,0,0]   0 (mod 16:  0) (div 16:  0)
  2 ( 2)  64 [0,1,0,0,0,0,0,0] [0,1,0,0]  40 (mod 16:  0) (div 16:  4)
  3 ( 3)  32 [0,0,1,0,0,0,0,0] [0,0,4,0]  20 (mod 16:  0) (div 16:  2)
  4 ( 4)  96 [0,1,1,0,0,0,0,0] [0,1,4,0]  60 (mod 16:  0) (div 16:  6)
  5 ( 5)  16 [0,0,0,1,0,0,0,0] [0,0,2,0]  10 (mod 16:  0) (div 16:  1)
  6 ( 6)  80 [0,1,0,1,0,0,0,0] [0,1,2,0]  50 (mod 16:  0) (div 16:  5)
  7 ( 7)  48 [0,0,1,1,0,0,0,0] [0,0,6,0]  30 (mod 16:  0) (div 16:  3)

  8 ( 8)   8 [0,0,0,0,1,0,0,0] [0,0,1,0]   8 (mod 16:  8) (div 16:  0)
  9 ( 9)  72 [0,1,0,0,1,0,0,0] [0,1,1,0]  48 (mod 16:  8) (div 16:  4)
 10 ( A)  40 [0,0,1,0,1,0,0,0] [0,0,5,0]  28 (mod 16:  8) (div 16:  2)
 11 ( B)  24 [0,0,0,1,1,0,0,0] [0,0,3,0]  18 (mod 16:  8) (div 16:  1)
 12 ( C)  88 [0,1,0,1,1,0,0,0] [0,1,3,0]  58 (mod 16:  8) (div 16:  5)
 13 ( D)  56 [0,0,1,1,1,0,0,0] [0,0,7,0]  38 (mod 16:  8) (div 16:  3)

 14 ( E)   4 [0,0,0,0,0,1,0,0] [0,0,0,4]   4 (mod 16:  4) (div 16:  0)
 15 ( F)  68 [0,1,0,0,0,1,0,0] [0,1,0,4]  44 (mod 16:  4) (div 16:  4)
 16 (10)  36 [0,0,1,0,0,1,0,0] [0,0,4,4]  24 (mod 16:  4) (div 16:  2)
 17 (11)  20 [0,0,0,1,0,1,0,0] [0,0,2,4]  14 (mod 16:  4) (div 16:  1)
 18 (12)  84 [0,1,0,1,0,1,0,0] [0,1,2,4]  54 (mod 16:  4) (div 16:  5)
 19 (13)  52 [0,0,1,1,0,1,0,0] [0,0,6,4]  34 (mod 16:  4) (div 16:  3)

 20 (14)  12 [0,0,0,0,1,1,0,0] [0,0,1,4]   C (mod 16: 12) (div 16:  0)
 21 (15)  76 [0,1,0,0,1,1,0,0] [0,1,1,4]  4C (mod 16: 12) (div 16:  4)
 22 (16)  44 [0,0,1,0,1,1,0,0] [0,0,5,4]  2C (mod 16: 12) (div 16:  2)
 23 (17)  28 [0,0,0,1,1,1,0,0] [0,0,3,4]  1C (mod 16: 12) (div 16:  1)
 24 (18)  92 [0,1,0,1,1,1,0,0] [0,1,3,4]  5C (mod 16: 12) (div 16:  5)
 25 (19)  60 [0,0,1,1,1,1,0,0] [0,0,7,4]  3C (mod 16: 12) (div 16:  3)

 26 (1A)   2 [0,0,0,0,0,0,1,0] [0,0,0,2]   2 (mod 16:  2) (div 16:  0)
 27 (1B)  66 [0,1,0,0,0,0,1,0] [0,1,0,2]  42 (mod 16:  2) (div 16:  4)
 28 (1C)  34 [0,0,1,0,0,0,1,0] [0,0,4,2]  22 (mod 16:  2) (div 16:  2)
 29 (1D)  98 [0,1,1,0,0,0,1,0] [0,1,4,2]  62 (mod 16:  2) (div 16:  6)
 30 (1E)  18 [0,0,0,1,0,0,1,0] [0,0,2,2]  12 (mod 16:  2) (div 16:  1)
 31 (1F)  82 [0,1,0,1,0,0,1,0] [0,1,2,2]  52 (mod 16:  2) (div 16:  5)
 32 (20)  50 [0,0,1,1,0,0,1,0] [0,0,6,2]  32 (mod 16:  2) (div 16:  3)

 33 (21)  10 [0,0,0,0,1,0,1,0] [0,0,1,2]   A (mod 16: 10) (div 16:  0)
 34 (22)  74 [0,1,0,0,1,0,1,0] [0,1,1,2]  4A (mod 16: 10) (div 16:  4)
 35 (23)  42 [0,0,1,0,1,0,1,0] [0,0,5,2]  2A (mod 16: 10) (div 16:  2)
 36 (24)  26 [0,0,0,1,1,0,1,0] [0,0,3,2]  1A (mod 16: 10) (div 16:  1)
 37 (25)  90 [0,1,0,1,1,0,1,0] [0,1,3,2]  5A (mod 16: 10) (div 16:  5)
 38 (26)  58 [0,0,1,1,1,0,1,0] [0,0,7,2]  3A (mod 16: 10) (div 16:  3)

 39 (27)   6 [0,0,0,0,0,1,1,0] [0,0,0,6]   6 (mod 16:  6) (div 16:  0)
 40 (28)  70 [0,1,0,0,0,1,1,0] [0,1,0,6]  46 (mod 16:  6) (div 16:  4)
 41 (29)  38 [0,0,1,0,0,1,1,0] [0,0,4,6]  26 (mod 16:  6) (div 16:  2)
 42 (2A)  22 [0,0,0,1,0,1,1,0] [0,0,2,6]  16 (mod 16:  6) (div 16:  1)
 43 (2B)  86 [0,1,0,1,0,1,1,0] [0,1,2,6]  56 (mod 16:  6) (div 16:  5)
 44 (2C)  54 [0,0,1,1,0,1,1,0] [0,0,6,6]  36 (mod 16:  6) (div 16:  3)

 45 (2D)  14 [0,0,0,0,1,1,1,0] [0,0,1,6]   E (mod 16: 14) (div 16:  0)
 46 (2E)  78 [0,1,0,0,1,1,1,0] [0,1,1,6]  4E (mod 16: 14) (div 16:  4)
 47 (2F)  46 [0,0,1,0,1,1,1,0] [0,0,5,6]  2E (mod 16: 14) (div 16:  2)
 48 (30)  30 [0,0,0,1,1,1,1,0] [0,0,3,6]  1E (mod 16: 14) (div 16:  1)
 49 (31)  94 [0,1,0,1,1,1,1,0] [0,1,3,6]  5E (mod 16: 14) (div 16:  5)
 50 (32)  62 [0,0,1,1,1,1,1,0] [0,0,7,6]  3E (mod 16: 14) (div 16:  3)

 51 (33)   1 [0,0,0,0,0,0,0,1] [0,0,0,1]   1 (mod 16:  1) (div 16:  0)
 52 (34)  65 [0,1,0,0,0,0,0,1] [0,1,0,1]  41 (mod 16:  1) (div 16:  4)
 53 (35)  33 [0,0,1,0,0,0,0,1] [0,0,4,1]  21 (mod 16:  1) (div 16:  2)
 54 (36)  97 [0,1,1,0,0,0,0,1] [0,1,4,1]  61 (mod 16:  1) (div 16:  6)
 55 (37)  17 [0,0,0,1,0,0,0,1] [0,0,2,1]  11 (mod 16:  1) (div 16:  1)
 56 (38)  81 [0,1,0,1,0,0,0,1] [0,1,2,1]  51 (mod 16:  1) (div 16:  5)
 57 (39)  49 [0,0,1,1,0,0,0,1] [0,0,6,1]  31 (mod 16:  1) (div 16:  3)

 58 (3A)   9 [0,0,0,0,1,0,0,1] [0,0,1,1]   9 (mod 16:  9) (div 16:  0)
 59 (3B)  73 [0,1,0,0,1,0,0,1] [0,1,1,1]  49 (mod 16:  9) (div 16:  4)
 60 (3C)  41 [0,0,1,0,1,0,0,1] [0,0,5,1]  29 (mod 16:  9) (div 16:  2)
 61 (3D)  25 [0,0,0,1,1,0,0,1] [0,0,3,1]  19 (mod 16:  9) (div 16:  1)
 62 (3E)  89 [0,1,0,1,1,0,0,1] [0,1,3,1]  59 (mod 16:  9) (div 16:  5)
 63 (3F)  57 [0,0,1,1,1,0,0,1] [0,0,7,1]  39 (mod 16:  9) (div 16:  3)

 64 (40)   5 [0,0,0,0,0,1,0,1] [0,0,0,5]   5 (mod 16:  5) (div 16:  0)
 65 (41)  69 [0,1,0,0,0,1,0,1] [0,1,0,5]  45 (mod 16:  5) (div 16:  4)
 66 (42)  37 [0,0,1,0,0,1,0,1] [0,0,4,5]  25 (mod 16:  5) (div 16:  2)
 67 (43)  21 [0,0,0,1,0,1,0,1] [0,0,2,5]  15 (mod 16:  5) (div 16:  1)
 68 (44)  85 [0,1,0,1,0,1,0,1] [0,1,2,5]  55 (mod 16:  5) (div 16:  5)
 69 (45)  53 [0,0,1,1,0,1,0,1] [0,0,6,5]  35 (mod 16:  5) (div 16:  3)

 70 (46)  13 [0,0,0,0,1,1,0,1] [0,0,1,5]   D (mod 16: 13) (div 16:  0)
 71 (47)  77 [0,1,0,0,1,1,0,1] [0,1,1,5]  4D (mod 16: 13) (div 16:  4)
 72 (48)  45 [0,0,1,0,1,1,0,1] [0,0,5,5]  2D (mod 16: 13) (div 16:  2)
 73 (49)  29 [0,0,0,1,1,1,0,1] [0,0,3,5]  1D (mod 16: 13) (div 16:  1)
 74 (4A)  93 [0,1,0,1,1,1,0,1] [0,1,3,5]  5D (mod 16: 13) (div 16:  5)
 75 (4B)  61 [0,0,1,1,1,1,0,1] [0,0,7,5]  3D (mod 16: 13) (div 16:  3)

 76 (4C)   3 [0,0,0,0,0,0,1,1] [0,0,0,3]   3 (mod 16:  3) (div 16:  0)
 77 (4D)  67 [0,1,0,0,0,0,1,1] [0,1,0,3]  43 (mod 16:  3) (div 16:  4)
 78 (4E)  35 [0,0,1,0,0,0,1,1] [0,0,4,3]  23 (mod 16:  3) (div 16:  2)
 79 (4F)  99 [0,1,1,0,0,0,1,1] [0,1,4,3]  63 (mod 16:  3) (div 16:  6)
 80 (50)  19 [0,0,0,1,0,0,1,1] [0,0,2,3]  13 (mod 16:  3) (div 16:  1)
 81 (51)  83 [0,1,0,1,0,0,1,1] [0,1,2,3]  53 (mod 16:  3) (div 16:  5)
 82 (52)  51 [0,0,1,1,0,0,1,1] [0,0,6,3]  33 (mod 16:  3) (div 16:  3)

 83 (53)  11 [0,0,0,0,1,0,1,1] [0,0,1,3]   B (mod 16: 11) (div 16:  0)
 84 (54)  75 [0,1,0,0,1,0,1,1] [0,1,1,3]  4B (mod 16: 11) (div 16:  4)
 85 (55)  43 [0,0,1,0,1,0,1,1] [0,0,5,3]  2B (mod 16: 11) (div 16:  2)
 86 (56)  27 [0,0,0,1,1,0,1,1] [0,0,3,3]  1B (mod 16: 11) (div 16:  1)
 87 (57)  91 [0,1,0,1,1,0,1,1] [0,1,3,3]  5B (mod 16: 11) (div 16:  5)
 88 (58)  59 [0,0,1,1,1,0,1,1] [0,0,7,3]  3B (mod 16: 11) (div 16:  3)

 89 (59)   7 [0,0,0,0,0,1,1,1] [0,0,0,7]   7 (mod 16:  7) (div 16:  0)
 90 (5A)  71 [0,1,0,0,0,1,1,1] [0,1,0,7]  47 (mod 16:  7) (div 16:  4)
 91 (5B)  39 [0,0,1,0,0,1,1,1] [0,0,4,7]  27 (mod 16:  7) (div 16:  2)
 92 (5C)  23 [0,0,0,1,0,1,1,1] [0,0,2,7]  17 (mod 16:  7) (div 16:  1)
 93 (5D)  87 [0,1,0,1,0,1,1,1] [0,1,2,7]  57 (mod 16:  7) (div 16:  5)
 94 (5E)  55 [0,0,1,1,0,1,1,1] [0,0,6,7]  37 (mod 16:  7) (div 16:  3)

 95 (5F)  15 [0,0,0,0,1,1,1,1] [0,0,1,7]   F (mod 16: 15) (div 16:  0)
 96 (60)  79 [0,1,0,0,1,1,1,1] [0,1,1,7]  4F (mod 16: 15) (div 16:  4)
 97 (61)  47 [0,0,1,0,1,1,1,1] [0,0,5,7]  2F (mod 16: 15) (div 16:  2)
 98 (62)  31 [0,0,0,1,1,1,1,1] [0,0,3,7]  1F (mod 16: 15) (div 16:  1)
 99 (63)  95 [0,1,0,1,1,1,1,1] [0,1,3,7]  5F (mod 16: 15) (div 16:  5)
100 (64)  63 [0,0,1,1,1,1,1,1] [0,0,7,7]  3F (mod 16: 15) (div 16:  3)



  For the 0..N-1 problem (N=100), this Picat model give this solution in 25:19minutes
  (last solution in go/0).
  """
n=100
x=[0,64,96,32,48,80,16,56,88,24,40,72,60,92,8,28,44,76,12,52,84,20,36,68,62,94,4,30,46,78,14,54,86,22,38,70,58,90,6,26,42,74,10,50,82,98,18,34,66,2,1,65,97,33,49,81,17,57,89,25,41,73,61,93,9,29,45,77,13,53,85,21,37,69,63,95,5,31,47,79,15,55,87,23,39,71,59,91,7,27,43,75,11,51,83,99,19,35,67,3]
diff=[64,32,-64,16,32,-64,40,32,-64,16,32,-12,32,-84,20,16,32,-64,40,32,-64,16,32,-6,32,-90,26,16,32,-64,40,32,-64,16,32,-12,32,-84,20,16,32,-64,40,32,16,-80,16,32,-64,-1,64,32,-64,16,32,-64,40,32,-64,16,32,-12,32,-84,20,16,32,-64,40,32,-64,16,32,-6,32,-90,26,16,32,-64,40,32,-64,16,32,-12,32,-84,20,16,32,-64,40,32,16,-80,16,32,-64]
  1   0 [0,0,0,0,0,0,0,0]  0
  2  64 [0,1,0,0,0,0,0,0] 40
  3  96 [0,1,1,0,0,0,0,0] 60
  4  32 [0,0,1,0,0,0,0,0] 20
  5  48 [0,0,1,1,0,0,0,0] 30
  6  80 [0,1,0,1,0,0,0,0] 50
  7  16 [0,0,0,1,0,0,0,0] 10
  8  56 [0,0,1,1,1,0,0,0] 38
  9  88 [0,1,0,1,1,0,0,0] 58
 10  24 [0,0,0,1,1,0,0,0] 18
 11  40 [0,0,1,0,1,0,0,0] 28
 12  72 [0,1,0,0,1,0,0,0] 48
 13  60 [0,0,1,1,1,1,0,0] 3C
 14  92 [0,1,0,1,1,1,0,0] 5C
 15   8 [0,0,0,0,1,0,0,0]  8
 16  28 [0,0,0,1,1,1,0,0] 1C
 17  44 [0,0,1,0,1,1,0,0] 2C
 18  76 [0,1,0,0,1,1,0,0] 4C
 19  12 [0,0,0,0,1,1,0,0]  C
 20  52 [0,0,1,1,0,1,0,0] 34
 21  84 [0,1,0,1,0,1,0,0] 54
 22  20 [0,0,0,1,0,1,0,0] 14
 23  36 [0,0,1,0,0,1,0,0] 24
 24  68 [0,1,0,0,0,1,0,0] 44
 25  62 [0,0,1,1,1,1,1,0] 3E
 26  94 [0,1,0,1,1,1,1,0] 5E
 27   4 [0,0,0,0,0,1,0,0]  4
 28  30 [0,0,0,1,1,1,1,0] 1E
 29  46 [0,0,1,0,1,1,1,0] 2E
 30  78 [0,1,0,0,1,1,1,0] 4E
 31  14 [0,0,0,0,1,1,1,0]  E
 32  54 [0,0,1,1,0,1,1,0] 36
 33  86 [0,1,0,1,0,1,1,0] 56
 34  22 [0,0,0,1,0,1,1,0] 16
 35  38 [0,0,1,0,0,1,1,0] 26
 36  70 [0,1,0,0,0,1,1,0] 46
 37  58 [0,0,1,1,1,0,1,0] 3A
 38  90 [0,1,0,1,1,0,1,0] 5A
 39   6 [0,0,0,0,0,1,1,0]  6
 40  26 [0,0,0,1,1,0,1,0] 1A
 41  42 [0,0,1,0,1,0,1,0] 2A
 42  74 [0,1,0,0,1,0,1,0] 4A
 43  10 [0,0,0,0,1,0,1,0]  A
 44  50 [0,0,1,1,0,0,1,0] 32
 45  82 [0,1,0,1,0,0,1,0] 52
 46  98 [0,1,1,0,0,0,1,0] 62
 47  18 [0,0,0,1,0,0,1,0] 12
 48  34 [0,0,1,0,0,0,1,0] 22
 49  66 [0,1,0,0,0,0,1,0] 42
 50   2 [0,0,0,0,0,0,1,0]  2
 51   1 [0,0,0,0,0,0,0,1]  1
 52  65 [0,1,0,0,0,0,0,1] 41
 53  97 [0,1,1,0,0,0,0,1] 61
 54  33 [0,0,1,0,0,0,0,1] 21
 55  49 [0,0,1,1,0,0,0,1] 31
 56  81 [0,1,0,1,0,0,0,1] 51
 57  17 [0,0,0,1,0,0,0,1] 11
 58  57 [0,0,1,1,1,0,0,1] 39
 59  89 [0,1,0,1,1,0,0,1] 59
 60  25 [0,0,0,1,1,0,0,1] 19
 61  41 [0,0,1,0,1,0,0,1] 29
 62  73 [0,1,0,0,1,0,0,1] 49
 63  61 [0,0,1,1,1,1,0,1] 3D
 64  93 [0,1,0,1,1,1,0,1] 5D
 65   9 [0,0,0,0,1,0,0,1]  9
 66  29 [0,0,0,1,1,1,0,1] 1D
 67  45 [0,0,1,0,1,1,0,1] 2D
 68  77 [0,1,0,0,1,1,0,1] 4D
 69  13 [0,0,0,0,1,1,0,1]  D
 70  53 [0,0,1,1,0,1,0,1] 35
 71  85 [0,1,0,1,0,1,0,1] 55
 72  21 [0,0,0,1,0,1,0,1] 15
 73  37 [0,0,1,0,0,1,0,1] 25
 74  69 [0,1,0,0,0,1,0,1] 45
 75  63 [0,0,1,1,1,1,1,1] 3F
 76  95 [0,1,0,1,1,1,1,1] 5F
 77   5 [0,0,0,0,0,1,0,1]  5
 78  31 [0,0,0,1,1,1,1,1] 1F
 79  47 [0,0,1,0,1,1,1,1] 2F
 80  79 [0,1,0,0,1,1,1,1] 4F
 81  15 [0,0,0,0,1,1,1,1]  F
 82  55 [0,0,1,1,0,1,1,1] 37
 83  87 [0,1,0,1,0,1,1,1] 57
 84  23 [0,0,0,1,0,1,1,1] 17
 85  39 [0,0,1,0,0,1,1,1] 27
 86  71 [0,1,0,0,0,1,1,1] 47
 87  59 [0,0,1,1,1,0,1,1] 3B
 88  91 [0,1,0,1,1,0,1,1] 5B
 89   7 [0,0,0,0,0,1,1,1]  7
 90  27 [0,0,0,1,1,0,1,1] 1B
 91  43 [0,0,1,0,1,0,1,1] 2B
 92  75 [0,1,0,0,1,0,1,1] 4B
 93  11 [0,0,0,0,1,0,1,1]  B
 94  51 [0,0,1,1,0,0,1,1] 33
 95  83 [0,1,0,1,0,0,1,1] 53
 96  99 [0,1,1,0,0,0,1,1] 63
 97  19 [0,0,0,1,0,0,1,1] 13
 98  35 [0,0,1,0,0,0,1,1] 23
 99  67 [0,1,0,0,0,0,1,1] 43
100   3 [0,0,0,0,0,0,1,1]  3


CPU time 1519.74 seconds. Backtracks: 0
  """



  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/


import cp.
% import sat.


main => time2(go).


go =>
  foreach(N in 10..10..100) 
     time2(average_avoiding2(N, _X))
  end,
  nl.

% a more general approach
go1 =>
   % A = [1,2,5,9], % original example

   % From the comments.
   % A = [1,2,3,4,5,6,7,8,9],
   % A = [I : I in 1..30],
   % A = [2,3,4],
   % This is UNSAT according to this model.
   % A = [2,2,2,4,5,6,2,2,2,2],

   _ = random2(),
   A = [random() mod 10 : _I in 1..10],

   % N = A.length,
   time2(average_avoiding(A,_X)),

   %  All = findall(X, average_avoiding2(A,_X)),
   % writeln(all=All),
   % writeln(len=All.length),

   nl.


go2 => 
  time2(average_avoiding2(100, _X)),
  nl.


go3 => 
  % A valid solution for N=100. See comments above.
  L = [0,64,32,96,16,80,48,8,72,40,24,88,56,4,68,36,20,84,52,12,76,44,28,92,60,2,66,34,98,18,82,50,10,74,42,26,90,58,6,70,38,22,86,54,14,78,46,30,94,62,
       1,65,33,97,17,81,49,9,73,41,25,89,57,5,69,37,21,85,53,13,77,45,29,93,61,3,67,35,99,19,83,51,11,75,43,27,91,59,7,71,39,23,87,55,15,79,47,31,95,63],
  N = L.length,
  println(l=L),
  println(diffs=L.diff()),
 foreach(I in 1..N) 
    % printf("%3d (%2X) %3d %w %w %3X (mod 16: %2d) (div 16: %2d) (mod 8: %d) (mod 64: %2d)\n", I, I, L[I],pad(L[I].to_binary_string(),(2**nearest_two_pow(N)).to_binary_string().length,0), pad(L[I].to_oct_string(),(2**nearest_oct_pow(N)).to_binary_string().length,0),L[I], L[I] mod 16, L[I] div 16, L[I] mod 8, L[I] mod 64, AllMod)
    printf("%3d: %3d ", I, L[I]),
    foreach(J in 2..16) 
       printf("%2d ", L[I] mod J)
    end,
    nl
  end,

  nl.


go4 =>
  foreach(N in 10..10..100)
     println(n=N),
     A = 0..N-1,
     time2(average_avoiding(A, _X))
  end,
  nl.
  

%
% a general approach: A is any array of numbers
%
average_avoiding(A, X) =>

  println(a=A),
  N = length(A),

  X = new_list(N),
  X :: A,

  foreach(I in 1..N, J in I+1..N) 
     foreach(K in I+1..J-1) 
        2*X[K] #!= X[I] + X[J]
     end
  end,

  % ensure cardinality of each value
  foreach(E in A.remove_dups()) 
    C = [ 1 : I in 1..N,A[I] == E].sum(),
    count(E,X,#=,C)
  end,

  % symmetry breaking
  X[1] #= min(X),

  solve([ffd, split], X),

  writeln(x=X),
  writeln(diff=X.diff()),
  writeln(mod2=[E mod 2 : E in X]),
  nl.

 

%
% Average avoiding for 0..N-1.
%
average_avoiding2(N, X) =>
  println(n=N),

  A = [I : I in 0..N-1],
  X = new_list(N),
  X :: A,

  foreach(I in 1..N, J in I+1..N) 
     foreach(K in I+1..J-1) 
        % 2*X[K] #!= X[I] + X[J]
        X[K]+X[K] #!= X[I] + X[J]
     end
  end,


  all_distinct(X), % much faster
  % all_different(X),

  % testing: Works for even N
  N2 = N div 2,
  if N mod 2 == 0 then
    foreach(I in 1..N div 2) 
       X[I+N2] #= X[I]+1
    end,

    foreach(I in 1..N) 
       if I < N div 2 then
         X[I] mod 2 #= 0
       end,
       if I > N div 2 then
         X[I] mod 2 #= 1
       end
    end
  end,


  % Symmetry breaking
  X[1] #= 0,
  % X[N] #= 1,


  solve([ffc,split], X),
  % solve([constr,split], X),

  writeln(x=X),
  writeln(diff=X.diff()),
  foreach(I in 1..N) 
    printf("%3d %3d %w %2X\n", I, X[I],pad(X[I].to_binary_string(),(2**nearest_two_pow(N)).to_binary_string().length,0), X[I])
  end,

  nl.




diff(L) = [ D : I in 2..L.length, D #= L[I] - L[I-1]].
% diff(L) = [ L[I+1] - L[I] : I in 1..L.length-1].


pad(List, N, Value) = Res => 
   Res = List,
   Len = List.length,
   if N > Len then
      Res := [Value : _I in 1..N-Len] ++ List
   end.


nearest_two_pow(N) = Pow =>
  Pow := 0,
  foreach(I in 0..N, Pow = 0)
     if 2**I > N then
       Pow := I
     end
  end. 


nearest_oct_pow(N) = Pow =>
  Pow := 0,
  foreach(I in 0..N, Pow = 0)
     if 8**I > N then
       Pow := I
     end
  end. 


