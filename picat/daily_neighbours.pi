/* 

  Daily Neighbours in Picat.

  From Adrian Groza "Modelling Puzzles in First Order Logic"    
  """
  Puzzle 103. Daily neighbours

  Complete an n x n grid so that every row and column contains every number from
  [0..n-1] exactly once. You also have to satisfy the neighbour constraint ( ):
  1. A symbol between two cells means the numbers are consecutive.
  2. No symbol between cells means the numbers are not consecutive (Fig. 10.13).
  (taken from Kleber (2013))
  """

  The grid to be filled with 0..3 (marked by X or 0):

   0 - 1 - 2 - 3 
   . . | . | . . 
   3 - 2 - 1 - 0 
   | . | . | . | 
   2 - 3 . 0 - 1 
   | . . . . . | 
   1 - 0 . 3 - 2 

  - 0s: hints
  - '-' and '|' are the neighbour constraints that indicates
    that the two neighbours are consecutive.
  - X indicates that this is a slot to give a value (0..3)
  - '.': this cell should not be filled with any value
  

  This program was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

import util.
import cp.

main => go.

go =>
  puzzle(1,Size,Puzzle),
  N = Puzzle.len,
  X = new_array(N,N),
  X :: -1.. Size-1,

  Symbols = "-|.",
  foreach(I in 1..N, J in 1..N)
    if membchk(Puzzle[I,J],Symbols) then
      X[I,J] #= -1
    else
      if ascii_digit(Puzzle[I,J]) then
        X[I,J] #= Puzzle[I,J].to_int
      end
    end
  end,

  % Rows and -
  check(Puzzle,X,'-'),
  
  % Columns and |
  check(Puzzle.transpose,X.transpose,'|'),

  solve(X.vars),

  % Print the solution
  foreach(I in 1..N)
    foreach(J in 1..N)
      if not membchk(Puzzle[I,J],Symbols), X[I,J] >= 0 then
        print(X[I,J]), print(" ")
      else
         print(Puzzle[I,J]), print(" ")
      end
    end,
    nl
  end,
  nl,
  fail,

  nl.

%
% Ensure that all - and | constraints are satisfied.
%
check(Puzzle,X,Symbol) =>
  N = X.len,
  foreach(I in 1..N)
    % Only the odd numbered rows/cols contains variables
    % to be decided
    if I mod 2 == 1 then
      all_different_except_c([X[I,J] : J in 1..N],-1),
      foreach(J in 2..N-1,Puzzle[I,J] == Symbol, var(X[I,J-1]),var(X[I,J+1]))
        abs(X[I,J-1]-X[I,J+1]) #= 1
      end
    end
  end.


puzzle(1,Size,Puzzle) =>
  Size = 4,
  Puzzle =
"0-X-X-X
..|.|..
X-X-X-X
|.|.|.|
X-X.X-X
|.....|
X-0.X-X".split("\n").


all_different_except_c(Xs,C) =>
  foreach(I in 1..Xs.length, J in 1..I-1)
     (Xs[I] #!= C #/\ Xs[J] #!= C) #=> (Xs[I] #!= Xs[J])
   end.

