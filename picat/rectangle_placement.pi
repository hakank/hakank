/*

  Rectangle placement in Picat.

  This is model that place rectangular shapes in a grid of certain
  width and height.

  Compare with the CSPLib #9 for perfect square placement problem.
  https://www.csplib.org/Problems/prob009/
  This problem is implemented in 
  http://hakank.org/picat/perfect_square_placement.pi
  and is the basis of this model.

  The biggest difference between these two problems is that
  the perfect square problem ensures that there are no unoccupied
  places (holes) while the rectangular problem do not has this
  guarantee. Another difference is that widhth and height might
  differ.


  * go/0
  
  Here is a solution for the problem
    X = [1,2,3,4,5,6,7,8,9,10],
    Y = [1,2,3,4,5,6,7,8,9,10],
    Width = 21,
    Height = 21

  In the second presentation "a" means shape 1, "b" is shape 2, etc.
  "_" is an empty slot.

    [n = 10,width = 21,height = 21]
    x = [1,2,3,4,5,6,7,8,9,10]
    y = [1,2,3,4,5,6,7,8,9,10]
    startX = [20,11,2,11,17,16,9,1,13,1]
    startY = [21,13,1,8,7,1,1,4,12,12]
    _  _  _  8  8  8  8  8  8  8  8 10 10 10 10 10 10 10 10 10 10 
    3  3  3  8  8  8  8  8  8  8  8 10 10 10 10 10 10 10 10 10 10 
    3  3  3  8  8  8  8  8  8  8  8 10 10 10 10 10 10 10 10 10 10 
    3  3  3  8  8  8  8  8  8  8  8 10 10 10 10 10 10 10 10 10 10 
    _  _  _  8  8  8  8  8  8  8  8 10 10 10 10 10 10 10 10 10 10 
    _  _  _  8  8  8  8  8  8  8  8 10 10 10 10 10 10 10 10 10 10 
    _  _  _  8  8  8  8  8  8  8  8 10 10 10 10 10 10 10 10 10 10 
    _  _  _  8  8  8  8  8  8  8  8 10 10 10 10 10 10 10 10 10 10 
    7  7  7  7  7  7  7  _  _  _  _ 10 10 10 10 10 10 10 10 10 10 
    7  7  7  7  7  7  7  _  _  _  _ 10 10 10 10 10 10 10 10 10 10 
    7  7  7  7  7  7  7  4  4  4  4  _  2  2  _  _  _  _  _  _  _ 
    7  7  7  7  7  7  7  4  4  4  4  _  2  2  _  _  _  _  _  _  _ 
    7  7  7  7  7  7  7  4  4  4  4  9  9  9  9  9  9  9  9  9  _ 
    7  7  7  7  7  7  7  4  4  4  4  9  9  9  9  9  9  9  9  9  _ 
    7  7  7  7  7  7  7  _  _  _  _  9  9  9  9  9  9  9  9  9  _ 
    6  6  6  6  6  6  _  _  _  _  _  9  9  9  9  9  9  9  9  9  _ 
    6  6  6  6  6  6  5  5  5  5  5  9  9  9  9  9  9  9  9  9  _ 
    6  6  6  6  6  6  5  5  5  5  5  9  9  9  9  9  9  9  9  9  _ 
    6  6  6  6  6  6  5  5  5  5  5  9  9  9  9  9  9  9  9  9  _ 
    6  6  6  6  6  6  5  5  5  5  5  9  9  9  9  9  9  9  9  9  1 
    6  6  6  6  6  6  5  5  5  5  5  9  9  9  9  9  9  9  9  9  _ 

    ___HHHHHHHHJJJJJJJJJJ
    CCCHHHHHHHHJJJJJJJJJJ
    CCCHHHHHHHHJJJJJJJJJJ
    CCCHHHHHHHHJJJJJJJJJJ
    ___HHHHHHHHJJJJJJJJJJ
    ___HHHHHHHHJJJJJJJJJJ
    ___HHHHHHHHJJJJJJJJJJ
    ___HHHHHHHHJJJJJJJJJJ
    GGGGGGG____JJJJJJJJJJ
    GGGGGGG____JJJJJJJJJJ
    GGGGGGGDDDD_BB_______
    GGGGGGGDDDD_BB_______
    GGGGGGGDDDDIIIIIIIII_
    GGGGGGGDDDDIIIIIIIII_
    GGGGGGG____IIIIIIIII_
    FFFFFF_____IIIIIIIII_
    FFFFFFEEEEEIIIIIIIII_
    FFFFFFEEEEEIIIIIIIII_
    FFFFFFEEEEEIIIIIIIII_
    FFFFFFEEEEEIIIIIIIIIA
    FFFFFFEEEEEIIIIIIIII_

    num_empty = 56

    CPU time 0.289 seconds. Backtracks: 0


  * go2/0: MustTouch variant
  The model also has a variant which requires that all successive shape numbers 
  must "touch" either vertical, horizontal or by the diagonals. This is activated 
  by setting the MustTouch = true.

  Here is a solution for the same 1..10 problem with MustTouch = true:


    [n = 10,width = 21,height = 21]
    x = [1,2,3,4,5,6,7,8,9,10]
    y = [1,2,3,4,5,6,7,8,9,10]
    startX = [20,20,19,18,17,11,11,11,2,1]
    startY = [15,13,10,6,1,1,7,14,11,1]
    10 10 10 10 10 10 10 10 10 10  _  _  _  _  _  _  _  _  _  _  _ 
    10 10 10 10 10 10 10 10 10 10  9  9  9  9  9  9  9  9  9  _  _ 
    10 10 10 10 10 10 10 10 10 10  9  9  9  9  9  9  9  9  9  _  _ 
    10 10 10 10 10 10 10 10 10 10  9  9  9  9  9  9  9  9  9  _  _ 
    10 10 10 10 10 10 10 10 10 10  9  9  9  9  9  9  9  9  9  _  _ 
    10 10 10 10 10 10 10 10 10 10  9  9  9  9  9  9  9  9  9  _  _ 
    10 10 10 10 10 10 10 10 10 10  9  9  9  9  9  9  9  9  9  _  _ 
    10 10 10 10 10 10 10 10 10 10  9  9  9  9  9  9  9  9  9  _  _ 
    10 10 10 10 10 10 10 10 10 10  9  9  9  9  9  9  9  9  9  _  _ 
    10 10 10 10 10 10 10 10 10 10  9  9  9  9  9  9  9  9  9  _  _ 
    6  6  6  6  6  6  7  7  7  7  7  7  7  8  8  8  8  8  8  8  8 
    6  6  6  6  6  6  7  7  7  7  7  7  7  8  8  8  8  8  8  8  8 
    6  6  6  6  6  6  7  7  7  7  7  7  7  8  8  8  8  8  8  8  8 
    6  6  6  6  6  6  7  7  7  7  7  7  7  8  8  8  8  8  8  8  8 
    6  6  6  6  6  6  7  7  7  7  7  7  7  8  8  8  8  8  8  8  8 
    6  6  6  6  6  6  7  7  7  7  7  7  7  8  8  8  8  8  8  8  8 
    5  5  5  5  5  _  7  7  7  7  7  7  7  8  8  8  8  8  8  8  8 
    5  5  5  5  5  4  4  4  4  _  _  _  _  8  8  8  8  8  8  8  8 
    5  5  5  5  5  4  4  4  4  3  3  3  _  _  _  _  _  _  _  _  _ 
    5  5  5  5  5  4  4  4  4  3  3  3  2  2  1  _  _  _  _  _  _ 
    5  5  5  5  5  4  4  4  4  3  3  3  2  2  _  _  _  _  _  _  _ 
    JJJJJJJJJJ___________
    JJJJJJJJJJIIIIIIIII__
    JJJJJJJJJJIIIIIIIII__
    JJJJJJJJJJIIIIIIIII__
    JJJJJJJJJJIIIIIIIII__
    JJJJJJJJJJIIIIIIIII__
    JJJJJJJJJJIIIIIIIII__
    JJJJJJJJJJIIIIIIIII__
    JJJJJJJJJJIIIIIIIII__
    JJJJJJJJJJIIIIIIIII__
    FFFFFFGGGGGGGHHHHHHHH
    FFFFFFGGGGGGGHHHHHHHH
    FFFFFFGGGGGGGHHHHHHHH
    FFFFFFGGGGGGGHHHHHHHH
    FFFFFFGGGGGGGHHHHHHHH
    FFFFFFGGGGGGGHHHHHHHH
    EEEEE_GGGGGGGHHHHHHHH
    EEEEEDDDD____HHHHHHHH
    EEEEEDDDDCCC_________
    EEEEEDDDDCCCBBA______
    EEEEEDDDDCCCBB_______

    num_empty = 56

    CPU time 6.042 seconds. Backtracks: 0


  Model created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

import sat.
% import cp.

main => go.

%
% Show first solution.
%
go ?=>

   % Successive shape numbers must touch.
   % Slower and might not even give a solution.
   MustTouch = false,

   % The 1..10,1..10 problem
   % problem(6,X,Y,Width,Height),

   problem(7,X,Y,Width,Height),
   % problem(0,X,Y,Width,Height),

   time2(solve_and_print(X,Y,Width,Height,MustTouch)),
   
   flush(stdout),   
   % fail,
   
   nl.


%
% Show first solution for the MustTouch variant.
%
go2 ?=>

   % Successive shape numbers must touch.
   % Slower and might not even give a solution.
   MustTouch = false,

   % The 1..10,1..10 problem
   problem(6,X,Y,Width,Height),

   % problem(4,X,Y,Width,Height),

   time2(solve_and_print(X,Y,Width,Height,MustTouch)),
   
   flush(stdout),   
   % fail,
   
   nl.

go2 => true.

%
% Find all solutions to a problem,
%
% For small instances CP is faster than SAT to show all solutions.
%
go3 ?=>

   % Successive shape numbers must touch.
   % Slower and might not even give a solution.
   MustTouch = false,

   % Count the number of solutions
   Map = get_global_map(),
   Map.put(count,0),

   problem(3,X,Y,Width,Height),
   
   time2(solve_and_print(X,Y,Width,Height,MustTouch)),
   
   Map.put(count,Map.get(count)+1),
   println(count=Map.get(count)),
   
   flush(stdout),   
   fail,
   
   nl.

go3 => println(count=get_global_map().get(count)-1).


%
% Solve all instances (first solutions) for the problems defined below:
%   problem/5.
%
% Standard version                       Shapes
% Problem  Time to
%          first solution  CP solver
%          (SAT solver)    degree/split
% ----------------------------------------
%    1     0.005s           0.0s        X = [2, 2, 2, 2]             Y = [2, 2, 2, 2],
%    2     0.016s           0.007s      X = [2, 4, 2, 3, 3, 2, 2],   Y = [4, 2, 4, 6, 3, 2, 2],
%    3     0.088s           0.01s       X = [1,2,3,4,5,6,7,8,9,10],  Y = [5,3,3,2,2,2,2,2,1,1]
%    4     0.087s           0.001s      X = [1,2,3,4,5,6,7,8,9,10],  Y = [2,2,2,2,2,2,2,2,2,2], 
%    5     1.476s           0.001s      Problem #18 from CSPLib problem #9 
%    6     0.313s           0.001s      X = 1..10                    Y = 1..10
%    7     0.484s           0.002s      X = 1..11                    Y = 1..11
%    8     0.678s           0.002s      X = 1..12                    Y = 1..12
%    9     0.775s           0.718s      X = 1..15                    Y = 1..15
%   10     2.68s            -           X = 1..20                    Y = 1..20         
%   11     2.82s            -           X = 1..21                    Y = 1..21
%   12     9.207s           -           X = 1..22                    Y = 1..22
%   13     14.527s                      X = 1..23                    Y = 1..23
%   14     -                            X = 1..24                    Y = 1..24
% 
% For MustTouch = true: requires that all successive shape numbers must touch.
% Note that not all instances are possible. We skip the large instances.
%
% Touch version
% Problem  Time to
%          first solution
%          (SAT solver)
% ----------------------------------------
%    1     0.038s
%    2     0.585s (no solution)
%    3     0.806s (no solution)
%    4     2.01s
%    5     (skipped)
%    6     6.042s
%    7     25.674s
%    8     41.106s (no solution)
%
go4 ?=>

   MustTouch = false,

   % Problems = find_all(P,problem(P,_X,_Y,_Height,_Width)),
   % foreach(Problem in Problems, Problem != 5)
   %    println(problem=Problem),
   %    problem(Problem,X,Y,Width,Height),
   %    time2(solve_and_print(X,Y,Width,Height,MustTouch)),
   %    nl
   % end,
   member(Problem,14..14),
   Problem != 5,
   println(problem=Problem),
   problem(Problem,X,Y,Width,Height),
   time2(once(solve_and_print(X,Y,Width,Height,MustTouch))),

   flush(stdout),   
   fail,
   
   nl.

go4 => true.


%
% Playing with new instances
%
go5 ?=>
   nolog,
   MustTouch = false,

   N = 24,
   S = sum([I**2 : I in 1..N]),
   println([n=N,s=S]),
   % Find two possible factors to start the search.
   % Pick the two that has as small difference as
   % possible.
   factor_sum(S,A,B),
   println([a=A,b=B]),
   X = 1..N,
   Y = 1..N,
   % Let's now check through some possible sizes
   member(Width,A..B),
   member(Height,Width..B),
   S <= Width * Height,

   % time2(solve_and_print(X,Y,Width,Height,MustTouch)),
   time((
     rectangle_placement(X,Y,Width,Height,MustTouch, StartX,StartY) ->
        print_solution(X,Y,Width,Height, StartX,StartY)
     ; 
       fail
   )),
   
   flush(stdout),   
   % fail,
   
   nl.

go5 => true.


%
% Another take to find an optimal size:
% Create widths and heights for "all possible" sizes
% and try each in incremental order (sorted on size).
%
go6 ?=>
   nolog,
   MustTouch = false,

   N = 24,
   S = sum([I**2 : I in 1..N]),
   println([n=N,s=S]),
   % Find two possible factors to start the search.
   All = [[W*H,W,H] : W in 1..N*N,H in W..N*N, W*H >= S].sort,
   println(all=All),
   member([Size,Width,Height],All),
   println([width=Width,heigh=Height,size=Size]),      
   X = 1..N,
   Y = 1..N,
   
   % time2(solve_and_print(X,Y,Width,Height,MustTouch)),
   time((
     rectangle_placement(X,Y,Width,Height,MustTouch, StartX,StartY) ->
        print_solution(X,Y,Width,Height, StartX,StartY)
     ; 
       fail
   )),

   println("Found:"),
   println([width=Width,heigh=Height,size=Size]),   
   flush(stdout),   
   % fail,
   
   nl.

go6 => true.




%
% Testing the 1..25 instance from
% Richard E. Korf "Optimal Rectangle Packing: New Results"
% https://www.aaai.org/Papers/ICAPS/2004/ICAPS04-019.pdf
%
korftest ?=>

   MustTouch = false,

   korf(N,Width,Height),
   println([n=N,width=Width,height=Height]),
   X = 1..N,
   Y = 1..N,
   time2(once(solve_and_print(X,Y,Width,Height,MustTouch))),

   flush(stdout),   
   fail,
   
   nl.

korftest => true.


% Find two factors that multiplies to N
% and are as similar as possible.
factor_sum(N,A,B) =>
  A :: 1..N**2,
  B :: 1..N**2,
  A * B #= N,
  A #<= B,
  Diff #= abs(A-B),
  solve($[min,min(Diff),report(printf("Checking A:%d B:%d Diff: %d\n",Diff,A,B))],[A,B]).

 
%
% Solve the problem:
% Input:
%  - X,Y: the rectangle size in x and y positions
%  - Width, Height: the size of the main grid
%  - MustTouch: if true then require that two successive shape numbers
%    must touch (left, right, up, down, or by diagonals)
% Output:
% - StartX, StartY: the coordinates of the start positions
%
rectangle_placement(X,Y,Width,Height,MustTouch, StartX,StartY) =>

   N = length(X),
   println([n=N,width=Width,height=Height]),

   SumXY = sum([X[I]*Y[I] : I in 1..N]) ,
   println([sumXY=SumXY,'Width*Height'=(Width*Height)]),
   if SumXY > Width*Height then
     printf("Impossible problem: sum X and Y (%d) >  width*height (%d)\n",SumXY,Width*Height),
     fail
   end,

   StartX = new_list(N),
   StartX :: 1..Width,

   StartY = new_list(N),
   StartY :: 1..Height,

   % Experimental: Use also a matrix to assign the assignments of the
   %               slots to a shape, or 0 if unassigned.
   % Note: This take some time to set up and don't seems to speed
   %       up the solution.
   % 
   if MustTouch then
     % The assignments: 0 for unoccupied (empty) slot
     Mat = new_array(Width,Height),
     Mat :: 0..N,

     % Contains the places with empty slots
     Ts = new_array(Width,Height),
     Ts :: 0..1,

     %
     % Select the places for the shapes.
     %
     foreach(S in 1..N)
       foreach(I in 1..Width, J in 1..Height)
          (I #>=StartX[S] #/\ I #<=StartX[S]+X[S]-1
           #/\
           J #>= StartY[S] #/\ J #<= StartY[S]+Y[S]-1) #=> Mat[I,J] #= S
       end
     end,

     % Ensure that we don't have any spurious solutions,
     % Set 0 to all unoccupied slots (so we don't have any
     % spurious solutions).     
     foreach(I in 1..Width, J in 1..Height)
        Ts[I,J] #= sum([ I #>= StartX[S] #/\ I #<= StartX[S]+X[S]-1
                         #/\
                         J #>= StartY[S] #/\ J #<= StartY[S]+Y[S]-1 : S in 1..N]),
        Ts[I,J] #= 0 #<=> Mat[I,J] #= 0
     end,

     % This is the experimental part: successive shape id must touch
     foreach(S in 1..N-1)
        I1 :: 1..Width,
        J1 :: 1..Height,
        matrix_element(Mat,I1,J1,S),
        I2 :: 1..Width,
        J2 :: 1..Height,
        matrix_element(Mat,I2,J2,S+1),
        abs(I1-I2) #= 1 #/\ abs(J1-J2) #= 1
     end
     
   end, % end if MustTouch


   % CP seems to be faster with this, but SAT is slower
   if membchk(cp, loaded_modules()) then
     cumulative(StartX,X,Y,Height),
     cumulative(StartY,Y,X,Width)
   end,

   diffn4(StartX,StartY,X,Y),

   %% Tests (see below for implementations)
   % diffn_me(StartX,StartY,X,Y),
   % diffn_nonstrict(StartX,StartY,X,Y),     

   foreach(I in 1..N)
     StartX[I] + X[I] #=< Width+1
   end,
   foreach(J in 1..N)
     StartY[J] + Y[J] #=< Height+1
   end,

   if MustTouch then
     Vars = StartX ++ StartY ++ Mat.vars ++ Ts.vars
   else
     Vars = StartX ++ StartY
   end,

   println(solve),
   % println(vars=Vars),
   solve($[degree,split], Vars).
   % solve($[ff,split], Vars).   
   
   % For testing MustTouch
   % if MustTouch then
   %   println("Mat:"),
   %   foreach(Row in Mat)
   %     println(Row)
   %   end,
   %   println("Ts:"),
   %   foreach(Row in Ts)
   %     println(Row)
   %   end
   % end,
   % nl.

%
% Print solution (when MustTouch is false)
%
print_solution(X,Y,Width,Height,StartX,StartY) =>

   N = length(X), % number of rectangles
   println([n=N,width=Width,height=Height]),
   println(x=X),
   println(y=Y),
   println(startX=StartX),
   println(startY=StartY),
   
   % Print the grid
   M = new_array(Width,Height), % bind_vars(M,0),
   foreach(S in 1..N)
     % println([s=S,x=X[S]..X[S]+A[S]-1,y=Y[S]..Y[S]+A[S]-1]),
     foreach(I in StartX[S]..min(StartX[S]+X[S]-1,Width),J in StartY[S]..min(StartY[S]+Y[S]-1,Height))
       % Debugging: Check that we got a proper solution, i.e. that there is no
       % overlapping of values. 
       if nonvar(M[I,J]) then
          println([s=S,[I,J],already_defined,M[I,J]])
          % , halt
       end,
       M[I,J] = S
     end
   end,

   NumEmpty = 0,
   % Numeric solution
   foreach(I in 1..Width)
     foreach(J in 1..Height)
       V = M[I,J],
       if var(V) then
         print(" _ "),
         NumEmpty := NumEmpty + 1
       else
         printf("%2d ",M[I,J])
       end
     end,
     nl
   end,

   if N <= 26 then
     % _ is the unoccupied slots
     Alpha = "ABCDEFGHIJKLMNOPQRSTUVXYZ",
     foreach(I in 1..Width)
       foreach(J in 1..Height)
         V = M[I,J],
         if var(V) then
           print("_")
         else
           printf("%w",Alpha[M[I,J]])
         end
       end,
       nl
     end
   end,
   nl,
   println(num_empty=NumEmpty),
   nl.


solve_and_print(X,Y,Width,Height,MustTouch) =>
  rectangle_placement(X,Y,Width,Height,MustTouch, StartX,StartY),
  print_solution(X,Y,Width,Height, StartX,StartY).


% This is from fzn_picat_cp.pi
diffn4(VecX,VecY,VecDX,VecDY) =>
    Rects = [[VecX[I],VecY[I],VecDX[I],VecDY[I]] : I in 1 .. length(VecX)],
    diffn(Rects).


%
% From MiniZinc's diffn_nonstrict/4
%
diffn_nonstrict(X,Y,DX,DY) =>
  N = X.len,
  foreach(I in 1..N, J in I+1..N)
    DX[I] #= 0 #\/
    DX[J] #= 0 #\/
    DY[I] #= 0 #\/
    DY[J] #= 0 #\/
    X[I] + DX[I] #=< X[J] #\/
    Y[I] + DY[I] #=< Y[J] #\/
    X[J] + DX[J] #=< X[I] #\/
    Y[J] + DY[J] #=< Y[I]
  end.

/*
From MiniZinc's diffn/4
*/
diffn_me(X,Y,DX,DY) =>
  N = X.len,
  foreach(I in 1..N, J in I+1..N)
    X[I] + DX[I] #<= X[J] #\/
    Y[I] + DY[I] #<= Y[J] #\/
    X[J] + DX[J] #<= X[I] #\/
    Y[J] + DY[J] #<= Y[I]
  end.



%
% time2 + time_out as a function.
%
time2f(Goal,Timeout) = [End,Backtracks,Status] =>
    statistics(runtime,_),
    statistics(backtracks, Backtracks1),
    time_out(Goal,Timeout,Status),
    statistics(backtracks, Backtracks2),
    statistics(runtime, [_,End]),
    Backtracks = Backtracks2 - Backtracks1.


%
% Problem instances
%

% Test problems
problem(0,X,Y,Width,Height) :- 
   X = 1..4,
   Y = 1..4,
   Width = 5,   
   Height = 7.


% This is the problem from
% https://stackoverflow.com/questions/70483069/n-rectangles-inside-the-square-minizinc
% There's a lot of solutions: 2046600 solutions
problem(1,X,Y,Width,Height) :- 
   X = [2, 2, 2, 2],
   Y = [2, 2, 2, 2],
   Width = 8,   
   Height = 8.


% A slightly larger problem: 1680 solutions
problem(2,X,Y,Width,Height) :- 
   X = [2, 4, 2, 3, 3, 2, 2],
   Y = [4, 2, 4, 6, 3, 2, 2],
   Width = 8,
   Height = 8.


% 32 solutions
problem(3,X,Y,Width,Height) :- 
  X = [1,2,3,4,5,6,7,8,9,10],
  Y = [5,3,3,2,2,2,2,2,1,1], 
  Width = 10,
  Height = 10.


% 81344 solutions
problem(4,X,Y,Width,Height) :- 
   X = [1,2,3,4,5,6,7,8,9,10],
   Y = [2,2,2,2,2,2,2,2,2,2], 
   Width = 11,
   Height = 11.

% Problem #18 from CSPLib problem #9 (perfect square placement)
% 8 solutions.
% Use the SAT solver for this.
problem(5,X,Y,Width,Height) :-
  X = [1,3,4,9,10,11,12,16,17,18,22,23,24,40,41,60,66,68,70,71,74,76,79],
  Y = [1,3,4,9,10,11,12,16,17,18,22,23,24,40,41,60,66,68,70,71,74,76,79],   
  Width = 215,
  Height = 215.


%
% Here are some instances with has squares
% but with (random) holes in the grid.
%

% Time to first solution: 0.289s
problem(6,X,Y,Width,Height) :- 
   X = 1..10,
   Y = 1..10,
   Width = 21,
   Height = 21.

problem(7,X,Y,Width,Height) :- 
   X = 1..11,
   Y = 1..11,
   Width = 21,
   Height = 26.

problem(8,X,Y,Width,Height) :- 
   X = 1..12,
   Y = 1..12,
   Width = 24,
   Height = 29.


problem(9,X,Y,Width,Height) :- 
   X = 1..15,
   Y = 1..15,
   Width = 33,
   Height = 39.


problem(10,X,Y,Width,Height) :-
   X = 1..20,
   Y = 1..20,
   Width = 42,
   Height = 70.

% 2.704s
problem(11,X,Y,Width,Height) :-
   X = 1..21,
   Y = 1..21,
   Width = 44,
   Height = 77.

% 9.207s
problem(12,X,Y,Width,Height) :-
   X = 1..22,
   Y = 1..22,
   Width = 56,
   Height = 69.


% 
problem(13,X,Y,Width,Height) :-
   X = 1..23,
   Y = 1..23,
   Width = 48,
   Height = 92.

% 
problem(14,X,Y,Width,Height) :-
   X = 1..24,
   Y = 1..24,
   Width = 56,
   Height = 88.


% See https://sofdem.github.io/gccat/gccat/Ksmallest_rectangle_area.html
% 225.123s
problem(20,X,Y,Width,Height) :-
   X = 1..35,
   Y = 1..35,
   Width = 123,
   Height = 123.



% https://www.aaai.org/Papers/ICAPS/2004/ICAPS04-019.pdf
% problem(13,X,Y,Width,Height) :-
%    X = 1..24,
%    Y = 1..24,
%    Width = 70,
%    Height = 70.

% % See https://sofdem.github.io/gccat/gccat/Ksmallest_rectangle_area.html
% problem(20,X,Y,Width,Height) :-
%    X = 1..27,
%    Y = 1..27,
%    Width = 47,
%    Height = 148.



% These (optimal) widths and heights for 1..N packing  are from
% Richard E. Korf "Optimal Rectangle Packing: New Results"
% https://www.aaai.org/Papers/ICAPS/2004/ICAPS04-019.pdf

% korf(N,Width,Height).
korf(1,1,1).
korf(2,2,3).
korf(3,3,5).
korf(4,5,7).
korf(5,5,12).
korf(6,9,11).
korf(7,7,22). % yes, there are two solutions for 7x7!
korf(7,11,14). 
korf(8,14,15).
korf(9,15,20).
korf(10,15,27).
korf(11,19,27).
korf(12,23,29).
korf(13,22,38).
korf(14,23,45).
korf(15,23,55).
korf(16,27,56). % Two of 16x16
korf(16,28,54).
korf(17,39,46).
korf(18,31,69).
korf(19,47,53).
korf(20,34,85).
korf(21,38,85).
korf(22,39,98).
korf(23,64,68).
korf(24,56,88).
korf(25,43,129).



