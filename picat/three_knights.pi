/* 

  Three Knights in Picat.

  From https://en.wikibooks.org/wiki/Puzzles/Logic_puzzles/Three_Knights
  """
  A man was sentenced to death, but the king wanted to give him a last chance. 
  He asked the man to choose from one of the three knights that were there. 
  One of the knights was the Knight of Life, and he always told the truth. 
  The second Knight was the Knight of Death, and he always told lies. 
  The third knight was the Knight of the Dungeon. He sometimes lied and 
  sometimes told the truth. 

  If the man chose the Knight of Death, he would be executed before sunset. 
  If he chose the Knight of Life, he would be acquitted and set free right away. 
  If he chose the Knight of the Dungeon, he would spend the rest of his life 
  imprisoned in the Dungeon. The man was allowed to ask the three knights one 
  question each.

  Thus, he asked the fat knight, "What is the name of this tall knight?" 
  The reply was, "He is the Knight of Life." He asked the small knight, 
  "What is the name of this tall knight?" The reply was, "He is the Knight of Death." 
  Then he asked the tall knight, "Who are you?" "I am the Knight of the 
  Dungeon" was the reply. After that, the man was able to correctly choose 
  the Knight of Life, and was set free immediately.

  Who is the Knight of Life, and who are the other two knights?
  """

  Fat: KnightOfDungeon  Small: KnightOfLife  Tall: KnightOfDeath
  
  This program was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

import cp.

main => go.

go ?=>
  KnightOfDeath = 0, % always told lies
  KnightOfLife = 1, % always told the truth
  KnightOfDungeon = 2, % sometimes lied and sometimes told the truth

  % Sizes
  Size = [FatKnight,SmallKnight,TallKnight],
  Size :: [KnightOfLife,KnightOfDeath,KnightOfDungeon],
  SizeT = [FatKnightT,SmallKnightT,TallKnightT],  
  SizeT :: 0..1,

  
  % You know that one is a knight, one is a knave, and one is a spy.
  % all_different(Knights),
  all_different(Size),  

  % [H]e asked the fat knight, "What is the name of this tall knight?" 
  % The reply was, "He is the Knight of Life."
  FatKnightT #<=> TallKnight #= KnightOfLife,
  
  % He asked the small knight, "What is the name of this tall knight?"
  % The reply was, "He is the Knight of Death."
  SmallKnightT #<=> TallKnight #= KnightOfDeath,
  
  % Then he asked the tall knight, "Who are you?" "I am the Knight of the 
  % Dungeon" was the reply.
  TallKnightT #<=> TallKnight #= KnightOfDungeon,
  
  foreach(I in 1..3)
    SizeT[I] #= 1 #=> Size[I] :: [KnightOfLife,KnightOfDungeon],    
    SizeT[I] #= 0 #=> Size[I] :: [KnightOfDeath,KnightOfDungeon]
  end,

  Vars = Size ++ SizeT,
  solve(Vars),

  Map = new_map([0="KnightOfDeath",1="KnightOfLife",2="KnightOfDungeon"]),
  printf("Fat: %w  Small: %w  Tall: %w\n",Map.get(FatKnight), Map.get(SmallKnight),Map.get(TallKnight)),
  fail,
  
  nl.
go => true.
