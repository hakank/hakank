/* 

  Passengers in a railroad compartment puzzle in Picat.

  From Adrian Groza "Modelling Puzzles in First Order Logic"
  """
  Puzzle 60. Passengers in a railroad compartment

  Six passengers sharing a compartment are from Moscow, Leningrad, Tula, Kiev,
  Kharkov, Odessa.
  1. A and the man from Moscow are physicians.
  2. E and the Leningrader are teachers.
  3. The man from Tula and C are engineers.
  4. B and F are WWII veterans, but the man from Tula has never served in the army.
  5. The man from Kharkov is older than A.
  6. The man from Odessa is older than C.
  7. At Kiev, B and the man from Moscow got off.
  8. At Vinnitsa, C and the man from Kharkov got off.
  Match initials, professions, and cities. Also, are these facts both sufficient and neces-
  sary to solve the problem? (puzzle 256 from Kordemsky (1992))
  """

  Unique solution:
  A Odessa Physician
  B Leningrad Teacher
  C Kiev Engineer
  D Tula Engineer
  E Kharkov Teacher
  F Moscow Physician


  After hint 7 almost everything is solved:
  after_hint7 = [1,2,3,4,5,6,6,2,4,_02bf8::[1,3,5],_02c48::[3,5],_02c98::[1,5],1,0,0,0,0,1,0,1,0,0,1,0,0,0,1,1,0,0]

  And after hint 8 everything is solved so solve/1 is not needed.


  Note: There's a typo in Groza: This is puzzle number 265 from Kordemsky (not 256).

  This program was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

import util.
import cp.

main => go.

go ?=>
  N = 6,

  Initials = [A,B,C,D,E,F],
  Initials = 1..N,
  InitialsS = ['A','B','C','D','E','F'],
  all_different(Initials),

  Cities = [Moscow, Leningrad, Tula, Kiev,Kharkov, Odessa],
  Cities :: 1..N,
  CitiesS = ['Moscow', 'Leningrad', 'Tula', 'Kiev','Kharkov', 'Odessa'],  
  all_different(Cities),

  % The professions are not unique.
  % Professions = [Physician,Teacher,Engineer],
  % (Veteran does not count as a profession.)
  Physician = new_list(N),
  Physician :: 0..1,

  Teacher = new_list(N),
  Teacher :: 0..1,

  Engineer = new_list(N),
  Engineer :: 0..1,

  Vars = Initials ++ Cities ++ Physician ++ Teacher ++ Engineer,

  % Assumption: Each person has exactly one job.
  foreach(I in 1..N)
    sum([Physician[I],Teacher[I],Engineer[I]]) #= 1    
  end,

  % 1. A and the man from Moscow are physicians.
  % element(A,Physician,1),
  Physician[A] #= 1,
  element(Moscow,Physician,1),
  A #!= Moscow,

  % println(after_hint1=Vars),

  % 2. E and the Leningrader are teachers.
  % element(E,Teacher,1),
  Teacher[E] #= 1,
  element(Leningrad,Teacher,1),
  E #!= Leningrad,

  % println(after_hint2=Vars),
  
  % 3. The man from Tula and C are engineers.
  % element(C,Engineer,1),
  Engineer[C] #= 1,
  element(Tula,Engineer,1),
  C #!= Tula,

  % println(after_hint3=Vars),
  
  % 4. B and F are WWII veterans, but the man from Tula has never served in the army.
  Tula #!= B,
  Tula #!= F,

  % println(after_hint4=Vars),
  
  % 5. The man from Kharkov is older than A.
  Kharkov #!= A,

  % println(after_hint5=Vars),
  
  % 6. The man from Odessa is older than C.
  Odessa #!= C,
  println(after_hint6=Vars),  
  
  % 7. At Kiev, B and the man from Moscow got off.
  B #!= Moscow,
  println(after_hint7=Vars),
  
  % 8. At Vinnitsa, C and the man from Kharkov got off.
  C #!= Kharkov,
  println(after_hint8=Vars),  


  % Solve is not needed for this
  solve(Vars),

  nl,
  foreach(I in 1..N)
    nth(City,Cities,I),
    P = Physician[I],
    T = Teacher[I],
    Eng = Engineer[I],
    Profession = cond(P== 1,"Physician",
                      cond(T == 1,"Teacher","Engineer")),
    printf("%w %w %w\n",InitialsS[I],CitiesS[City],Profession)
  end,  
  nl,

  fail,

  nl.
go => true.


/*
  Test all combinations of the hints (at least >= 6 hints).

  Here are all combinations of hints that yield <= 2 solutions.
  The only combination of hints that giva a single unique solution,
  is the one with all 8 hints. The other combinations give the
  two solutions: the correct solution one and an also and
  incorrect solution.

hints = [1,2,3,4,6,7,8]

A Kharkov Physician
B Leningrad Teacher
C Kiev Engineer
D Tula Engineer
E Odessa Teacher
F Moscow Physician


A Odessa Physician
B Leningrad Teacher
C Kiev Engineer
D Tula Engineer
E Kharkov Teacher
F Moscow Physician

hints = [1,2,3,4,5,7,8]

A Kiev Physician
B Leningrad Teacher
C Odessa Engineer
D Tula Engineer
E Kharkov Teacher
F Moscow Physician


A Odessa Physician
B Leningrad Teacher
C Kiev Engineer
D Tula Engineer
E Kharkov Teacher
F Moscow Physician

hints = [1,2,3,4,5,6,8]

A Odessa Physician
B Moscow Physician
C Kiev Engineer
D Tula Engineer
E Kharkov Teacher
F Leningrad Teacher


A Odessa Physician
B Leningrad Teacher
C Kiev Engineer
D Tula Engineer
E Kharkov Teacher
F Moscow Physician

hints = [1,2,3,4,5,6,7,8]

A Odessa Physician
B Leningrad Teacher
C Kiev Engineer
D Tula Engineer
E Kharkov Teacher
F Moscow Physician

  Here are the hints (length >= 6) and the number of solutions,
  ordered by the number of solutions:
[[1,2,3,4,5,6,7,8] = 1,[1,2,3,4,5,6,8] = 2,[1,2,3,4,5,7,8] = 2,[1,2,3,4,6,7,8] = 2,[1,2,3,4,5,6,7] = 3,[1,2,3,4,5,7] = 4,[1,2,3,4,5,8] = 4,[1,2,3,4,6,7] = 4,[1,2,3,4,6,8] = 4,[1,2,3,4,7,8] = 4,[1,2,3,5,6,7,8] = 4,[1,2,3,4,5,6] = 6,[1,2,3,5,6,8] = 6,[1,2,3,5,7,8] = 8,[1,2,3,6,7,8] = 8,[1,2,3,5,6,7] = 12,[1,3,4,5,6,7,8] = 288,[1,3,4,5,6,8] = 432,[1,3,4,5,7,8] = 432,[1,3,4,6,7,8] = 432,[1,3,4,5,6,7] = 504,[2,3,4,5,6,7,8] = 513,[2,3,4,5,6,8] = 576,[2,3,4,6,7,8] = 576,[1,3,5,6,7,8] = 648,[2,3,4,5,7,8] = 738,[2,3,4,5,6,7] = 765,[1,2,4,5,6,7,8] = 819,[1,2,4,5,7,8] = 936,[1,2,4,5,6,7] = 981,[2,3,5,6,7,8] = 990,[1,2,4,5,6,8] = 1080,[1,2,4,6,7,8] = 1080,[1,2,5,6,7,8] = 1098,[3,4,5,6,7,8] = 12312,[1,4,5,6,7,8] = 14742,[2,4,5,6,7,8] = 16119]

*/
go2 ?=>
  garbage_collect(400_000_000),
  Map = new_map(),
  foreach(Hints in power_set(1..8),Hints != [],Hints.len >= 6)
    Len = puzzle(Hints,false),
    println(Hints=Len),
    Map.put(Hints,Len),    
    if Len <= 2 then
      println(hints=Hints),
      _ = findall(_,_=puzzle(Hints,true))
    end
  end,
  println(Map.to_list.sort(2)),
  nl.

puzzle(Hints,Print) = Ss => 
  N = 6,
  Initials = [A,B,C,D,E,F],
  Initials = 1..N,
  InitialsS = ['A','B','C','D','E','F'],
  all_different(Initials),

  Cities = [Moscow, Leningrad, Tula, Kiev,Kharkov, Odessa],
  Cities :: 1..N,
  CitiesS = ['Moscow', 'Leningrad', 'Tula', 'Kiev','Kharkov', 'Odessa'],  
  all_different(Cities),

  % The professions are not unique.
  % Professions = [Physician,Teacher,Engineer],
  % (Veteran does not count as a profession.)
  Physician = new_list(N),
  Physician :: 0..1,

  Teacher = new_list(N),
  Teacher :: 0..1,

  Engineer = new_list(N),
  Engineer :: 0..1,

  Vars = Initials ++ Cities ++ Physician ++ Teacher ++ Engineer,

  % Assumption: Each person has exactly one job.
  foreach(I in 1..N)
    sum([Physician[I],Teacher[I],Engineer[I]]) #= 1    
  end,

  % 1. A and the man from Moscow are physicians.
  if membchk(1,Hints) then 
    Physician[A] #= 1,
    element(Moscow,Physician,1),
    A #!= Moscow
  end,

  % 2. E and the Leningrader are teachers.
  % element(E,Teacher,1),
  if membchk(2,Hints) then
    Teacher[E] #= 1,
    element(Leningrad,Teacher,1),
    E #!= Leningrad
  end,
  
  % 3. The man from Tula and C are engineers.
  if membchk(3,Hints) then  
    Engineer[C] #= 1,
    element(Tula,Engineer,1),
    C #!= Tula
  end,
  
  % 4. B and F are WWII veterans, but the man from Tula has never served in the army.
  if membchk(4,Hints) then
    Tula #!= B,
    Tula #!= F
  end,
  
  % 5. The man from Kharkov is older than A.
  if membchk(5,Hints) then  
    Kharkov #!= A
  end,
 
  % 6. The man from Odessa is older than C.
  if membchk(6,Hints) then
    Odessa #!= C
  end,
  
  % 7. At Kiev, B and the man from Moscow got off.
  if membchk(7,Hints) then
    B #!= Moscow
  end,
  
  % 8. At Vinnitsa, C and the man from Kharkov got off.
  if membchk(8,Hints) then
    C #!= Kharkov
  end,

  if Print then
    solve(Vars),
    nl,
    foreach(I in 1..N)
      nth(City,Cities,I),
      P = Physician[I],
      T = Teacher[I],
      Eng = Engineer[I],
      Profession = cond(P== 1,"Physician",
                        cond(T == 1,"Teacher","Engineer")),
      printf("%w %w %w\n",InitialsS[I],CitiesS[City],Profession)
    end,
    nl
  else
    Ss = solve_all(Vars).len
  end.


