/* 

  Finite state in Picat.

  From the Prolog code 
  http://rosettacode.org/wiki/Finite_state_machine
  """
  Finite state machine
  A Finite state machine (FSM) is computational abstraction which maps a finite number of 
  states to other states within the same set, via transitions. An FSM can only be in one state 
  at any given moment. Transitions can either be explicit or implicit; explicit transitions are 
  triggered by an input signal and implicit transitions by the internal state of the system 
  (that is, the current state). Implicit transitions thus represent "automatic" or sequenced 
  states that are generally processed between explicit transitions (although they can also be 
  used to provide an optional path when no valid transition exists for a given input signal).

  Example
  Consider the model of a simple vending machine. The machine is initially in the "ready" state, 
  which maps to exactly two states in the following way:

    ready -> deposit -> waiting
    ready -> quit -> exit

  The variables in bold-face represent transitions. Any input signal not corresponding to one 
  of those transitions can either trigger an error or be ignored. Otherwise, the current state 
  is updated and the process is repeated. If, for example, a deposit input signal is encountered, 
  the FSM will move to the "waiting" state, which defines these transitions:

    waiting -> select -> dispense
    waiting -> refund -> refunding

  The "dispense" state defines only one transition:

    dispense -> remove -> ready

  Note, however, that in this example the "refunding" state doesn't actually require input in 
  order to move to the "ready" state, so an implicit transition is defined as such:

    refunding -> ready

  Task
  Implement a finite state machine which handles both explicit and implicit transitions. 
  Then demonstrate an example which models some real-world process.
  """

  This model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

import v3_utils.

main => go.

go ?=>
  act,
  
  nl.


go => true.

state(ready, deposit, waiting).
state(ready, quit, exit).
state(waiting, select, dispense).
state(waiting, refund, refunding).
state(dispense, remove, ready).
 
message(ready, 'Please deposit coins.\n').
message(waiting, 'Please select an item, or refund coins.\n').
message(dispense, 'Please remove your item.\n').
message(refunding, 'Coins have been refunded\n').
 
act :- act(ready).
 
act(exit).
act(refunding) :-
	print_message(refunding),
	act(ready).
act(State) :-
	dif(State, exit),
	print_message(State),
        Action = read_term(),
	state(State, Action, NextState),
	act(NextState).
 
print_message(State) :-	message(State, Message), print(Message).

/*
Output:
2 ?- act.
Please deposit coins.
|: deposit.
Please select an item, or refund coins.
|: select.
Please remove your item.
|: remove.
Please deposit coins.
|: deposit.
Please select an item, or refund coins.
|: refund.
Coins have been refunded
Please deposit coins.
|: quit.

true .
*/