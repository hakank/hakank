/*
  X^2
 
  [program = x * x,res = 4,count = 889]
  [program = (x + -0.0) * x,res = 4.0,count = 9]
  [program = x * x - -0.0,res = 4.0,count = 7]
  [program = x * x + -0.0,res = 4.0,count = 7]
  [program = x * x * 1.0,res = 3.999999999999999,count = 6]
  [program = x * (x + -0.0),res = 4.0,count = 6]
  [program = x * (x / 1.0),res = 4.000000000000001,count = 5]
  [program = x * x + (x - x),res = 4,count = 4]
  [program = -0.0 + x * x,res = 4.0,count = 4]
  [program = x * (x * 1.0),res = 3.999999999999999,count = 4]
  [program = 1.0 * (x * x),res = 3.999999999999999,count = 4]
  [program = -0.4 + x * x - -0.4,res = 4.0,count = 3]
  [program = x * x - (x - x),res = 4,count = 3]
  [program = x * x - -0.0 * 0.2,res = 4.0,count = 3]
  [program = x * x - -0.3 + -0.6 + 0.3,res = 4.0,count = 3]
  [program = x / 1.0 * x,res = 4.000000000000001,count = 3]
  [program = (x - (0.8 + -0.8)) * x,res = 4.0,count = 3]
  [program = x * (x - x + x),res = 4,count = 3]
  [program = x * x / 1.0,res = 4.000000000000001,count = 2]
  [program = x * (x - -1) - x,res = 4,count = 2]
  [program = -0.0 / 0.3 + x * x,res = 4.0,count = 2]
  [program = x + (x * (x - -0.0) - x),res = 4.0,count = 2]
  [program = x / (-0.6 / (0.4 + -1)) * x,res = 4.0,count = 2]
  [program = (x - -0.0) * x,res = 4.0,count = 2]
  [program = (x - x + x) * x,res = 4,count = 2]
  [program = (x + -0.0 * x) * x,res = 4.0,count = 2]
  [program = (-0.0 + x) * (-0.0 + x),res = 3.999999999999999,count = 2]
  [program = 1.0 * x * x,res = 3.999999999999999,count = 2]
  [program = x * (x - (0.8 + -0.8)),res = 4.0,count = 2]
  [program = x * (-0.0 + x),res = 4.0,count = 2]
  [program = x * (1.0 * x),res = 3.999999999999999,count = 2]
  [program = 0.5 * ((x + x) * x),res = 3.999999999999999,count = 2]
  [program = 0.4 * (x - x) / ((x / (0.9 + (x - -0.1)) + x) * (x / 0.3 - x + -0.3) - (0.8 - 0.1 + 0.6) + x - -0.5) - x * (x - x - x),res = 4.0,count = 1]
  [program = x * x + x + (x - x) - x,res = 4,count = 1]
  [program = (x - (x - -0.5) * (-0.7 * (x - x))) * x - -0.0,res = 4.0,count = 1]
  [program = x * x - -0.0 / 1.0,res = 4.0,count = 1]
  [program = x * x - (-0.5 * -0.5 + -0.0) * (x - x),res = 4.0,count = 1]
  [program = x - (x - x * x),res = 4,count = 1]
  [program = -0.0 / (-0.5 - x / (x - -0.8)) + x * x,res = 4.0,count = 1]
  [program = x * (x - -0.0) - x + x,res = 4.0,count = 1]
  [program = x * x - x + x,res = 4,count = 1]
  [program = (-1 + x) * x + x,res = 4,count = 1]
  [program = x * x + (0.2 + -0.2) / -0.3,res = 4.000000000000001,count = 1]
  [program = x * x + -0.0 * 0.2,res = 4.0,count = 1]
  [program = -0.0 * 0.8 + x * x,res = 4.0,count = 1]
  [program = -0.0 * 0.2 + x * x,res = 4.0,count = 1]
  [program = x + (x * x - x),res = 4,count = 1]
  [program = 0.3 + (x * x - -0.3 + -0.6),res = 4.0,count = 1]
  [program = (-0.1 + x - -0.1) * x,res = 4.0,count = 1]
  [program = (-0.0 / 0.4 + x) * x,res = 3.999999999999999,count = 1]
  [program = (x + -0.0) * (x + -0.0),res = 3.999999999999999,count = 1]
  [program = (-0.0 + x) * x,res = 4.0,count = 1]
  [program = (0.6 - -0.4) * x * x,res = 4.0,count = 1]
  [program = x * x * (0.9 - -0.1),res = 4.0,count = 1]
  [program = 0.5 * (x + x) * x,res = 3.999999999999999,count = 1]
  [program = 0.3 * x * (x / 0.3),res = 4.0,count = 1]
  [program = x * (x / (1.0 - (x - x))),res = 4.000000000000001,count = 1]
  [program = x * (x - (x - x)),res = 4,count = 1]
  [program = x * (x - -0.0),res = 4.0,count = 1]
  [program = x * (-0.0 * x + x),res = 4.0,count = 1]
  [program = x * (x + -0.0 * x / 0.9),res = 4.0,count = 1]
  [program = x * (x + (0.9 + x) * -0.0),res = 3.999999999999999,count = 1]
  [program = -1 * (x * (x - x - x)),res = 4,count = 1]

  resultMap = [4.0 = 24,4 = 13,3.999999999999999 = 11,4.0 = 10,4.000000000000001 = 5]


  From 
  ftp://ftp.cs.bham.ac.uk/pub/authors/W.B.Langdon/gp-code/simple/x2.in

  Cf x2.conf

*/
import util.
data(sorted,Data,Vars,Unknown,Ops,Constants,MaxSize,Params) :-
  Data = [ [[X],Y] : [X,Y] in chunks_of([
1.0, 1.0,
0.75,0.5625,
0.5,0.25,
0.25,0.0625,
0,0,
-0.25,0.0625,
-0.5,0.25,
-0.75,0.5625,
-1.0,1.0  
  ],2)],
  Vars = ['x'],
  Unknown = [2],
  Constants = -1..0.1..1,
  Ops = [+,-,*,/],
  MaxSize = 61,
  Params = new_map([approx=0.011,
                    init_size=100,
                    stop_criteria=generation,
                    num_gens=1000
                   ]).
