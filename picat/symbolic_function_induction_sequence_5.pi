
/* 
   http://answers.yahoo.com/question/index?qid=20090822191824AArEhO6
   1/1 3/2 7/5 17/12 41/29,?
   1., 1.500000000, 1.400000000, 1.416666667, 1.413793103,?

   It's related to continued fractions of sqrt(2).
   See  OEIS sequence https://oeis.org/A000129
   """
   Also denominators of continued fraction convergents to sqrt(2): 1, 3/2, 7/5, 17/12, 41/29, 99/70, 239/169, 577/408, 1393/985, 3363/2378, 8119/5741, 19601/13860, 47321/33461, 114243/80782,
   """
  
   The next value should be 99/70 = 1.41428571428571428571

   Kindof:
   code = (10 / 7) = [[[1.0],1.5],[[1.5],1.4],[[1.4],1.416666666666667],[[1.416666666666667],1.413793103448276]] = [[1.413793103448276] = 1.428571428571429]
   ...
   code = (99 / 69) = [[[1.0],1.5],[[1.5],1.4],[[1.4],1.416666666666667],[[1.416666666666667],1.413793103448276]] = [[1.413793103448276] = 1.434782608695652]
   code = (100 / 69) = [[[1.0],1.5],[[1.5],1.4],[[1.4],1.416666666666667],[[1.416666666666667],1.413793103448276]] = [[1.413793103448276] = 1.449275362318841]
   code = (99 / 70) = [[[1.0],1.5],[[1.5],1.4],[[1.4],1.416666666666667],[[1.416666666666667],1.413793103448276]] = [[1.413793103448276] = 1.414285714285714]
   code = (100 / 70) = [[[1.0],1.5],[[1.5],1.4],[[1.4],1.416666666666667],[[1.416666666666667],1.413793103448276]] = [[1.413793103448276] = 1.428571428571429]


   However, if we add sqrt as an allowed function, it's easier (but probably 
   considered cheating):
   code = sqrt(2) = [[[1.0],1.5],[[1.5],1.4],[[1.4],1.416666666666667],[[1.416666666666667],1.413793103448276]] = [[1.413793103448276] = 1.414213562373095]

   I consider this partly solved...

*/
data(sequence_5,Data,Vars,Unknown,Ops,Constants,MaxC) :-
  make_seq([1/1, 3/2, 7/5, 17/12, 41/29],1,Data,Unknown,Vars),  
  println(data=Data),
  println(unknown=Unknown),
  println(vars=Vars),
  get_global_map().put("use_approx",0.1),  
  Ops = new_map([infix=["+","-","*","/"]
                 % , op1=["sqrt"]
                 ]),
  Constants = 1..100,
  MaxC = 3.

