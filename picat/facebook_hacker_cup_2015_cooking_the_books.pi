/* 

  Cooking the Books - Facebook Hacker Cup 2015 Qualification Round in Picat.

  """
  Every business can make use of a good accountant and, if they're not big on 
  following the law, sometimes a bad one. Bad accountants try to make more money 
  for their employers by fudging numbers without getting caught.

  Sometimes a bad accountant wants to make a number larger, and sometimes smaller. 
  It is widely known that tax auditors will fail to notice two digits being 
  swapped in any given number, but any discrepancy more egregious will certainly 
  be caught. It's also painfully obvious when a number has fewer digits than 
  it ought to, so a bad accountant will never swap the first digit of a number with a 0.

  Given a number, how small or large can it be made without being found out?

  Input

  Input begins with an integer T, the number of numbers that need tweaking. 
  Each of the next T lines contains a integer N.

  Output

  For the ith number, print a line containing "Case #i: " followed by the smallest 
  and largest numbers that can be made from the original number N, using at most 
  a single swap and following the rules above.

  Constraints

  1 <= T <= 100
  0 <= N <= 999999999
  N will never begin with a leading 0 unless N = 0
  """

  Note: this is the adjusted (and correct) program after missing an 
  important thing.
  

  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/


import util.

main => go.

go =>
  % File = "facebook_hacker_cup_2015_cooking_the_books.txt",
  % File = "cooking_the_books.txt",
  % Facebooks final test
  % See https://www.facebook.com/notes/facebook-hacker-cup/hacker-cup-2015-qualification-round-solutions/1043281905687710
  % This program give the correct solution (modulo line breaks).
  File = "facebook_hacker_cup_2015_cooking_the_books_final.txt",
  Data = read_file_lines(File),
  Ns = [Data[J] : J in 2..Data.length],
  foreach({L,T} in zip(Ns,1..Data[1].to_integer()))
    Swaps = [S.parse_term() : S in swap2(L)],
    printf("Case #%d: %w %w\n", T, min(Swaps), max(Swaps))
  end.


swap(L) = Swaps =>
  N = L.length,
  Swaps = [L],
  foreach(I in 1..N, J in I+1..N)
    L2 = copy_term(L),
    L2[I] := L[J],
    L2[J] := L[I],
    if L2[1] != '0' then
      Swaps := Swaps ++ [L2]
    end
  end.


% Variant: This function works as well.
swap2(L) = 
  [L] ++ [L2 :  N = L.length, I in 1..N, J in I+1..N,
          L2 = copy_term(L), L2[I] := L[J], L2[J] := L[I], L2[1] != '0'].


% The submitted - and not accepted - version had problem with this requirement:
% "...so a bad accountant will never swap the first digit of a number with a 0."
swap_bad(L) = Swaps =>
  N = L.length,
  Swaps = [L],
  foreach(I in 1..N, J in I+1..N)
    L2 = copy_term(L),
    % This is wrong!
    if L[J] != '0' then 
      L2[I] := L[J],
      L2[J] := L[I],
      Swaps := Swaps ++ [L2]
    end
  end.
