#=

    This is a port of the SPPL model poisson_mean_inference.pynb

    Here is the PDF of Y = 0..20 (exact probabilities) from the SPPL model:
    (0, 0.19572329209779615),
    (1, 0.24541518485806976),
    (2, 0.15633363576277434),
    (3, 0.07275764007128807),
    (4, 0.03749784880330323),
    (5, 0.03225414602603766),
    (6, 0.036272539178041456),
    (7, 0.03919655164760693),
    (8, 0.03782130413444809),
    (9, 0.032547494609049904),
    (10, 0.025221805385485633),
    (11, 0.017769927037907036),
    (12, 0.011477227802063514),
    (13, 0.006844292955361095),
    (14, 0.00379364785941744),
    (15, 0.0019704640279916506),
    (16, 0.000975431521715664),
    (17, 0.0004844975064651556),
    (18, 0.0002799391781190319),
    (19, 0.00023526933546341676)
    (20, 0.0002864142016352986)


    This Turing.jl model:

    Summary Statistics
    parameters      mean       std   naive_se      mcse         ess      rhat   ess_per_sec 
        Symbol   Float64   Float64    Float64   Float64     Float64   Float64       Float64 

            X    0.0256    1.0030     0.0100    0.0124   6401.6166    0.9999     2199.1125
            Y    4.2629    7.6756     0.0768    0.0975   6534.2074    1.0000     2244.6607

    Quantiles
    parameters      2.5%     25.0%     50.0%     75.0%     97.5% 
        Symbol   Float64   Float64   Float64   Float64   Float64 

            X   -1.9514   -0.6385    0.0195    0.7112    2.0227
            Y    0.0000    1.0000    2.0000    4.0000   26.0000

    Distributions of variable Y:
    1.00000 =>    2448  (0.244800)
    0.00000 =>    1827  (0.182700)
    2.00000 =>    1776  (0.177600)
    3.00000 =>     987  (0.098700)
    4.00000 =>     614  (0.061400)
    5.00000 =>     382  (0.038200)
    6.00000 =>     287  (0.028700)
    7.00000 =>     237  (0.023700)
    8.00000 =>     192  (0.019200)
    9.00000 =>     145  (0.014500)
    11.00000 =>     113  (0.011300)
    10.00000 =>     106  (0.010600)
    13.00000 =>      94  (0.009400)
    12.00000 =>      80  (0.008000)
    14.00000 =>      75  (0.007500)
    15.00000 =>      59  (0.005900)
    16.00000 =>      55  (0.005500)
    20.00000 =>      55  (0.005500)
    17.00000 =>      42  (0.004200)
    18.00000 =>      36  (0.003600)
    24.00000 =>      30  (0.003000)
    21.00000 =>      27  (0.002700)
    23.00000 =>      25  (0.002500)
    19.00000 =>      23  (0.002300)
    26.00000 =>      21  (0.002100)
    27.00000 =>      19  (0.001900)
    25.00000 =>      15  (0.001500)
    22.00000 =>      15  (0.001500)
    30.00000 =>      13  (0.001300)
    34.00000 =>      13  (0.001300)
    36.00000 =>      12  (0.001200)
    32.00000 =>      11  (0.001100)
    28.00000 =>      11  (0.001100)
    29.00000 =>      11  (0.001100)
    46.00000 =>      10  (0.001000)
    52.00000 =>       9  (0.000900)
    31.00000 =>       9  (0.000900)
    35.00000 =>       8  (0.000800)
    39.00000 =>       8  (0.000800)
    33.00000 =>       8  (0.000800)
    40.00000 =>       8  (0.000800)
    38.00000 =>       7  (0.000700)
    37.00000 =>       7  (0.000700)
    42.00000 =>       6  (0.000600)
    57.00000 =>       5  (0.000500)
    64.00000 =>       4  (0.000400)
    49.00000 =>       4  (0.000400)
    47.00000 =>       4  (0.000400)
    60.00000 =>       3  (0.000300)
    45.00000 =>       3  (0.000300)
    41.00000 =>       3  (0.000300)
    61.00000 =>       3  (0.000300)
    53.00000 =>       3  (0.000300)
    48.00000 =>       3  (0.000300)
    56.00000 =>       2  (0.000200)
    55.00000 =>       2  (0.000200)
    110.00000 =>       2  (0.000200)
    67.00000 =>       2  (0.000200)
    73.00000 =>       2  (0.000200)
    43.00000 =>       2  (0.000200)
    50.00000 =>       2  (0.000200)
    51.00000 =>       2  (0.000200)
    139.00000 =>       1  (0.000100)
    63.00000 =>       1  (0.000100)
    54.00000 =>       1  (0.000100)
    58.00000 =>       1  (0.000100)
    69.00000 =>       1  (0.000100)
    95.00000 =>       1  (0.000100)
    66.00000 =>       1  (0.000100)
    93.00000 =>       1  (0.000100)
    44.00000 =>       1  (0.000100)
    70.00000 =>       1  (0.000100)
    80.00000 =>       1  (0.000100)
    65.00000 =>       1  (0.000100)
    97.00000 =>       1  (0.000100)

=#

using Turing, StatsPlots, Distributions, StatsBase
using CSV
include("jl_utils.jl")

@model function poisson_mean_inference(n=20) 
    X ~ truncated(Normal(),-4, 4)
    Y ~ Poisson(1+2*abs(X^3))
    return Y
end 

n=20
model = poisson_mean_inference(n)

# chns = sample(model, Prior(), 10_000)
# chns = sample(model, MH(), 10_000)
chns = sample(model, PG(5), 10_000)
# chns = sample(model, SMC(), 10_000)
# chns = sample(model, IS(), 10_000)

# chns = sample(model, HMC(0.1,6), 1_000)
# chns = sample(model, NUTS(), 1_000)

display(chns)
# display(plot(chns))

show_var_dist_pct(chns,:Y)
