#| 

  Test of Bernoulli distribution in Racket Gamble.

  This is a port of my WebPPL model bernoulli_test.wppl

  Output:

variable: prob
Min: 0.21192628586324225 Mean: 0.3194269091172542 Max: 0.4138278375035447 Variance: 0.0011620683364760235 Stddev: 0.0340891234336705
Credible interval (0.84): 0.27549606452870246..0.37162457231453055

variable: prior
Min: 0.09727381477113199 Mean: 0.503963832671068 Max: 0.8688624925523561 Variance: 0.02741594366346585 Stddev: 0.16557760616540465
Credible interval (0.84): 0.2803565362895461..0.7344137493992503


  This program was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Racket page: http://www.hakank.org/racket/

|#

#lang gamble

; (require gamble/viz)
(require racket)
(require "gamble_utils.rkt")


; Generated by R:
;> rbinom(120,1,0.3)
; or
; (repeat (lambda () (bernoulli 0.3)) 120)
(define *ys* '[0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 1 1 0 1 0 
                 1 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 1 0 1 0 1 0 0 1 1 0 0 0 1 0 1 0 0 0 
                 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 1 1 0 0 1 0 1 1 0 0 1 0 0 1 0 1 1 
                 0 1 0 1 0 0 0 0 0 1 0 0])

(define (bernoulli-test var)
  
  (; enumerate
   ; rejection-sampler
   importance-sampler
   ; mh-sampler

      
   (define prob (beta 4 4))
   (define prior (beta 4 4))

   (define (y i) (bernoulli-dist prob))

   ;; observe the values in ys
   (for ([i (range (length *ys*))])
     (observe-sample (y i) (list-ref *ys* i)))

   (case var
     [("prob") prob]
     [("prior") prior]
     )
   )
  )

(for ([var '("prob" "prior")])
  (show "variable" var)
  (let* ([model (bernoulli-test var)]
         [num-samples 1000]
         )
    (show-model model #:num-samples num-samples #:no-dist? #t)
    (newline)
    )
  )
(newline)

#|
  Alternative approach using (show-marginals)

var : prop
0.30871465998745723: 0.00666485839936646
0.30712997598358194: 0.006662412174898045
0.3067290593261268: 0.006660297227842453
0.3100352707889381: 0.006659712532838099
0.3061676998455497: 0.006656319254388399
0.311109901360548: 0.00665073779290095
0.3111182286662015: 0.0066506515655821025
...
0.8712971380878692: 7.954013871179977e-47
0.8718990546053367: 5.529758936600903e-47
0.8759561930420898: 4.541436699483964e-48
0.8809401514190204: 1.8627380039508915e-49
0.8816120269589459: 1.1978709477915083e-49
0.8829168600334614: 5.042868995429995e-50
0.9461981491992212: 6.111096623207762e-77
mean: 0.31935005885470075
Credible interval (0.84): 0.27275707839840924..0.3699170065615194

var : prior
0.4658293535094484: 0.00666485839936646
0.42720347458584174: 0.006662412174898045
0.7817993846107534: 0.006660297227842453
0.5742298200120912: 0.006659712532838099
0.5122168578516662: 0.006656319254388399
0.4161964190666904: 0.00665073779290095
0.5481732028578767: 0.0066506515655821025
...
0.25347529992138174: 7.954013871179977e-47
0.5878318995276559: 5.529758936600903e-47
0.8030987879194388: 4.541436699483964e-48
0.471938545937246: 1.8627380039508915e-49
0.58816034187961: 1.1978709477915083e-49
0.5061880875254282: 5.042868995429995e-50
0.5906880498752873: 6.111096623207762e-77
mean: 0.5025134174364599
Credible interval (0.84): 0.24035509182043138..0.7095914104820928

|#
(define (bernoulli-test2)
  
  (; enumerate
   ; rejection-sampler
   importance-sampler
   ; mh-sampler

      
   (define prob (beta 4 4))
   (define prior (beta 4 4))

   (define (y i) (bernoulli-dist prob))

   ;; observe the values in ys
   (for ([i (range (length *ys*))])
     (observe-sample (y i) (list-ref *ys* i)))
   
   (list prob prior)
   )
  )

(show-marginals (bernoulli-test2) (list "prop" "prior")
                #:truncate-output 7
                #:credible-interval 0.84)
