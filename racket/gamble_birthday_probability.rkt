#| 

  Birthday/Coincidences probability/quantile in Racket/Gamble 

  Port of R's birthday/coincidence functions (from stats library)
  """
  Probability of coincidences

  Description:

     Computes answers to a generalised _birthday paradox_ problem.
     ‘pbirthday’ computes the probability of a coincidence and
     ‘qbirthday’ computes the smallest number of observations needed to
     have at least a specified probability of coincidence.

  Usage:

     qbirthday(prob = 0.5, classes = 365, coincident = 2)
     pbirthday(n, classes = 365, coincident = 2)
     
  Arguments:

 classes: How many distinct categories the people could fall into

    prob: The desired probability of coincidence

       n: The number of people

    coincident: The number of people to fall in the same category

  Details:

     The birthday paradox is that a very small number of people, 23,
     suffices to have a 50-50 chance that two or more of them have the
     same birthday.  This function generalises the calculation to
     probabilities other than 0.5, numbers of coincident events other
     than 2, and numbers of classes other than 365.

     The formula used is approximate for ‘coincident > 2’.  The
     approximation is very good for moderate values of ‘prob’ but less
     good for very small probabilities.

  Value:

  qbirthday: Minimum number of people needed for a probability of at
             least ‘prob’ that ‘k’ or more of them have the same one out
             of ‘classes’ equiprobable labels.

  pbirthday: Probability of the specified coincidence.  
  """

  Also, I added rbirthday for generating random variates.



  This program was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Racket page: http://www.hakank.org/racket/

|#

#lang gamble


; (require gamble/viz)
; (require racket)
(require "gamble_utils.rkt")
(require "gamble_distributions.rkt")

#|
  Some simple tests

pbirthday
(pbirthday 23): 38093904702297390785243708291056390518886454060947061/75091883268515350125426207425223147563269805908203125
(* 1.0 (pbirthday 23)): 0.5072972343239854
(* 1.0 (pbirthday 22)): 0.4756953076625501
(* 1.0 (pbirthday 100)): 0.9999996927510721
(pbirthday 30 3 20): 0.5985778029003122
(pbirthday 365 3 50): 0.13167863385753809

qbirthday
(qbirthday): 23
(qbirthday 365 3 0.75): 274.0

(qbirthday 365 2 0.01): 4
(qbirthday 365 2 0.025): 5
(qbirthday 365 2 0.1): 10
(qbirthday 365 2 0.05): 7
(qbirthday 365 2 0.25): 15
(qbirthday 365 2 0.5): 23
(qbirthday 365 2 0.75): 32
(qbirthday 365 2 0.84): 37
(qbirthday 365 2 0.9): 41
(qbirthday 365 2 0.95): 47
(qbirthday 365 2 0.975): 52
(qbirthday 365 2 0.99): 57
(qbirthday 365 2 0.999): 70

rbirthday
'(7 22 27 22 31 12 41 25 31 15)
(22 : 0.16666666666666666)
(31 : 0.16666666666666666)
(25 : 0.1111111111111111)
(41 : 0.1111111111111111)
(27 : 0.1111111111111111)
(12 : 0.1111111111111111)
(15 : 0.1111111111111111)
(7 : 0.1111111111111111)
(mean: 23.0)

|#
(displayln "pbirthday")
(show "(pbirthday 23)" (pbirthday 365 2 23)) ; Using default classes = 365 and coincident = 2
(show "(* 1.0 (pbirthday 23))" (* 1.0 (pbirthday 365 2 23)))
(show "(* 1.0 (pbirthday 22))" (* 1.0 (pbirthday 365 2 22)))
(show "(* 1.0 (pbirthday 100))" (* 1.0 (pbirthday 365 2 100)))
(show "(pbirthday 30 3 20)" (pbirthday 30 3 20)) ; Example with coincident = 3
(show "(pbirthday 365 3 50)" (pbirthday 365 3 50))

(for ([n 10])
  (show "(* 1.0 (pbirthday 365 2 n))" (* 1.0 (pbirthday 365 2 n)))
  )

(newline)
(displayln "qbirthday")
(show "(qbirthday)" (qbirthday 365 2 0.5)) ; prob = 0.5, classes = 365, coincident = 2
(show "(qbirthday 365 3 0.75)" (qbirthday 0.75 365 3)) ; More specific case
(newline)
(for ([q (list 0.01 0.025 0.1 0.05 0.25 0.5 0.75 0.84 0.9 0.95 0.975 0.99 0.999)])
  (displayln (format "(qbirthday 365 2 ~a): ~a"
                     q
                     (qbirthday 365 2 q))))


(newline)
(displayln "rbirthday")

(define rs (repeat (lambda () (rbirthday 365 2)) 10))
rs
(show-freq rs)
(newline)


#|
  A simple model

variable : r
20: 0.0351
17: 0.0335
16: 0.0325
24: 0.0325
22: 0.0322
23: 0.0322
15: 0.0313
21: 0.0309
18: 0.0307
25: 0.0307
19: 0.0303
28: 0.0283
14: 0.0281
26: 0.0279
27: 0.0279
30: 0.0269
31: 0.0265
12: 0.0259
29: 0.025
11: 0.0239
13: 0.0237
10: 0.0225
9: 0.0224
32: 0.0223
33: 0.0214
35: 0.0194
36: 0.0192
34: 0.0187
37: 0.0167
38: 0.0167
7: 0.0166
8: 0.0161
6: 0.0135
39: 0.0131
40: 0.013
42: 0.0113
5: 0.0107
41: 0.0107
43: 0.0098
45: 0.0082
4: 0.0076
44: 0.0071
46: 0.0068
48: 0.0064
47: 0.0059
3: 0.0058
49: 0.0058
50: 0.0049
51: 0.0038
53: 0.0037
2: 0.0031
52: 0.003
54: 0.0024
55: 0.0022
56: 0.0018
59: 0.0016
60: 0.0016
61: 0.0015
57: 0.0013
58: 0.0013
62: 0.001
64: 0.0007
65: 0.0005
69: 0.0005
63: 0.0003
70: 0.0003
68: 0.0002
73: 0.0002
66: 0.0001
71: 0.0001
74: 0.0001
75: 0.0001
mean: 24.54559999999999
HPD interval (0.01): 3..4
HPD interval (0.84): 4..37
HPD interval (0.9): 3..41
HPD interval (0.95): 2..46
HPD interval (0.99): 2..57
Percentiles:
(0.01 4)
(0.025 5)
(0.1 10)
(0.05 7)
(0.25 16)
(0.5 23)
(0.75 32)
(0.84 37)
(0.9 41)
(0.95 46)
(0.975 52)
(0.99 57)
(0.999 69)
Histogram:
 2:  21 ##### (0.002 / 0    )
 3:  55 ############# (0.005 / 0.002)
 4:  98 ####################### (0.009 / 0.007)
 5: 122 ############################# (0.012 / 0.017)
 6: 120 ############################ (0.012 / 0.029)
 7: 149 ################################### (0.014 / 0.041)
 8: 166 ####################################### (0.016 / 0.056)
 9: 207 ################################################ (0.020 / 0.073)
10: 223 #################################################### (0.022 / 0.093)
11: 245 ######################################################### (0.024 / 0.116)
12: 244 ######################################################### (0.024 / 0.140)
13: 251 ########################################################### (0.025 / 0.165)
14: 292 #################################################################### (0.029 / 0.190)
15: 269 ############################################################### (0.026 / 0.219)
16: 302 ###################################################################### (0.030 / 0.246)
17: 331 ############################################################################# (0.033 / 0.276)
18: 339 ############################################################################### (0.033 / 0.309)
19: 312 ######################################################################### (0.031 / 0.343)
20: 346 ################################################################################ (0.034 / 0.374)
21: 327 ############################################################################ (0.032 / 0.409)
22: 324 ########################################################################### (0.032 / 0.441)
23: 334 ############################################################################## (0.033 / 0.474)
24: 294 #################################################################### (0.029 / 0.507)
25: 310 ######################################################################## (0.031 / 0.537)
26: 294 #################################################################### (0.029 / 0.568)
27: 289 ################################################################### (0.028 / 0.597)
28: 266 ############################################################## (0.026 / 0.626)
29: 283 ################################################################## (0.028 / 0.653)
30: 292 #################################################################### (0.029 / 0.681)
31: 241 ######################################################## (0.024 / 0.710)
32: 213 ################################################## (0.021 / 0.734)
33: 225 ##################################################### (0.022 / 0.755)
34: 201 ############################################### (0.020 / 0.778)
35: 186 ############################################ (0.018 / 0.798)
36: 175 ######################################### (0.017 / 0.817)
37: 178 ########################################## (0.017 / 0.834)
38: 148 ################################### (0.014 / 0.852)
39: 123 ############################# (0.012 / 0.867)
40: 137 ################################ (0.013 / 0.879)
41: 133 ############################### (0.013 / 0.893)
42:  98 ####################### (0.009 / 0.906)
43: 108 ######################### (0.010 / 0.916)
44:  86 #################### (0.008 / 0.927)
45:  80 ################### (0.008 / 0.935)
46:  68 ################ (0.006 / 0.943)
47:  58 ############## (0.005 / 0.950)
48:  54 ############# (0.005 / 0.956)
49:  41 ########## (0.004 / 0.961)
50:  46 ########### (0.004 / 0.965)
51:  40 ########## (0.004 / 0.970)
52:  37 ######### (0.003 / 0.974)
53:  33 ######## (0.003 / 0.978)
54:  33 ######## (0.003 / 0.981)
55:  24 ###### (0.002 / 0.984)
56:  20 ##### (0.002 / 0.987)
57:  11 ### (0.001 / 0.989)
58:  14 #### (0.001 / 0.990)
59:  18 ##### (0.001 / 0.991)
60:  10 ### (0.001 / 0.993)
61:   6 ## (0.000 / 0.994)
62:   9 ### (0.000 / 0.995)
63:   8 ## (0.000 / 0.995)
64:   5 ## (0.000 / 0.996)
65:   5 ## (0.000 / 0.997)
66:   5 ## (0.000 / 0.997)
67:   4 # (0.000 / 0.998)
68:   1 # (0.000 / 0.998)
69:   3 # (0.000 / 0.998)
71:   3 # (0.000 / 0.999)
72:   1 # (0.000 / 0.999)
73:   1 # (0.000 / 0.999)
75:   2 # (0.000 / 0.999)
76:   1 # (0.000 / 0.999)
78:   2 # (0.000 / 0.999)

variable : p
#t: 0.5086
#f: 0.49139999999999995
mean: 0.5086
Percentiles:
(0.01 #f)
(0.025 #f)
(0.1 #f)
(0.05 #f)
(0.25 #f)
(0.5 #t)
(0.75 #t)
(0.84 #t)
(0.9 #t)
(0.95 #t)
(0.975 #t)
(0.99 #t)
(0.999 #t)
Histogram:
#f: 4923 ############################################################################## (0.492 / 0    )
#t: 5077 ################################################################################ (0.507 / 0.492)


|# 
(define (model)
  (; enumerate ; for rbirthday2
   ; rejection-sampler
   importance-sampler ; for rbirthday
   ; mh-sampler

   (define classes 365)
   (define coincident 2)
   (define r (rbirthday classes coincident))   
   (define p (<= r 23))
   (list r
         p)
   
   )
  )

(show-marginals (model)
                (list  "r"
                       "p"
                       )
                #:num-samples 10000
                ; #:truncate-output 5
                ; #:skip-marginals? #t
                ; #:show-stats? #t
                ; #:credible-interval 0.84
                #:hpd-interval (list 0.01 0.84 0.9 0.95 0.99)
                #:show-histogram? #t
                #:show-percentiles? #t
                ; #:burn 0
                ; #:thin 0
                )
  
#|
  Using discrete random variates with rbirthday2. 
  Note: This is kind of experimental and with not give 
        exact correct probabilities...

variable : r
20: 59/1825 (0.03232876712328767)
21: 59/1825 (0.03232876712328767)
18: 117/3650 (0.03205479452054794)
19: 117/3650 (0.03205479452054794)
22: 117/3650 (0.03205479452054794)
23: 23/730 (0.031506849315068496)
17: 57/1825 (0.03123287671232877)
24: 113/3650 (0.03095890410958904)
16: 56/1825 (0.030684931506849315)
25: 111/3650 (0.030410958904109588)
15: 109/3650 (0.029863013698630137)
26: 54/1825 (0.02958904109589041)
14: 21/730 (0.028767123287671233)
27: 21/730 (0.028767123287671233)
13: 2/73 (0.0273972602739726)
28: 2/73 (0.0273972602739726)
29: 97/3650 (0.026575342465753424)
12: 47/1825 (0.025753424657534246)
30: 93/3650 (0.02547945205479452)
11: 89/3650 (0.024383561643835615)
31: 44/1825 (0.02410958904109589)
32: 83/3650 (0.02273972602739726)
10: 81/3650 (0.02219178082191781)
33: 79/3650 (0.021643835616438355)
9: 37/1825 (0.020273972602739727)
34: 37/1825 (0.020273972602739727)
35: 7/365 (0.019178082191780823)
8: 33/1825 (0.01808219178082192)
36: 13/730 (0.01780821917808219)
37: 6/365 (0.01643835616438356)
7: 29/1825 (0.01589041095890411)
38: 28/1825 (0.015342465753424657)
39: 26/1825 (0.014246575342465753)
6: 24/1825 (0.01315068493150685)
40: 47/3650 (0.012876712328767123)
41: 22/1825 (0.012054794520547946)
5: 4/365 (0.010958904109589041)
42: 4/365 (0.010958904109589041)
43: 18/1825 (0.009863013698630137)
44: 33/3650 (0.00904109589041096)
4: 3/365 (0.00821917808219178)
45: 29/3650 (0.007945205479452055)
46: 27/3650 (0.0073972602739726025)
47: 23/3650 (0.006301369863013699)
48: 11/1825 (0.006027397260273973)
3: 19/3650 (0.0052054794520547945)
49: 19/3650 (0.0052054794520547945)
50: 8/1825 (0.004383561643835616)
51: 3/730 (0.00410958904109589)
52: 13/3650 (0.003561643835616438)
53: 6/1825 (0.0032876712328767125)
2: 1/365 (0.0027397260273972603)
54: 1/365 (0.0027397260273972603)
55: 4/1825 (0.002191780821917808)
56: 4/1825 (0.002191780821917808)
57: 3/1825 (0.0016438356164383563)
58: 3/1825 (0.0016438356164383563)
59: 1/730 (0.0013698630136986301)
60: 2/1825 (0.001095890410958904)
61: 2/1825 (0.001095890410958904)
62: 3/3650 (0.0008219178082191781)
63: 1/1825 (0.000547945205479452)
64: 1/1825 (0.000547945205479452)
65: 1/1825 (0.000547945205479452)
66: 1/1825 (0.000547945205479452)
1: 1/3650 (0.000273972602739726)
67: 1/3650 (0.000273972602739726)
68: 1/3650 (0.000273972602739726)
69: 1/3650 (0.000273972602739726)
71: 1/3650 (0.000273972602739726)
72: 1/3650 (0.000273972602739726)
76: 1/3650 (0.000273972602739726)
mean: 44904/1825 (24.604931506849315)

variable : p
#t: 926/1825 (0.5073972602739726)
#f: 899/1825 (0.4926027397260274)
mean: 926/1825 (0.5073972602739726)


|#
(define (model2)
  (enumerate ; for rbirthday2
   ; rejection-sampler
   ; importance-sampler ; for rbirthday
   ; mh-sampler

   (define classes 365)
   (define coincident 2)
   (define r (rbirthday2 classes coincident))
   (define p (<= r 23))
   (list r
         p)
   
   )
  )

(displayln "\nModel 2")
(show-marginals (model2)
                (list  "r"
                       "p"
                       )
                ; #:num-samples 10000
                ; #:truncate-output 5
                ; #:skip-marginals? #t
                ; #:show-stats? #t
                ; #:credible-interval 0.84
                ; #:hpd-interval (list 0.01 0.84 0.9 0.95 0.99)
                ; #:show-histogram? #t
                ; #:show-percentiles? #t
                ; #:burn 0
                ; #:thin 0
                )
  

