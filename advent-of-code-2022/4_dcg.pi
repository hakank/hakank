/* 

  Advent of Code 2022 - Day 4 in Picat.

  https://adventofcode.com/2022/day/4

  DCG to parse the data

  This program was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

import util.

main => go.

go =>
  % File = "4_test.txt",
  File = "4.txt",
  Chars = read_file_chars(File),
  parse_lines(Lines,Chars,[]),

  C1 = 0, C2 = 0,
  foreach([A1,B1] in Lines)
    A = A1.map(to_int),
    B = B1.map(to_int),
    if overlap_completely(A,B) then C1 := C1 + 1 end,  % Part 1
    if overlap_partly(A,B)     then C2 := C2 + 1 end % Part 2
  end,
  println(C1),
  println(C2),
  nl.

% Part 1
overlap_completely([LowerA,UpperA], [LowerB,UpperB]) :-  
    ( LowerA <= LowerB, UpperA >= UpperB ) ;
    ( LowerB <= LowerA, UpperB >= UpperA ).

% Part 2
overlap_partly([LowerA,UpperA], [LowerB,UpperB]) :-
    LowerA =< UpperB,
    UpperA >= LowerB.


%
% DCG
%

% Accept string of digits 0..9
digits([C|Rest]) --> [C], {ascii_digit(C)}, digits(Rest).
digits([]) --> [].

%
% Parsing "A-B,C-D"
%
parse_line([[A,B],[C,D]]) --> digits(A), "-", digits(B),
                              ",",
                             digits(C),"-",   digits(D).

parse_lines([Line|Lines]) --> parse_line(Line), "\n", parse_lines(Lines).
parse_lines([Line]) --> parse_line(Line).
parse_lines([]) --> [].
