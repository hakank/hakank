/* 

  Advent of Code 2022 - Day 7 in Picat.

  https://adventofcode.com/2022/day/7

  This program was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

import regex.
import util.

main => go.

go =>
  % File = "7_test.txt",
  File = "7.txt",
  Lines = read_file_lines(File),

  Fs = new_map(),
  CurrentDir = "",
  Dirs = [], % The stack
  Level = 0,
  foreach(Line in Lines)
    if append("$ cd ",Dir,Line) then
      if Dir == ".." then
        Dirs := pop(Dirs,CD),
        CurrentDir := CD
      else
        CurrentDir := Dir,
        Parents = Dirs[1..Dirs.len-1].join("/"),
        Dirs := push(Dirs,[Parents ++ "/" ++ CurrentDir])
      end
    elseif Line == "$ ls" then
      true
    elseif append("dir ", Dir, Line) then
      true
    elseif append(Size, " ", Name, Line) then
      SizeInt = Size.to_int,
      foreach(D in Dirs)
        Fs.put(D,Fs.get(D,0)+SizeInt),
      end
    else
      println("bad command")
    end
  end,
  TotalPart1 = 0,
  foreach(Dir=Size in Fs)
     if Size <= 100000 then
       TotalPart1 := TotalPart1+Size
     end
  end,
  println(part1=TotalPart1),

  % Part 2
  TotalSpace = 70000000,
  TotalUsed = Fs.get("//"),
  TotalFree = TotalSpace - TotalUsed,
  TotalNeedToFree = 30000000 - TotalFree,
  println(part2=[ Size : _Dir=Size in Fs, Size > TotalNeedToFree ].min),
  nl.


% Functional
% push(L,E)
%  - push E to top of L
%  - returns the stack [E] ++ L
push(L,E) = E ++ L, list(E) => true. % If E is a list
push(L,E) = [E] ++ L. % E is an atom

% pop(L,E)
% - removes the first element of L: E
% - returns the rest 
pop(L,E) = Rest, not empty(L) =>
  L = [E|Rest].

% Is the stack empty?
empty([]).

