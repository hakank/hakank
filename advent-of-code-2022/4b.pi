/* 

  Advent of Code 2022 - Day 4 in Picat.

  https://adventofcode.com/2022/day/4

  Same approach as 4.pi but using regex to split the lines.
  This uses my regex module https://github.com/hakank/picat_regex

  This program was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

import util,regex.

main => go.


% Foreach loop
go =>
  % File = "4_test.txt",
  File = "4.txt",
  Lines = read_file_lines(File),
  C1 = 0, C2 = 0,
  regex_compile("^(\\d+)-(\\d+),(\\d+)-(\\d+)$"),
  foreach(Line in Lines)
    regex_match(Line,Capture),
    [LA,UA,LB,UB] = Capture.tail.map(to_int),
    if overlap_completely(LA,UA,LB,UB) then C1 := C1 + 1 end, % Part 1
    if overlap_partly(LA,UA,LB,UB)     then C2 := C2 + 1 end  % Part 2
  end,
  println(C1),
  println(C2),
  nl.

%
% Using regex_find_all/2 and list comprehension
%
go2 =>
  % File = "4_test.txt",
  File = "4.txt",
  All = [ AInts : A in regex_find_all("(\\d+)-(\\d+),(\\d+)-(\\d+)",read_file_chars(File)),
                  AInts = A.map(to_int)],
  println([C : [LA,UA,LB,UB] in All, C=cond(overlap_completely(LA,UA,LB,UB),1,0)].sum),
  println([C : [LA,UA,LB,UB] in All, C=cond(overlap_partly(LA,UA,LB,UB),1,0)].sum).


% Part 1
overlap_completely(LowerA,UpperA,LowerB,UpperB) :-  
    ( LowerA <= LowerB, UpperA >= UpperB ) ;
    ( LowerB <= LowerA, UpperB >= UpperA ).

% Part 2
overlap_partly(LowerA,UpperA,LowerB,UpperB) :-
    LowerA =< UpperB,
    UpperA >= LowerB.
