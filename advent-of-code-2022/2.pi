/* 

  Advent Of Code 2022 - Day 2 in Picat.

  https://adventofcode.com/2022/day/2

  This program was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

import util.

main => go.

/*
  """
  The first column is what your opponent is going to play: 
   A for Rock, 
   B for Paper, and 
   C for Scissors. 
 
  ...
 
  The second column, you reason, must be what you should play in 
  response: 
    X for Rock, 
    Y for Paper, and 
    Z for Scissors. 
  Winning every time would be suspicious, so the responses must 
  have been carefully chosen.


  Your total score is the sum of your scores for each round. 
  The score for a single round is the score for the shape you selected 
  (1 for Rock, 2 for Paper, and 3 for Scissors) plus the score for 
  the outcome of the round (0 if you lost, 3 if the round was a 
  draw, and 6 if you won).



  Part 2 

  Anyway, the second column says how the round needs to end: 
    X means you need to lose, 
    Y means you need to end the round in a draw, and 
    Z means you need to win.
  """

*/

go =>
  MapOther = new_map(["A"="Rock","B"="Paper","C"="Scissors"]),
  PointsMe = new_map(["Rock"=1,"Paper"=2,"Scissors"=3]),
  MapMe = new_map(["X"="Rock","Y"="Paper","Z"="Scissors"]),
  MapMe2 = new_map(["X"="Loose","Y"="Draw","Z"="Win"]),

  % File = "2_test.txt",  
  File = "2.txt",  
  Runs = read_file_lines(File),

  member(Part,1..2),
  
  Points = 0,  
  foreach(Run in Runs)
    [Other,Me] = split(Run),
    O = MapOther.get(Other),
    
    if Part == 1 then
    
      M = MapMe.get(Me),
      if     beats(M,O)     then P2 = 6
      elseif draw(M,O)      then P2 = 3
      else                       P2 = 0 end,
      Pick = M
      
    else
    
      M2 = MapMe2.get(Me),
      if     M2 == "Win"   then beats(Pick,O),  P2 = 6
      elseif M2 == "Loose" then loses(Pick,O),  P2 = 0
      else                            Pick = O, P2 = 3 end
      
    end,
    P1 = PointsMe.get(Pick),
    P = P1 + P2,
    Points := Points + P
  end,
  println(Points),
  fail,
  nl.


%
% Same general approach but using facts instead of maps.
%
go2 =>
  cl_facts($[map_other("A","Rock"),map_other("B","Paper"),map_other("C","Scissors"),
             map_me1("X","Rock"), map_me1("Y","Paper"), map_me1("Z","Scissors"),
             map_me2("X",loses), map_me2("Y",draw), map_me2("Z",beats),
             map_points("Rock",1), map_points("Paper",2), map_points("Scissors",3),
             map_points(beats,6), map_points(draw,3), map_points(loses,0)           
             ]),

  % File = "2_test.txt",  
  File = "2.txt",  
  Runs = read_file_lines(File),

  member(Part,1..2),
  
  Points = 0,  
  foreach(Run in Runs)
    [Other,Me] = split(Run),
    map_other(Other,O),
    
    if Part == 1 then
    
      map_me1(Me,M),
      ( (beats(M,O),P2=6)
        ;
        (draw(M,O),P2=3)
        ;
        (loses(M,O),P2=0)
      ),
      Pick = M
      
    else
      map_me2(Me,M2),
      call(M2,Pick,O),
      map_points(M2,P2)
    end,

    map_points(Pick,P1),
    P = P1 + P2,
    Points := Points + P,
  end,
  println(Points),
  fail,
  nl.


beats("Rock","Scissors").
beats("Scissors","Paper").
beats("Paper","Rock").

loses(X,Y) :- beats(Y,X).

draw(X,X).