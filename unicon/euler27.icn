# 
# Problem 27
# """
# Euler published the remarkable quadratic formula:
#
# n² + n + 41
#
# It turns out that the formula will produce 40 primes for the consecutive values 
# n = 0 to 39. However, when n = 40, 402 + 40 + 41 = 40(40 + 1) + 41 is divisible by 
# 41, and certainly when n = 41, 41² + 41 + 41 is clearly divisible by 41.
#
# Using computers, the incredible formula  n² − 79n + 1601 was discovered, which 
# produces 80 primes for the consecutive values n = 0 to 79. The product of the 
# coefficients, −79 and 1601, is −126479.
#
# Considering quadratics of the form:
#
#     n² + an + b, where |a| < 1000 and |b| < 1000
#
#     where |n| is the modulus/absolute value of n
#     e.g. |11| = 11 and |−4| = 4
#
# Find the product of the coefficients, a and b, for the quadratic 
# expression that produces the maximum number of primes for consecutive 
# values of n, starting with n = 0.
#
# """ 
#
# This program was written by Hakan Kjellerstrand (hakank@gmail.com)
# Also see my Icon/Unicon page http://www.hakank.org/icon/
#

# for isprime()
link numbers

procedure main()
    # problem27() # 4.266s
    problem27b() # 2.740s
end

#
# a brute force version
#
procedure problem27()

    t := 999
    max_len := 0
    best_l := []
    best_a := 0
    best_b := 0
    every a := -t to t do {
        every b := -t to t do {
            L := p(a, b)
            if *L > max_len then {
                max_len := *L
                best_l := L
                best_a := a
                best_b := b
                # write("a:",a, " b:", b, " max_len:", max_len)
            }
        }
    }

    # write("best a:", best_a, " best b:", best_b)
    write(best_a*best_b)
    # every writes(!best_l, " ")
    # write("\n")
end

procedure problem27b()

    t := 999
    best_len := 0
    best_a := 0
    best_b := 0
    every a := -t to t do {
        every b := -t to t do {
            len := 0
            pp := len^2 + a*len + b
            while pp > 1 & m_isprime(pp) do {
                len +:= 1
                pp := len^2 + a*len + b
            }
            
            if len > best_len then {
                best_len := len
                best_a := a
                best_b := b
            }
        }
    }

    write(best_a*best_b)
end


procedure p(a, b) 
    local n, L
    n := 0
    L := []
    max_l := 0
    while pp:= n^2 + a*n + b & pp > 1 & m_isprime(pp) do {
        n +:= 1
        put(L, pp)
        
    }
    return L
end

#
# Memoized variant of isprime(n)
# 
procedure m_isprime(n)
    static primes := set()
    member(primes, n) & return n 
    if isprime(n) then {
        insert(primes, n)
    } else {
        fail
    }

end

# Using a table instead, slighly slower.
procedure m_isprime2(n)
    static primes := table(0)
    primes[n] > 0 & return n 
    if isprime(n) then {
        primes[n] := 1
    } else {
        fail
    }

end
