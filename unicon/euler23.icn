#
# Project Euler problem 23
# """
# A perfect number is a number for which the sum of its proper divisors 
# is exactly equal to the number. For example, the sum of the proper divisors 
# of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.
#
# A number n is called deficient if the sum of its proper divisors is less than 
# n and it is called abundant if this sum exceeds n.
#
# As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number 
# that can be written as the sum of two abundant numbers is 24. By mathematical 
# analysis, it can be shown that all integers greater than 28123 can be written 
# as the sum of two abundant numbers. However, this upper limit cannot be reduced 
# any further by analysis even though it is known that the greatest number that 
# cannot be expressed as the sum of two abundant numbers is less than this limit.
#
# Find the sum of all the positive integers which cannot be written as the sum of 
# two abundant numbers.
# """
# Answer: 4179871
#
# This program was written by Hakan Kjellerstrand (hakank@gmail.com)
# Also see my Icon/Unicon page http://www.hakank.org/icon/
#
link numbers, factors
procedure main()
    # problem23()
    problem23b()
    # problem23c() # Not correct and slow!
end

# 5.6s
procedure problem23()
    local s, a, b, c, ss, h, n
    # From http://mathworld.wolfram.com/AbundantNumber.html: 
    # "Every number greater than 20161 can be expressed as a sum of two abundant numbers."
    n := 20161
    s := set()
    every a := 1 to n do {
        b := sum_divisors(a)
        if b > a then {
            insert(s, a)
        }
    }
    s2 := set();
    every a := !s do {
        every b := !s do {
            insert(s2, a+b)
        }
    }
    s3 := 0
    every i := 1 to n do {
        if not member(s2,i) then {
            s3 +:= i
        }
    }
    write(s3)

    # variant
    # s3 := 0
    # every i := 1 to n do {
    #     s3 +:= (member(s2,i),0) | i
    # }
    # write(s3)


end

# Faster: 2.69s
# 1.865s
procedure problem23b()
    limit := 20161
    arr := list(limit,1)
    every i := 2 to limit do
        every j := i*2 to limit by i do
            arr[j] +:= i 
    
    abundant := []
    every i := 12 to limit do 
        if arr[i] > i then 
            put(abundant,i)
    
    
    # every a := !abundant do
    #     every b := !abundant do
    #         if a <= b then
    #             if a+b < limit then 
    #                 arr[a+b] := 0
    #             else 
    #                 break
    # A little faster
    every b := 1 to *abundant do
        every a := 1 to b do {
            aa := abundant[a]
            ab := abundant[b]
            aaab := aa+ab
            if aaab <= limit then 
                arr[aaab] := 0
            else 
                break
        }

    v := 0
    every i:=1 to limit & arr[i] > 0 & v +:= i
    write(v)

end


# This is NOT correct!
procedure problem23c()
    limit := 20161
    
    abundant := [: a:= 2 to limit & sum_divisors(a) > a :]
    
    vec := array(limit,0)
    every b := 1 to *abundant do
        every a := 1 to b-1 do
            if a+b <= limit then
                vec[a+b] := 1

    s := 0
    every a := 1 to limit & vec[a] == 0 & s +:= i
    write(s)

end


procedure sum_divisors(n) 
  local i, s
  s := 1
  every i := 2 to floor(sqrt(n)) do {
      if n % i = 0 then {
          s +:= i
          if i ~= n / i then {
             s +:= n / i
          }
      }
  }
  return s
end

procedure sumx(L) 
   result := 0
   every result +:= !values
   return result
end
