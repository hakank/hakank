# 
# Problem 24
# """
# A permutation is an ordered arrangement of objects. For example, 3124 is one 
# possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are 
# listed numerically or alphabetically, we call it lexicographic order. The 
# lexicographic permutations of 0, 1 and 2 are:
# 
#    012   021   102   120   201   210
#
# What is the millionth lexicographic permutation of the digits 
# 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?
# """
#
# This program was written by Hakan Kjellerstrand (hakank@gmail.com)
# Also see my Icon/Unicon page http://www.hakank.org/icon/
#
link ximage,strings,lists,factors

procedure main()
    # problem24() # 1.478s
    # problem24b() # 1.531s
    # problem24c() # Too slow and wrong
    problem24d() # 0.115s
end

# 1.478s
procedure problem24()
    every l:=permute2("0123456789") \ 1000000
    write(l)

end

# Using strings.permutes: Slower!
# 1.531s
procedure problem24b()
    every l:=permutes("0123456789") \ 1000000
    write(l)

end

# Using lists.lpermute:
# Much slower 3.144s
# 
procedure problem24c()
    every l:=lpermute([0,1,2,3,4,5,6,7,8,9]) \ 1000000
    every writes(!l)
    write()

end

#
# Another approach: 0.115s
#
procedure problem24d()
    n := 999999
    p := 10
    t := [: (i:= 1 to p ) % 10 :]
    answer := []
    every i := 1 to p-1 do {
        f := factorial(p-i)
        d := n / f
        n %:= f
        answer |||:=[t[d]]
        delete(t,d)
    }
    every writes(!(answer ||| t))
    write()
end



procedure permute2(s)
   local i, x, t
   if s == "" then return ""
   every i := 1 to *s do {
      x := s[i]
      t := s
      t[i] := ""
      suspend x || permute2(t)
      }
end
