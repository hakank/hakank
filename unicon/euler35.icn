# 
# Problem 35
# """
# The number, 197, is called a circular prime because all 
# rotations of the digits: 197, 971, and 719, are themselves prime.
# 
# There are thirteen such primes below 100: 
# 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.
# 
# How many circular primes are there below one million?
# 
# """ 
#
# This program was written by Hakan Kjellerstrand (hakank@gmail.com)
# Also see my Icon/Unicon page http://www.hakank.org/icon/
#
link factors, lists
procedure main()
    problem35() # 2.27s
end

procedure problem35()

    c := 3 # assume that we've found 2, 3, and 5 already
    p := 5 # 

    # all primes must end in 1,3,7,9
    ps:= set(["1","3","7","9"])
    ps2:= set(["0","2","4","5","6","8"])

    # this loop takes 1:08 minutes
    # every p := 3 to 1000000-1 by 2 & isprime(p) do {

    # this takes 2.7s seconds
    while p := nxtprime(p+1) & p < 1000000 do {
        ll := []
        every put(ll, !string(p))

        check := 1
        # a number can only contain 1,3,7, and 9
        # since it should - eventually - become the
        # last digit.
        # well, we check all the other digits (as strings)
        # every member(ps2,!ll) do check:=0 & next
        if member(ps2,!ll) then check:=0 & next
        # check == 0 & next

        # at last. now we can rotate...
        every j := 1 to *ll-1 & check = 1 do {
            s := "" # translate to string -> int
            every s||:= !lrotate(ll, j)
            m_isprime(integer(s)) | (check := 0 & break)
        }
        
        check = 1 & c +:= 1
    }

    write(c)

end


# procedure my_isprime(n)
#     static h := table()
#     return (member(h, n) & h[n]) | (h[n] := isprime(n))
# end


#
# Memoized variant of isprime(n)
# Note: it don't memoize non-primes (instead it fail)
# 
procedure m_isprime(n)
    static primes := set()
    member(primes, n) & return n 
    if isprime(n) then {
        return insert(primes, n)
    } else {
        fail
    }

end

