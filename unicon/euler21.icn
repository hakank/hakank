#
# Project Euler problem 21.
# """
# Let d(n) be defined as the sum of proper divisors of n (numbers less 
# than n which divide evenly into n).
# If d(a) = b and d(b) = a, where a /= b, then a and b are an amicable 
# pair and each of a and b are called amicable numbers.
# 
# For example, the proper divisors of 220 are 
# 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. 
# The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.
# 
# Evaluate the sum of all the amicable numbers under 10000.
# """
#
#
# This program was written by Hakan Kjellerstrand (hakank@gmail.com)
# Also see my Icon/Unicon page http://www.hakank.org/icon/
#
link numbers, factors
procedure main()
    # problem21() # 0.211s
    problem21b() # 0.197
end

# 0.211s
procedure problem21()
    local s, a, b, c, ss, h
    s := set()
    h := table(0)
    every a := 1 to 10000-1 do {
        if member(h,a) then next
        b := if h[a] > 0 then h[a] else h[a] := sum_divisors2(a)
        if a == b then next
        c := if h[b] > 0 then h[b] else h[b] := sum_divisors2(b)
        # This works as well but is slightly slower:
        # b := h[a] | h[a] := sum_divisors(a)
        # c := h[b] | h[b] := sum_divisors(b)
        # b := sum_divisors(a)
        # c := sum_divisors(b)
        if a ~== b & a == c then {
            insert(s, a, b)
         }
    }
    ss := 0
    every ss +:= !s
    write(ss)

end

# 0.197s
procedure problem21b()
    local s, a, b, c, ss, h
    n := 9999
    s := list(n,0)
    every i := 1 to n do {
        s[i] := sum_divisors2(i)
    }

    ss := 0
    every i := 1 to n do {
        if s[i] <= n & i == s[s[i]] & i ~== s[i] then
            ss +:= i
    }
    write(ss)

end


procedure sum_divisors(n) 
  local i, s
  s := 0
  every i := 1 to n/2 do {
      if n % i = 0 then {
          s +:= i
      }
  }
  return s
end


procedure sum_divisors2(n) 
    local i, s, d
    # write("n:",n)
    d := sqrt(n)
    s := 1
    every i := 2 to d do {
        if n % i == 0 then {
            s +:= i
            ni := n/i
            if  i ~== ni then {
                s +:= ni
            }
        }
    }
    return s
end
