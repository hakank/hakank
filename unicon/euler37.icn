# 
# Problem 37
# """
# The number 3797 has an interesting property. Being prime itself, it is possible to continuously 
# remove digits from left to right, and remain prime at each stage: 3797, 797, 97, and 7. Similarly 
# we can work from right to left: 3797, 379, 37, and 3.
# 
# Find the sum of the only eleven primes that are both truncatable from left to right and right to left.
# 
# NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.
# """ 
#
# This program was written by Hakan Kjellerstrand (hakank@gmail.com)
# Also see my Icon/Unicon page http://www.hakank.org/icon/
#

link factors, lists, numbers

procedure main()
    problem37() # 6.177s
    # problem37b()  # 6.213s
end

# 7.597s
procedure problem37()

    # we are just interested in primes > 7
    p := nxtprime(7+1) 
    c := 0 # counter (we want 11)
    s := 0 # the total
    while c < 11 do {
        if check(p) then {
            c +:= 1
            s +:= p
        }
        p := nxtprime(p+1) 
    }
    write(s)

end

# Testing...
procedure problem37b()

    # we are just interested in primes > 7
    p := 11
    c := 0 # counter (we want 11)
    s := 0 # the total
    while c < 11 & p := nxtprime(p+1) do {
        if check(p) then {
            c +:= 1
            # write(p, " (",c, ")" )
            s +:= p
        }
    }
    write(s)

end


#
# using div/mod to truncate
#
procedure check(n)
    c := ceil(log(n,10))

    # every i := 0 to c-1 do {
    #     m_isprime(trunc(n / 10^i)) > 0 | fail
    # } 
    # every i := 1 to c do {
    #     m_isprime(n % 10^i) > 0 | fail
    # } 

    # faster
    every i := 1 to c do {
        m_isprime(n % 10^i) | fail
        m_isprime(trunc(n / 10^(i-1))) | fail
    } 

    # if we don't fail
    return true
end




#
# A more direct approach to truncating (as strings).
# Slower.
#
procedure check2(n) 
    L := []
    every put(L, !string(n))
    every i := 1 to *L do {
        # left truncate
        s1 := ""
        every s1||:=!L[i:*L+1]
        m_isprime(integer(s1)) > 0 | fail

        # right truncate
        s2 := ""
        every s2||:=!L[1+:i]
        m_isprime(integer(s2)) > 0 | fail
    }

    return n

end


##
## Memoized variant of isprime(n)
## Note: it don't memoize non-primes (instead it fail)
## 
procedure m_isprime(n)
    static primes := set()
    member(primes, n) & return n 
    if isprime(n) then {
        return insert(primes, n)
    } else {
        fail
    }

end


#
# This slimmer version don't use fail so we have to check 
# for > 0 in the call.
#
procedure m_isprime2(n)
    static primes := table()

    /primes[n] := if isprime(n) then n else 0
    return primes[n]
end
