#
# Euler problem 43
#
# """
# The number, 1406357289, is a 0 to 9 pandigital number because it is made up of 
# each of the digits 0 to 9 in some order, but it also has a rather interesting 
# sub-string divisibility property.
#
# Let d1 be the 1st digit, d2 be the 2nd digit, and so on. In this way, we 
# note the following:
#
#     * d2d3d4=406 is divisible by 2
#     * d3d4d5=063 is divisible by 3
#     * d4d5d6=635 is divisible by 5
#     * d5d6d7=357 is divisible by 7
#     * d6d7d8=572 is divisible by 11
#     * d7d8d9=728 is divisible by 13
#     * d8d9d10=289 is divisible by 17
#
# Find the sum of all 0 to 9 pandigital numbers with this property.
#
# """
#
# This program was written by Hakan Kjellerstrand (hakank@gmail.com)
# Also see my Icon/Unicon page http://www.hakank.org/icon/
#
link factors, lists, strings,ximage

procedure main()
    problem43() # 
end



# brute force
# Note: It takes 4.4 seconds just to generate all the permutions.
# With the extra tests: about 6.2 seconds
procedure problem43()

    P := [2,3,5,7,11,13,17]
    m := 0
    s := "0123456789"
    
    # every p:= permute(s) do {
    #     c := (every i:= 1 to 7 do {
    #          integer(p[1+i+:3]) % P[i] = 0 | break 0
    #     }) | 1
    #     if c = 1 then {
    #         # write(p)
    #         m +:= p
    #     }
    # }

    ## built-in permutes(string), slower
    # every p:= permutes(s) do {
    #     (every i:= 1 to 7 do {
    #         integer(p[1+i+:3]) % P[i] = 0 | break 0
    #     }) | (m +:= integer(p))
    # }

    
    # slighly faster
    every p:= permute2(s) do {
        (every i:= 1 to 7 do {
             integer(p[1+i+:3]) % P[i] = 0 | break 0
        }) | (m +:= integer(p))
    }

    write(m)

end

procedure permute2(s)
    local i, x, t
    if s == "" then return ""
    every i := 1 to *s do {
        x := s[i]
        t := s
        t[i] := ""
        suspend x || permute2(t)
    }
end
