/*
   Ruin problem.

   Cf ruin_problem.wppl

   Compared to ruin_problem.wppl this version 
   use a recursive approach with arrays instead.

   The arrays always ends with a 0 (ruin).
   Note: We have to have an maxLen since otherwise the sequence goes to 
   infinity...
   
len
Marginal:
    2 : 0.49799999999999994
    4 : 0.12000000000000001
    50 : 0.1199999999999999
    6 : 0.07800000000000001
    8 : 0.038000000000000006
    10 : 0.03000000000000001
    12 : 0.025999999999999995
    14 : 0.012000000000000009
    16 : 0.010000000000000005
    28 : 0.009000000000000008
    18 : 0.009000000000000008
    20 : 0.008000000000000004
    22 : 0.008000000000000004
    26 : 0.006000000000000004
    46 : 0.005000000000000002
    38 : 0.005000000000000002
    24 : 0.005000000000000002
    34 : 0.003000000000000002
    32 : 0.0020000000000000005
    40 : 0.0020000000000000005
    30 : 0.0020000000000000005
    36 : 0.0020000000000000005
    42 : 0.0010000000000000002
    48 : 0.0010000000000000002
ruin
Marginal:
    true : 0.8800000000000001
    false : 0.11999999999999995
expectation:
[ [ 'a', NaN ],
  [ 'len', 11.101999999999995 ],
  [ 'ruin', 0.8800000000000001 ] ]
MAP:
[ [ 'a', { val: [Array], score: -0.6971552019574837 } ],
  [ 'len', { val: 2, score: -0.6971552019574843 } ],
  [ 'ruin', { val: true, score: -0.12783337150988477 } ] ]
   


*/

var model = function() {

    var maxLen = 50;
    var coins = ["head", "tail"]; // , "neither"];
    var start = 1; // >= 1
    var win = 1;
    var loose = 1;
   
    var draw1 = function(arr) {
        if (arr.length == 0) {
            return  draw1([start]);
        } else if (last(arr) == 0 || arr.length >= maxLen) {
        // } else if (last(arr) == 0) {            
            return arr;
        } else {
            var lastVal = last(arr);
            var c = uniformDraw(coins);
            if (c == "head") {
                return draw1(arr.concat(lastVal+win));
            } else {
                if (lastVal - loose <= 0) {
                    return arr.concat(0);
                } else {
                    return draw1(arr.concat(lastVal-loose));
                }
            }
                
            
        }
    }

    var draw = mem(function(arr) { return draw1(arr);});
    
    var a = draw([]);
    var len = a.length;
    
    // condition(len == 6);
    // condition(last(a)==8);
    
    return {
        a:a,
        len:len,
        ruin:last(a)==0
    }
}

var d = Infer(model);
// var d = Infer({method:"enumerate",maxExecutions:10000},model);
// var d = Infer({method:"enumerate",strategy:"breadthFirst",maxExecutions:10000},model);
// var d = Infer({method:"rejection",samples:10000},model);
// var d = Infer({method:"SMC",particles:1000},model);
// var d = Infer({method:"MCMC",kernel:"MH",samples:1000},model);
// display(d);

exp_map(d,["a","len","ruin"]);
