/*

  From http://www.statistics101.net/statistics101web_000007.htm
  """
  From CliffsQuickReview Statistics, Example 16, Page 92: 
  A swimming school wants to determine whether a recently 
  hired instructor is working out. Sixteen out of 25 of 
  Instructor A's students passed the lifeguard certification 
  test on the first try. In comparison, 57 out of 72 of more 
  experienced Instructor B's students passed the test on the 
  first try. Is Instructor A's success rate worse than 
  Instructor B's? Use alpha = 0.10. 
 
  Null hypothesis: A  s rate is >= B  s rate 
  Alternate hypothesis: A  s rate is < B  s rate 
  This is a one-tailed test. 
  """

  expectation:
  [ [ 'sample_a', 63.99879999999999 ],
    [ 'sample_b', 79.07777777777775 ],
    [ 'p', 0.07379999999999994 ] ]


*/

console.log("a 16/25:",16/25,"b: 57/72",57/72)
var a = _.flatten([rep(16,"passed"),rep(9,"failed")])
var b = _.flatten([rep(57,"passed"),rep(15,"failed")])
var model = function() {
    var sample_a = count("passed",resample(25,a)) / 25 * 100
    var sample_b = count("passed",resample(72,b)) / 72 * 100
    var p = sample_a >= sample_b
    return {
        sample_a:sample_a,
        sample_b:sample_b,
        p:p,
    }
}

var d = Infer({method:"rejection",samples:10000},model)
exp_map_all(d,["expectation"])

/*
 
  Here we look for the the rates for a and b in binomial(p,n),
  and check the difference of the two rates.

  expectation:
  [ [ 'rateA', 0.6344503859330843 ],
    [ 'rateB', 0.783380958988081 ],
    [ 'p', 0.07700000000000001 ] ]

  Cf ab_test_simple.wppl

*/ 
var model2 = function() {

    var nA = 25 // number of trial for A    
    var nB = 72 // number of trial for B

    var rateA = beta(1,1) 
    var sA = binomial(rateA,nA)
    condition(sA == 16) // number of successes for A
    
    var rateB = beta(1,1)     
    var sB = binomial(rateB,nB)
    condition(sB == 57) // number of successes for B

    var p = rateA > rateB
    
    return {
        rateA:rateA,
        rateB:rateB,
        p:p,
    }
}

var d2 = Infer({method:"rejection",samples:1000},model2)
exp_map_all(d2,["expectation"])

