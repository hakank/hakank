/*
  From https://dtai.cs.kuleuven.be/problog/tutorial/mpe/01_bn.html
  (from ~/problog/bayesian_networks.pl )

  expectation:
  [ [ 'calls(john)', 0 ],
    [ 'calls(mary)', 1 ],
    [ 'calls(bob)', 0.5973966309341501 ],
    [ 'alarm', 0.7105666156202143 ],
    [ 'burglary', 0.7900459418070443 ],
    [ 'earthquake', 0.20857580398162334 ] ]

  MAP:
  [ [ 'calls(john)', { val: false, score: 0 } ],
    [ 'calls(mary)', { val: true, score: 0 } ],
    [ 'calls(bob)', { val: true, score: -0.5151740127638202 } ],
    [ 'alarm', { val: true, score: -0.34169257705017597 } ],
    [ 'burglary', { val: true, score: -0.23566418102582692 } ],
    [ 'earthquake', { val: false, score: -0.23392117680803903 } ] ]


  See ~/blog/bayesian_network.blog
      ~/psi/bayesian_network.psi

*/

var model = function() {

    
    
    var burglary = flip(0.7);
    var earthquake = flip(0.2);
    
    var alarm = (function() {
        if (burglary == true && earthquake == true) {
            return flip(0.9);
        } else if (burglary == true && earthquake == false) {
            return flip(0.8);
        } else if (burglary == false && earthquake == true) {
            return flip(0.1);
        } else {
            return false;
        }
    })();

    // Note mem()
    var calls = mem(function(x) {
        return alarm ? flip(0.8) : flip(0.1);
    });

    condition(calls("john")==false);
    condition(calls("mary")==true);
    // condition(bob==true);    

    // condition(alarm==true);
    
    return {"calls(john)":calls("john"),
            "calls(mary)":calls("mary"),
            "calls(bob)":calls("bob"),
            alarm:alarm,
            burglary:burglary,
            earthquake:earthquake
           };
    
}

var d  = Infer({method:"enumerate"},model);
// display(d);

exp_map_all(d,["expectation","MAP"]);

