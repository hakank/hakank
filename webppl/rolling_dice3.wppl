/*
  From https://dtai.cs.kuleuven.be/problog/tutorial/basic/03_dice.html
  """
  We now consider yet another way to model dice, using fair ones only. This representation 
  allows for convenient use of the results in arithmetic expressions, e.g., to add up the 
  results from several dice. We query for the probabilities of the possible sums we can get 
  from two dice given that the first number is even and the second odd.
  """ 

Marginals:
rollD1
Marginal:
    2 : 0.33333333333333337
    4 : 0.33333333333333337
    6 : 0.33333333333333337
rollD2
Marginal:
    1 : 0.33333333333333337
    3 : 0.33333333333333337
    5 : 0.33333333333333337
oddD1
Marginal:
    false : 1
evenD1
Marginal:
    true : 1
sumD1D2
Marginal:
    7 : 0.3333333333333333
    5 : 0.2222222222222222
    9 : 0.2222222222222222
    3 : 0.11111111111111109
    11 : 0.11111111111111109

expectation:
[ [ 'rollD1', 4 ],
  [ 'rollD2', 3.0000000000000004 ],
  [ 'oddD1', 0 ],
  [ 'evenD1', 1 ],
  [ 'sumD1D2', 6.999999999999999 ] ]

MAP:
[ [ 'rollD1', { val: 2, score: -1.0986122886681096 } ],
  [ 'rollD2', { val: 1, score: -1.0986122886681096 } ],
  [ 'oddD1', { val: false, score: 0 } ],
  [ 'evenD1', { val: true, score: 0 } ],
  [ 'sumD1D2', { val: 7, score: -1.0986122886681098 } ] ]


  See ~/blog/rolling_dice3.blog
      ~/psi/rolling_dice3.psi
*/

var model = function() {
    var roll = mem(function(d) {
        return uniformDraw([1,2,3,4,5,6]);
    });
    
    var sum = mem(function(d1,d2) {
        return roll(d1) + roll(d2);
    });
    
    var odd = function(d) {
        return roll(d) % 2 == 1;
    }
    var even = function(d) {
        return !odd(d);
    }
    
    condition(even("d1"));
    condition(odd("d2"));     

    return {
        rollD1:roll("d1"),
        rollD2:roll("d2"),
    
        oddD1:odd("d1"),
        evenD1:even("d1"),
    
        sumD1D2:sum("d1","d2")
    };
}

var d = Infer(model);
display(d);


exp_map(d,["rollD1","rollD2","oddD1","evenD1","sumD1D2"]);
