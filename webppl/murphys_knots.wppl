/*
  Knots on a string (Random walks in n dimensions)

  
  Robert Matthews has written an article about knots on a string 
  'Knotted rope: a topological example of Murphy's Law' ("If rope can become knotted, it will do").
  Matthews mentions a random walk in 3 dimensions.

  The simulation consists of the following.
 
  - The dimension is n
  - Start from position (0,0,0) (i.e. n 0s)
  - Get a new random position, one step in some of the directions, i.e. -1 or 1 in either 
    x, y, and z direction (for dimension n=3).
  - The criteria that it's a knot is that one come back some of the visited positions.
  - The unknown parameter is the length of the path until a knot occurs somewhere in the
    string. Note that the last point is included in the path, which means that the
    minimal value is 3 for all dimensions.


 * For n = 1
   len
   Marginal:
     3 : 0.4974000000000002
     4 : 0.2525
     5 : 0.12670000000000006
     6 : 0.06160000000000004
     7 : 0.031400000000000004
     8 : 0.016700000000000007
     9 : 0.006700000000000004
     10 : 0.0034000000000000007
     11 : 0.0023
     12 : 0.0005000000000000001
     13 : 0.0004000000000000001
     14 : 0.0002000000000000002
     15 : 0.00010000000000000009
     17 : 0.00010000000000000009

   expectation:
   [ [ 'a', NaN ], [ 'len', 3.9955000000000007 ] ]

 
   Using enumerate gives these exact values (with a maximum length of 100)
   Marginal:
     3 : 0.4999999999999999
     4 : 0.24999999999999994
     5 : 0.12499999999999997
     6 : 0.06249999999999998
     7 : 0.031250000000000014
     8 : 0.015625000000000007
     9 : 0.007812500000000002
     10 : 0.003906250000000001
     11 : 0.001953125
     12 : 0.0009765625
     13 : 0.0004882812500000004
     14 : 0.00024414062500000016
     15 : 0.00012207031250000008
     16 : 0.00006103515625000003
     17 : 0.000030517578125000014
     18 : 0.000015258789062500007
     19 : 0.000007629394531250002
     20 : 0.000003814697265625001
     21 : 0.0000019073486328125
     22 : 9.5367431640625e-7
     23 : 4.7683715820312495e-7
     24 : 2.3841857910156247e-7
     25 : 1.1920928955078144e-7
     26 : 5.960464477539072e-8
     27 : 2.9802322387695405e-8
     28 : 1.490116119384773e-8
     ...
     96 : 5.048709793414237e-29
     97 : 2.5243548967071136e-29
     98 : 1.2621774483535544e-29
     99 : 6.31088724176776e-30
     100 : 3.155443620883874e-30
     101 : 3.155443620883874e-30

    expectation:
    [ [ 'a', NaN ], [ 'len', 3.9999999999999996 ] ]


 * For n = 2 
   len
   Marginal:
     3 : 0.2559000000000002
     4 : 0.1882000000000001
     5 : 0.17440000000000005
     6 : 0.10629999999999994
     7 : 0.0872999999999999
     8 : 0.05799999999999995
     9 : 0.04119999999999997
     10 : 0.028400000000000005
     11 : 0.020999999999999942
     12 : 0.01239999999999998
     13 : 0.010000000000000005
     14 : 0.005000000000000002
     15 : 0.003900000000000003
     16 : 0.0022000000000000023
     17 : 0.0019000000000000013
     19 : 0.0009000000000000014
     18 : 0.0009000000000000014
     20 : 0.0005000000000000006
     23 : 0.0003000000000000001
     22 : 0.0003000000000000001
     24 : 0.0002000000000000002
     25 : 0.0002000000000000002
     27 : 0.0002000000000000002
     21 : 0.00010000000000000009
     26 : 0.00010000000000000009
     28 : 0.00010000000000000009
     31 : 0.00010000000000000009

   expectation:
   [ [ 'a', NaN ], [ 'len', 5.5485999999999995 ] ]


 * For n=3 (with a max_step of 100)

   Marginal:
     {"a":[[0,0,0],[1,0,0],[0,0,0]],"len":3} : 0.0286
     {"a":[[0,0,0],[0,0,-1],[0,0,0]],"len":3} : 0.0282
     {"a":[[0,0,0],[0,-1,0],[0,0,0]],"len":3} : 0.0282
     {"a":[[0,0,0],[0,1,0],[0,0,0]],"len":3} : 0.028
     {"a":[[0,0,0],[0,0,1],[0,0,0]],"len":3} : 0.0274
     {"a":[[0,0,0],[-1,0,0],[0,0,0]],"len":3} : 0.027
     {"a":[[0,0,0],[0,0,-1],[0,-1,-1],[0,0,-1]],"len":4} : 0.0057
     {"a":[[0,0,0],[0,0,-1],[0,0,-2],[0,0,-1]],"len":4} : 0.0055
     {"a":[[0,0,0],[0,0,1],[1,0,1],[0,0,1]],"len":4} : 0.0052
   ...
   Marginal:
     3 : 0.16740000000000016
     5 : 0.13890000000000005
     4 : 0.1324000000000002
     6 : 0.10369999999999988
     7 : 0.09570000000000006
     8 : 0.07180000000000011
     9 : 0.06210000000000006
     10 : 0.04739999999999998
     11 : 0.0391
     12 : 0.030799999999999987
     13 : 0.022099999999999974
     14 : 0.017699999999999962
     15 : 0.014399999999999975
     16 : 0.012299999999999985
     17 : 0.009200000000000002
     18 : 0.007999999999999997
     19 : 0.005400000000000001
     20 : 0.005200000000000003
     21 : 0.004000000000000005
     22 : 0.0028000000000000034
     23 : 0.0022000000000000023
     26 : 0.001500000000000002
     24 : 0.0013000000000000017
     25 : 0.001100000000000002
     27 : 0.0007000000000000008
     28 : 0.0006000000000000008
     31 : 0.0006000000000000008
     30 : 0.00040000000000000045
     29 : 0.0003000000000000006
     36 : 0.0003000000000000006
     32 : 0.00010000000000000026
     33 : 0.00010000000000000026
     34 : 0.00010000000000000026
     37 : 0.00010000000000000026
     43 : 0.00010000000000000026
     44 : 0.00010000000000000026

   expectation:
   [ [ 'a', NaN ], [ 'len', 7.282300000000001 ] ]


  * For n = 4
    len
    Marginal:
      3 : 0.12480000000000009
      4 : 0.10690000000000004
      5 : 0.10649999999999982
      6 : 0.08719999999999989
      7 : 0.07680000000000001
      8 : 0.07270000000000008
      9 : 0.0643000000000001
      10 : 0.051199999999999996
      11 : 0.04609999999999995
      12 : 0.03869999999999999
      13 : 0.03139999999999998
      14 : 0.027499999999999976
      15 : 0.02079999999999995
      16 : 0.01949999999999996
      17 : 0.017199999999999965
      19 : 0.016099999999999944
      18 : 0.015699999999999954
      21 : 0.012599999999999978
      20 : 0.010200000000000004
      22 : 0.008399999999999998
      23 : 0.007299999999999992
      24 : 0.005999999999999998
      25 : 0.005000000000000002
      26 : 0.004000000000000005
      27 : 0.0030000000000000044
      30 : 0.0028000000000000034
      29 : 0.0027000000000000027
      28 : 0.0020000000000000026
      32 : 0.0019000000000000013
      33 : 0.0018000000000000013
      31 : 0.001600000000000002
      36 : 0.001100000000000002
      38 : 0.001000000000000002
      39 : 0.001000000000000002
      35 : 0.0009000000000000014
      37 : 0.0008000000000000009
      34 : 0.0008000000000000009
      41 : 0.0005000000000000006
      44 : 0.00040000000000000045
      43 : 0.0003000000000000006
      42 : 0.00020000000000000055
      48 : 0.00010000000000000026
      49 : 0.00010000000000000026
      52 : 0.00010000000000000026

    expectation:
    [ [ 'a', NaN ], [ 'len', 9.279799999999996 ] ]

  * n = 5

    expectation:
    [ [ 'a', NaN ], [ 'len', 10.941000000000006 ] ]


  * n = 6
    expectation:
    [ [ 'a', NaN ], [ 'len', 13.003799999999988 ] ]

  * n = 7
    expectation:
    [ [ 'len', 14.880800000000013 ] ]


   Cf random_walk_1.wppl

  (Compare with my Swedish text on R simulations http://www.hakank.org/sims/simulering.html 
   which is a little different setup that this model.)

*/

var model = function() {
    var n = 3 // dimension
    var dirs = [-1,1]
    var max_steps = 100

    var step = function(s,steps) {
        if (s >= max_steps) {
            return steps
        } else {
            var last_step = steps[s]
            var coord = randomInteger(n) // Which direction
            var dir = categorical({ps:[1,1],vs:[-1,1]})
            var new_step = mapN(function(i) {
                if (i === coord) {
                    return last_step[i] + dir
                } else {
                    return last_step[i]
                }
            },n)
            var new_steps = steps.concat([new_step])             
            // steps.includes(new_step) // does not work!
            var seen = sum(map(function(a) { _.isEqual(a,new_step) ? 1 : 0 },steps)) > 0
            if (seen) {
                return new_steps
            } else {
                return step(s+1,new_steps)
            }
        }
    }

    var a = step(0,[mapN(function() { 0 }, n)])
    var len = a.length

    return {
        a:a,
        len:len,
    }
    
}

var d = Infer({method:"rejection",samples:10000},model)
// var d = Infer({method:"SMC",particles:10000},model)
// var d = Infer({method:"enumerate",maxRuntimeInMS:60000},model) // only for n = 1
display(d)
exp_map_all(d)

// showCredibleInterval(d,"len",0.94)
