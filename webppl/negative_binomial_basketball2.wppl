/*
  From Mathematica (NegativeBinomialDistribution)
  """
  Assume the probability of fouling for each minute interval is 0.1 independently. 
  Simulate the fouling process for 30 minutes

    RandomVariate[BernoulliDistribution[0.1], 30]
    -> 
    {0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0}

  A basketball player fouls out after 6 fouls. Find the expected playing time until foul out:
    NExpectation[x + 6, x -> NegativeBinomialDistribution[6, 0.1]]
    -> 
    60

  """

  * Simulate fouling for 30 minutes:
    [0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

  * Expecting playing time until foul out
    expectation:
      [ [ 'time_until_foul_out', 60.31199999999995 ] ]

*/

// n: number of failures
// p: probability of success
var negative_binomial = function(n,p) {
    return negative_binomial_tmp(n, p, 0, 0);
};

// helper function
var negative_binomial_tmp = function(n, p, s, f) {
    if (s == n) {
        return f;
    } else {
        return flip(p) ? negative_binomial_tmp(n,p,s+1,f) :  negative_binomial_tmp(n,p,s,f+1);
    }
    
};


var model = function() {
    var v = negative_binomial(6,0.1)
    var time_until_foul_out = v+6
    
    return {
        // v:v,
        time_until_foul_out:time_until_foul_out,
    }
}
 
// var d = Infer({method:"enumerate",maxExecutions:1000},model) // error
// var d = Infer({method:"SMC",particles:10000},model)
var d = Infer({method:"MCMC",kernel:"HMC",samples:10000},model)
// display(d)

exp_map(d,["time_until_foul_out"],["expectation"])

console.log("\nSimulate fouling for 30 minutes:")
console.log(repeat(30,function() { return flip(0.1) ? 1 : 0 }))
