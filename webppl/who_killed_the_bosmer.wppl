/*
  Who killed the Bosmer logic puzzle in WebPPL.

  From https://swi-prolog.discourse.group/t/similar-einstein-riddle/5142/6
  """
  A Bosmer, was slain. The Altmer claims the Dunmer is guilty. The Dunmer says the Khajiit did it. 
  The Orc swears he didn’t kill the Bosmer. The Khajiit says the Dunmer is lying. If only one of 
  these speaks the truth, who killed the Bosmer?""
  """

  {"altmerT":false,
   "dumberT":false,
   "orcT":false,
   "khajiitT":true,  <--
   "altmerG":false,
   "dumberG":false,
   "orcG":true,      <--
   "khajiitG":false}


  Cf my CP models:
  * Picat: http://hakank.org/picat/who_killed_the_bosmer.pi
  * SWI-Prolog: http://hakank.org/picat/who_killed_the_bosmer.pi

  Model created by Hakan Kjellerstrand, hakank@gmail.com
  See also my SWI Prolog page: http://www.hakank.org/swi_prolog/

*/

var model = function() {
    var p = 0.5; // Prior probability

    // Speaks the truth?
    var AltmerT = flip(p); 
    var DunmerT = flip(p);
    var OrcT = flip(p);
    var KhajiitT = flip(p);

    // Is guilty?
    var AltmerG = flip(p);
    var DunmerG = flip(p);
    var OrcG = flip(p);
    var KhajiitG = flip(p);

    // A Bosmer, was slain.
    
    // The Altmer claims the Dunmer is guilty.
    condition(AltmerT == DunmerG);
    
    // The Dunmer says the Khajiit did it.
    condition(DunmerT==KhajiitG);
  
    // The Orc swears he didn’t kill the Bosmer.
    condition(OrcT == (OrcG == 0));
    
    // The Khajiit says the Dunmer is lying.
    condition(KhajiitT == (DunmerT == 0));

    // If only one of these speaks the truth, who killed the Bosmer?""
    condition(AltmerT + DunmerT + OrcT + KhajiitT == 1);
    condition(AltmerG + DunmerG + OrcG + KhajiitG == 1);

    return {
        altmerT:AltmerT,
        dumberT:DunmerT,
        orcT:OrcT,
        khajiitT:KhajiitT,
        
        altmerG:AltmerG,
        dumberG:DunmerG,
        orcG:OrcG,
        khajiitG:KhajiitG,        
    };

}

var d = Infer(model);
display(d);

// var exp_map = function(d,arr) {
//     display("Marginals:");
//     map(function(a) {display(a);display(marginalize(d, a)) }, arr);
//     display("expectation:");
//     display(map(function(a) { [a,expectation(marginalize(d, a))] }, arr));
// }
// exp_map(d,["altmerT","dunmerT","orcT","khajiitT",
//            "altmerG","dunmerG","orcG","khajiitG",
//           ]);
