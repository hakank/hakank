/*
  Polya-Eggenberg distribution

  From Mathematica BetaBinomialDistribution
  """
  Define the PÃ³lya\[Dash]Eggenberg urn distribution:
  PolyaEggenbergDistribution[w_, b_, c_, n_] := BetaBinomialDistribution[w/c, b/c, n]

  The distribution models an urn scheme. An urn contains w white balls and b black balls. 
  When a ball is drawn it is returned to the urn together with c additional balls of 
  the same color. The distribution gives the probability of drawing k white balls 
  in n draws: 

  Find the number of white balls in 10 draws:
  Mean@PolyaEggenbergDistribution[5, 5, 1, 10]
  -> 5
  Table[{n, Probability[x == n, x ~ PolyaEggenbergDistribution[5, 5, 1, 10]]} // N, {n, 0, 10}]
  -> 
  {{0., 0.0108359}, 
   {1., 0.0386997}, 
   {2., 0.0803763}, 
   {3., 0.12503}, 
   {4., 0.159129}, 
   {5., 0.171859}, 
   {6., 0.159129}, 
   {7., 0.12503}, 
   {8., 0.0803763}, 
   {9., 0.0386997}, 
   {10., 0.0108359}}
  """

  Marginals:
  k_white
  Marginal:
    5 : 0.16861999999999994
    6 : 0.16045999999999996
    4 : 0.15855999999999998
    7 : 0.12600000000000003
    3 : 0.12437999999999999
    2 : 0.08245999999999999
    8 : 0.08068
    9 : 0.03865999999999999
    1 : 0.03844
    0 : 0.010939999999999998
    10 : 0.010800000000000002

  expectation:
  [ [ 'k_white', 4.99998 ] ]


*/

/*
var polya_eggenberg_dist = function(n,w,b,c) {
    return beta_binomial_dist(n,w/c,b/c)
}
*/

var model = function() {
    var w = 15 // number white
    var b = 15 // number black
    var c = 2  // number to add for the drawn type
    var n = 10
    var k_white = polya_eggenberg_dist(n,w,b,c)

    return {
        k_white:k_white,
    }
}

// var d = Infer({method:"rejection",samples:10000},model)
var d = Infer({method:"SMC",particles:10000,rejuvSteps:5},model)
exp_map_all(d)
