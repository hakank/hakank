/*
  Cheating model.

  From 
  https://discourse.julialang.org/t/fitting-a-observed-value-to-a-binomial-distribution-turing/66619
  """
  Fitting a observed value to a Binomial Distribution Turing

  I am new to Turing and trying to learn it by trying to replicate the Chapters from the book 
  https://github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers 2 .

  Here is my problem (from Chapter 2) :

  1.) Have a probability p ~ Uniform(0,1) which I have to infer the “number_of_cheaters”
  2.) p_skewed = p*(0.5) + (0.25) (deterministic value)
  3.) with model:
  yes_responses = pm.Binomial(“number_of_cheaters”, 100, p_skewed, observed=35)

  How do I write this in Turing ?
  """

  The following model is a port of the Turing.jl model in my answer.

  expectation:
  [ [ 'p', 0.20771594846504135 ],
    [ 'p_skewed', 0.35385797423252147 ] ]

  Credible interval p 0.93: [ 0.04091818225899546, 0.3675413203506901 ]
  Credible interval p_skewed 0.93: [ 0.27045909112949773, 0.43377066017534505 ]


  Cf cheating.wppl for my own port of the PyMC3 model.

*/

var model = function() {
    var yes_responses = 35
    var N = 100

    var p = uniform(0,1)
    var p_skewed = p*(0.5)+0.25 
    observe(Binomial({p:p_skewed,n:N}), yes_responses)  // Observe the yes_responses
    // condition(binomial(p_skewed,N) == yes_responses)  // Observe the yes_responses

    return {
        p:p,
        p_skewed:p_skewed
    }
}

// var d = Infer(model)
var d = Infer({method:"rejection",samples:10000},model)
// display(d)

exp_map(d,["p","p_skewed"],["expectation"])

console.log("\nCredible interval p 0.93:",credibleInterval(getSamples(d,"p"),0.93))
console.log("Credible interval p_skewed 0.93:",credibleInterval(getSamples(d,"p_skewed"),0.93))
