/*
   From Allen Downey
   https://twitter.com/AllenDowney/status/1063460117029535746
   """
   Today's Bayesian problem of the week: Suppose we visit a wild animal preserve where we 
   know that the only animals are lions and tigers and bears, but we don't know how 
   many of each there are.

   During the tour, we see 3 lions, 2 tigers, and 1 bear. Assuming that every animal had an equal 
   chance to appear in our sample, estimate the prevalence of each species. 
 
   What is the probability that the next animal we see is a bear?
   """

   Also see:
   - https://towardsdatascience.com/estimating-probabilities-with-bayesian-modeling-in-python-7144be007815
   - https://github.com/WillKoehrsen/probabilistic-programming/blob/master/Estimating%20Probabilities%20with%20Bayesian%20Inference.ipynb

   This version use a Multinomial distribution instead of a Dirichlet (as in lions_tigers_and_bears2.wppl).


  Marginals:
  o6lion
  Marginal:
    false : 0.5987
    true : 0.4013
  o6tiger
  Marginal:
    false : 0.6650999999999999
    true : 0.33490000000000003
  o6bear
  Marginal:
    false : 0.7362000000000003
    true : 0.2637999999999998
  sum6
  Marginal:
    1 : 1
  x
  Marginal:
    [3,2,1] : 0.2660999999999999
    [2,2,2] : 0.2621
    [2,3,1] : 0.14700000000000008
    [3,1,2] : 0.13550000000000006
    [4,1,1] : 0.061099999999999995
    [2,1,3] : 0.03879999999999999
    [1,3,2] : 0.03710000000000001
    [1,2,3] : 0.024700000000000007
    [1,4,1] : 0.024699999999999972
    [1,1,4] : 0.0028999999999999963
  next3
  Marginal:
    [0,0,0] : 0.08299999999999993
    [1,1,1] : 0.05369999999999999
    [1,0,0] : 0.05319999999999998
    [0,0,1] : 0.051900000000000016
    [0,1,0] : 0.051699999999999996
    [1,0,1] : 0.045099999999999994
    [0,1,1] : 0.043399999999999994
    [1,1,0] : 0.04329999999999998
    [0,0,2] : 0.042699999999999995
    [2,0,0] : 0.04249999999999994
    [0,2,0] : 0.041699999999999966
    [1,2,1] : 0.03169999999999999
    [0,1,2] : 0.0309
    [1,0,2] : 0.030799999999999987
    [0,2,1] : 0.03039999999999998
    [2,0,1] : 0.02930000000000001
    [2,1,0] : 0.02899999999999996
    [0,2,2] : 0.028799999999999992
    [2,2,2] : 0.028600000000000007
    [2,1,1] : 0.028599999999999993
    [2,2,0] : 0.028499999999999994
    [1,1,2] : 0.028399999999999995
    [1,2,0] : 0.02659999999999999
    [2,2,1] : 0.026300000000000004
    [2,0,2] : 0.024799999999999975
    [1,2,2] : 0.023399999999999987
    [2,1,2] : 0.021699999999999994

  expectation:
  [ [ 'o6lion', 0.4013 ],
    [ 'o6tiger', 0.33490000000000003 ],
    [ 'o6bear', 0.2637999999999998 ],
    [ 'sum6', 1 ],
    [ 'x', NaN ],
    [ 'next3', NaN ] ]


   Cf ~/blog/lions_tigers_and_bears3.blog

*/

var model = function() {

    var lion = 0;
    var tiger = 1;
    var bear = 2;

    // Prior
    // We have a prior of alphas for the Dirichlet distribution.
    // We draw 6 times with the Multinomial distrib with the Dirichlet prior.
    // What is the probability of different combinations of the number of each animal?

    // var alphas = [1/3, 1/3, 1/3]; // Highest prob x: [3, 2, 1]       0.2920000000000001
    // var alphas = [3/6, 2/6, 1/6]; // Highest prob x: [3, 2, 1]       0.4446000000000001
    // var alphas = [2/6, 2/6, 2/6]; // Highest prob x: [3, 2, 1]       0.26220000000000004
    // var alphas = [1/6, 2/6, 3/6]; // Highest prob x: [2, 2, 2]!      0.2613
    var alphas = [7/21, 7/21, 7/21]; // Highest prob x: [2, 2, 2]       0.23359999999999997
    
    // Draw 6 animals
    var x = multinomial(alphas,6);

    // The probabilities to calculate ("aliased" for simplicity)
    var probLion  = x[0];
    var probTiger = x[1];
    var probBear  = x[2];

    // Posterior: What is the probability of lion, tiger, and bear given the observations?
    var o = mem(function(i) {
        return categorical({ps:[probLion,probTiger,probBear],vs:[lion, tiger, bear]});
    })
    

    // It shouldn't matter in what order we see the different animals.       
    condition(o(0) == lion);
    condition(o(1) == lion);
    condition(o(2) == lion);
    condition(o(3) == tiger);
    condition(o(4) == tiger);
    condition(o(5) == bear);
    
    return {
        o6lion:o(6) == lion,
        o6tiger:o(6) == tiger,
        o6bear:o(6) == bear,
        sum6:(o(6) == bear) + (o(6) == tiger) + (o(6) == lion),
        x:x,
        next3:mapN(function(i) {return o(6+i+1)},3)
        // check:check,        

    }
}

// var d = Infer(model);
var d = Infer({method:"SMC",particles:10000},model);
// var d = Infer({method:"MCMC",kernel:"MH",samples:10000},model);
// var d = Infer({method:"rejection",samples:10000},model);
// display(d);

exp_map_all(d,["marginals","expectation"]);
