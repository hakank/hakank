/*
  Coincidences 

  This is a port (or at least inspired) by old simulations in R
  written in 2003 (in Swedish):
  http://www.hakank.org/sims/coincidence_simulating.html
  and the Swedish blog post "Sammanträffanden - anteckningar vid läsning 
  av Diaconis och Mosteller 'Methods for Studying Coincidences'" 
  ("Coincidences - note from a reading of Diaconis and Mosteller 'Methods for Studying Coincidences'")
  http://www.hakank.org/webblogg/archives/000216.html
  (translated)
  """
  The study of coincidences is related to cognitive illusions (which is the current interest). 
  We have bad intuition regarding coincidences which the birthday problems shows: 
  It takes about 23 person for it to be a 50% probability that two persons in this group 
  shares the birthday. Surprising? A common intuition is that it require many more people .
  ...
  Here I simulate some of the most interesting sections in Diaconis' and Mosteller's paper
  'Methods for Studying Coincidences', section "7.1 General-Purpose Models: Birthday Problems" (857ff).
  """ 

  Note: This program implements the plain birthday "paradox".


  common_birthday
  Marginal:
    true : 0.5448
    false : 0.45519999999999994
  num_people
  Marginal:
    23 : 1
  p
  Marginal:
    1 : 0.4552
    0.9565217391304348 : 0.37929999999999997
    0.9130434782608695 : 0.1442
    0.8695652173913043 : 0.0196
    0.8260869565217391 : 0.0017000000000000001
  expectation:
  [ [ 'common_birthday', 0.5448 ],
    [ 'num_people', 23 ],
    [ 'p', 0.9681173913043479 ] ]

*/

var model = function() {
    var obs_num_people = 23
    var num_days = 365

    var num_people = 1+randomInteger(num_days)
    condition(num_people == obs_num_people)
    
    var x = mapN(function(i) { return 1+randomInteger(num_days) }, num_people)
    mapN(function(i) {
        observe(RandomInteger({n:num_days}), x[i])
    },num_people)
    
    var common_birthday = _.uniq(x).length != num_people
    var p = _.uniq(x).length / num_people

    // condition(p < 1) 
   
    
    return {
        common_birthday:common_birthday,
        num_people:num_people,
        p:p,
        // x:x
        
    }
        
}

// var d  = Infer(model)
// var d = Infer({method:"enumerate",maxRuntimeInMS: 25000},model)
// var d = Infer({method:"rejection",samples:1000},model)
var d = Infer({method:"MCMC",samples:10000,burn:1000},model)
// var d = Infer({method:"SMC",particles:1000},model)
// display(d)

exp_map(d,["common_birthday","num_people","p"])

console.log("credible interval common_birthday: 0.93: ", credibleInterval(getSamples(d,"common_birthday"),0.93))
console.log("credible interval num_people: 0.93: ", credibleInterval(getSamples(d,"num_people"),0.93))
