/*
  https://pedrozudo.github.io/docs/20_thesis/thesis_final_online_compressed.pdf
  """
  Example 1.1. We model two machines (Line 1 in the program below). We want to know
  the probability of the first machine working (Line 11), given that the second machine
  works (Line 10) and given a model that describes under which conditions the machines
  work (Lines 7 and 8). Additionally the program models the outside temperature (Line
  3) and whether the cooling of each machine works (Lines 4 and 5) as (Boolean) random
  variables (expressed as probabilistic facts).
    1 machine(1). machine(2).
    2
    3 0.8::temperature(low).
    4 0.99::cooling(1).
    5 0.95::cooling(2).
    6
    7 works(N):- machine(N), cooling(N).
    8 works(N):- machine(N), temperature(low).
    9
    10 evidence(works(2)).
    11 query(works(1)).
  Running the program yields p(works(1)|works(2)) â‰ˆ 0.998
  """

  This model

  Marginal:
    {"temp_low":true,"cooling0":true,"cooling1":true,"works0":true,"works1":true} : 0.76
    {"temp_low":false,"cooling0":true,"cooling1":true,"works0":true,"works1":true} : 0.18999999999999995
    {"temp_low":true,"cooling0":true,"cooling1":false,"works0":true,"works1":true} : 0.04000000000000004
    {"temp_low":true,"cooling0":false,"cooling1":true,"works0":true,"works1":true} : 0.007676767676767688
    {"temp_low":false,"cooling0":false,"cooling1":true,"works0":false,"works1":true} : 0.0019191919191919216
    {"temp_low":true,"cooling0":false,"cooling1":false,"works0":true,"works1":true} : 0.00040404040404040507
  Marginals:
  temp_low
  Marginal:
    true : 0.8080808080808082
    false : 0.1919191919191919
  cooling0
  Marginal:
    true : 0.99
    false : 0.010000000000000023
  cooling1
  Marginal:
    true : 0.9595959595959594
    false : 0.040404040404040456
  works0
  Marginal:
    true : 0.998080808080808
    false : 0.0019191919191919216
  works1
  Marginal:
    true : 1
  expectation:
  [ [ 'temp_low', 0.8080808080808082 ],
    [ 'cooling0', 0.99 ],
    [ 'cooling1', 0.9595959595959594 ],
    [ 'works0', 0.998080808080808 ],
    [ 'works1', 1 ] ]
  MAP:
  [ [ 'temp_low', { val: true, score: -0.2130932154607082 } ],
    [ 'cooling0', { val: true, score: -0.01005033585350145 } ],
    [ 'cooling1', { val: true, score: -0.041242958534049246 } ],
    [ 'works0', { val: true, score: -0.0019210359277185636 } ],
    [ 'works1', { val: true, score: 0 } ] ]


*/

var model = function() {
    var temp_low = flip(0.8)
    var cooling = [flip(0.99),flip(0.95)]
    var works = function(m) {
        return cooling[m] || temp_low
    }

    // Machine 2 works
    condition(works(1) == true) // 0 based


    return {
        temp_low:temp_low,
        cooling0:cooling[0],
        cooling1:cooling[1],
        works0:works(0),
        works1:works(1),
    }
}

var d = Infer(model)
// var d = Infer({method:"MCMC",kernel:"MH",samples:1000},model)
display(d)

exp_map(d,["temp_low","cooling0","cooling1","works0","works1"]);
