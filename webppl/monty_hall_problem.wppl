/*
  From Statistics101 (Resampling Stats)
  File MontyHall.txt
  """
  This is the "Three Door Problem" or the "Monty Hall Problem"
  The game show contestant is faced with three doors, behind
  one of which is a prize. He chooses one door, but before
  that door is opened, the host opens another of the three
  doors revealing it to contain nothing. (The host knows which
  door conceals the prize and always opens a door that doesn  t
  have the prize behind it.) The contestant then is given the
  opportunity to switch his choice to the remaining unopened
  door. Should he switch or stay?

  This simulation takes advantage of the fact that if the
  contestant  s guess is wrong, then switching is the winning
  move, and that if the guess is right, then switching loses.

  To understand intuitively why switching is the better option
  consider that at the start, the contestant has 2 out of 3
  chances of guessing wrong. In other words, his first choice
  has a 66.7% probability of being wrong, meaning that there's
  a 66.7% probability that the prize is behind one of the
  other two doors. Therefore, after the empty door is shown,
  the remaining door "inherits" the 66.7% probability. 
  -> 
  stayingWinProbability: 0.3356
  switchingWinProbability: 0.6644

  """

  This model uses global variables to count the wins (as well a "pure" variant):

  Marginal:
    {"prizeDoor":"door3","guessDoor":"door3","stayP":true,"switchP":false} : 0.11111111111111113
    {"prizeDoor":"door3","guessDoor":"door2","stayP":false,"switchP":true} : 0.11111111111111113
    {"prizeDoor":"door3","guessDoor":"door1","stayP":false,"switchP":true} : 0.11111111111111113
    {"prizeDoor":"door2","guessDoor":"door3","stayP":false,"switchP":true} : 0.11111111111111113
    {"prizeDoor":"door2","guessDoor":"door2","stayP":true,"switchP":false} : 0.11111111111111113
    {"prizeDoor":"door2","guessDoor":"door1","stayP":false,"switchP":true} : 0.11111111111111113
    {"prizeDoor":"door1","guessDoor":"door3","stayP":false,"switchP":true} : 0.11111111111111113
    {"prizeDoor":"door1","guessDoor":"door2","stayP":false,"switchP":true} : 0.11111111111111113
    {"prizeDoor":"door1","guessDoor":"door1","stayP":true,"switchP":false} : 0.11111111111111113
  Marginals:
  prizeDoor
  Marginal:
    "door1" : 0.33333333333333337
    "door2" : 0.33333333333333337
    "door3" : 0.33333333333333337
  guessDoor
  Marginal:
    "door1" : 0.33333333333333337
    "door2" : 0.33333333333333337
    "door3" : 0.33333333333333337
  stayP
  Marginal:
    false : 0.6666666666666666
    true : 0.33333333333333337
  switchP
  Marginal:
    true : 0.6666666666666666
    false : 0.33333333333333337

  expectation:
  [ [ 'prizeDoor', NaN ],
    [ 'guessDoor', NaN ],
    [ 'stayP', 0.33333333333333337 ],
    [ 'switchP', 0.6666666666666666 ] ]
    
  switching wins: 6 pct: 0.6666666666666666
  staying wins  : 3 pct: 0.3333333333333333
  
  Another approach randomInteger(3) != randomInteger(3): 0.6666666666666666


*/

var switchingWinsCount = []
var stayingWinsCount = []
var doors = ["door1","door2","door3"]
var model = function() {
    var prizeDoor = uniformDraw(doors)
    var guessDoor = uniformDraw(doors)
    var stayP = guessDoor == prizeDoor ?
        (stayingWinsCount.push(1) && true) :
        (switchingWinsCount.push(1) && false)    
    var switchP = guessDoor != prizeDoor ? true : false
    
    return {
        prizeDoor:prizeDoor,
        guessDoor:guessDoor,
        stayP:stayP,
        switchP:switchP,
    }
}

var d = Infer(model)
display(d)
exp_map_all(d,["marginals","expectation"])

var switchC = switchingWinsCount.length
var stayC = stayingWinsCount.length
var totalC = switchC + stayC
console.log("switching wins:",switchC,"pct:", switchC/totalC)
console.log("staying wins  :",stayC,"pct:", stayC/totalC)


//
// This is the same as checking the probability that two random integers
// drawn from 0..2 are not equal: 0.6666666666666666
//
console.log("\nAnother approach randomInteger(3) != randomInteger(3):", Math.exp(Infer(function() {
    randomInteger(3) != randomInteger(3)
}).score(true)))
