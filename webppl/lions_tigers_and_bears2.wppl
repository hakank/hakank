/*
   From Allen Downey
   https://twitter.com/AllenDowney/status/1063460117029535746
   """
   Today's Bayesian problem of the week: Suppose we visit a wild animal preserve where we 
   know that the only animals are lions and tigers and bears, but we don't know how 
   many of each there are.

   During the tour, we see 3 lions, 2 tigers, and 1 bear. Assuming that every animal had an equal 
   chance to appear in our sample, estimate the prevalence of each species. 
 
   What is the probability that the next animal we see is a bear?
   """

   Also see: https://towardsdatascience.com/estimating-probabilities-with-bayesian-modeling-in-python-7144be007815


   expectation:
   [ [ 'o6lion', 0.4588000000000001 ],
     [ 'o6tiger', 0.3799999999999998 ],
     [ 'o6bear', 0.16119999999999982 ],
     [ 'sum6', 1 ],
     [ 'probLion', 0.4965053994053186 ],
     [ 'probTiger', 0.33853339822740625 ],
     [ 'probBear', 0.16496120236727493 ] ]


   Cf ~/blog/lions_tigers_and_bears2.blog

*/

var model = function() {

    // The animals.
    var lion = 0;
    var tiger = 1;
    var bear = 2;
    
    // Prior
    // The Dirichlet distribution ensures that the sum of probabilities is 1
    // i.e. we don't have to ensure this via some specific constraint.
    var vector = Vector([3, 2, 1]);
    var x = dirichlet(vector);

    // The probabilities to calculate ("aliased" for simplicity)
    var probLion  = x[0];
    var probTiger = x[1];
    var probBear  = x[2];
    
    // Posterior: What is the probability of lion, tiger, and bear given the observations?   
    var o = mem(function(i) {
        // return categorical({ps:[probLion,probTiger,probBear],vs:[lion, tiger, bear]});
        return categorical({ps:x,vs:[lion, tiger, bear]});        
    })

    // It shouldn't matter in what order we see the different animals.       
    condition(o(0) == lion);
    condition(o(1) == lion);
    condition(o(2) == lion);
    condition(o(3) == tiger);
    condition(o(4) == tiger);
    condition(o(5) == bear);

    return {
        o6lion:o(6) == lion,
        o6tiger:o(6) == tiger,
        o6bear:o(6) == bear,
        sum6:(o(6) == bear) + (o(6) == tiger) + (o(6) == lion),
        probLion:x.data[0],
        probTiger:x.data[1],
        probBear:x.data[2],
        // next3:mapN(function(i) {return o(6+i+1)},3)
        // check:check,        

    }    

}

// var d = Infer(model);
var d = Infer({method:"MCMC",kernel:"MH",samples:10000},model);
// display(d);
exp_map_all(d,["expectation"]);
