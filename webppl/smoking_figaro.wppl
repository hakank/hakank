/*
  From "Figaro Tutorial", page 17
  """
  class Person {
    val smokes = Flip(0.6)
  }
  val alice, bob, clara = new Person
  val friends = List((alice, bob), (bob, clara))

  clara.smokes.observe(true)

  def smokingInfluence(pair: (Boolean, Boolean)) =
    if (pair._1 == pair._2) 3.0; else 1.0

  for { (p1, p2) <- friends } {
    ^^(p1.smokes, p2.smokes).setConstraint(smokingInfluence)
  }

  ... 

  Now we create the constraint function smokingInfluence . This func-
  tion takes a pair of Booleans, and returns 3.0 if they are the same, 1.0
  if different. The intended meaning of this function is to compare the
  smoking habit of two friends, and say that having the same smok-
  ing habit is three times as likely as a different smoking habit, all else
  being equal.
  """

  * Original model (alice smokes)

  Marginal:
    {"smokes_alice":true,"smokes_bob":true,"smokes_clara":true} : 0.6923076923076923
    {"smokes_alice":true,"smokes_bob":true,"smokes_clara":false} : 0.15384615384615385
    {"smokes_alice":true,"smokes_bob":false,"smokes_clara":false} : 0.10256410256410259
    {"smokes_alice":true,"smokes_bob":false,"smokes_clara":true} : 0.051282051282051294

  Marginals:
  smokes_alice
  Marginal:
    true : 1
  smokes_bob
  Marginal:
    true : 0.8461538461538461
    false : 0.15384615384615388
  smokes_clara
  Marginal:
    true : 0.7435897435897434
    false : 0.25641025641025644

  expectation:
  [ [ 'smokes_alice', 1 ],
    [ 'smokes_bob', 0.8461538461538461 ],
    [ 'smokes_clara', 0.7435897435897434 ] ]


  * After also observing that clara does not smoke:

  Marginal:
    {"smokes_alice":true,"smokes_bob":true,"smokes_clara":false} : 0.6000000000000001
    {"smokes_alice":true,"smokes_bob":false,"smokes_clara":false} : 0.4
  Marginals:
  smokes_alice
  Marginal:
    true : 1
  smokes_bob
  Marginal:
    true : 0.6000000000000001
    false : 0.39999999999999997
  smokes_clara
  Marginal:
    false : 1

  expectation:
  [ [ 'smokes_alice', 1 ],
    [ 'smokes_bob', 0.6000000000000001 ],
    [ 'smokes_clara', 0 ] ]

*/


var model = function() {
    var smokes = mem(function(p) { flip(0.6) })

    var friends = [["alice","bob"],["bob","clara"]]

    condition(smokes("alice") == true)
    // condition(smokes("clara") == false) // Testing

    var smokingInfluence = function(pair) {
        // """
        // having the same smoking habit is three times as likely as a
        // different smoking habit, all else being equal.
        // """
        factor(Math.log(smokes(pair[0]) == smokes(pair[1]) ? 3.0 : 1.0)) 
    }

    map(function(pair) {
        smokingInfluence(pair)
    }, friends)

   
    return {
        smokes_alice:smokes("alice"),
        smokes_bob:smokes("bob"),
        smokes_clara:smokes("clara"),        
    }
    
}

var d = Infer(model)
display(d)


exp_map(d,["smokes_alice","smokes_bob","smokes_clara"],
        ["marginals","expectation"])
