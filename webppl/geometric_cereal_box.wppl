/*
  From Mathematica (GeometricDistribution) 
  """
  A cereal box contains one out of a set of n different plastic animals. The animals are equally 
  likely to occur, independently of what animals are in other boxes. Simulate the animal 
  collection process, assuming there are 10 animals for 25 boxes: 

    RandomVariate[DiscreteUniformDistribution[{1, 10}], 25]
    -> 
    {8,5,4,2,2,9,2,5,2,3,4,5,1,10,1,6,8,8,6,10,8,10,4,7,4}

  After k unique animals have been collected, the number of boxes needed to find a new unique 
  animal among the remaining n-k follows a geometric distribution with parameter 1-k/n. Find 
  the expected number of boxes needed to get a new unique animal: 

    e = Expectation[x + 1, x -> GeometricDistribution[1 - k/n]]
    -> 
    -(n/(k - n))

  Number of boxes before next unique animal:
    Block[{n = 5}, DiscretePlot[e, {k, 1, n - 1}, ExtentSize -> 1/2]]

  Find the expected number of boxes needed to collect 6 unique animals:
    
    Block[{n = 5}, Sum[e, {k, 0, n - 1}]]
    -->
    137/12 (11.4167)

  Table of this   

    Table[Sum[e, {k, 0, n - 1}], {n, 0, 10}]
    N@%
    -> 
    {0, 1, 3, 11/2, 25/3, 137/12, 147/10, 363/20, 761/35, 7129/280, 7381/252}
    {0., 1., 3., 5.5, 8.33333, 11.4167, 14.7, 18.15, 21.7429, 25.4607, 29.2897}

  The sum:
    Sum[e, {k, 0, n - 1}]
    ->
    -n (-EulerGamma - PolyGamma[0, 1 + n])

  """

  Also see https://en.wikipedia.org/wiki/Coupon_collector%27s_problem

  The model gives about the same results. 
  Compare with the theoretical
       - t: summing over -(n/(k - n))
       - t2: approx: n * log n + n*eulers_gamma + 1/2   
             (from https://en.wikipedia.org/wiki/Coupon_collector%27s_problem)
    
    n: 1
    expectation:
    [ [ 'v', 1 ], 
      [ 't', 1 ], 
      [ 't2', 1.0772156649 ] ]


    n: 2
    expectation:
    [ [ 'v', 3.004200000000001 ],
      [ 't', 3 ],
      [ 't2', 3.0407256909198903 ] ]


    n: 3
    expectation:
    [ [ 'v', 5.520100000000002 ],
      [ 't', 5.5 ],
      [ 't2', 5.527483860704328 ] ]


    n: 4
    expectation:
    [ [ 'v', 8.3243 ],
      [ 't', 8.333333333333332 ],
      [ 't2', 8.354040104079562 ] ]


    n: 5
    expectation:
    [ [ 'v', 11.404500000000002 ],
      [ 't', 11.416666666666666 ],
      [ 't2', 11.433267886670501 ] ]


    n: 6
    expectation:
    [ [ 'v', 14.778300000000002 ],
      [ 't', 14.7 ],
      [ 't2', 14.713850804768331 ] ]


    n: 7
    expectation:
    [ [ 'v', 18.16749999999999 ],
      [ 't', 18.150000000000002 ],
      [ 't2', 18.16188069768719 ] ]


    n: 8
    expectation:
    [ [ 'v', 21.659999999999993 ],
      [ 't', 21.74285714285714 ],
      [ 't2', 21.753257652638688 ] ]


    n: 9
    expectation:
    [ [ 'v', 25.464599999999997 ],
      [ 't', 25.460714285714285 ],
      [ 't2', 25.469962180125975 ] ]


    n: 10
    expectation:
    [ [ 'v', 29.13699999999999 ],
      [ 't', 29.289682539682538 ],
      [ 't2', 29.29800757894046 ] ]


    Simulating the process:
    [ 7, 2, 9, 4, 9, 0, 4, 8, 5, 4, 6, 4, 8, 9, 5, 7, 5, 0, 4, 5, 5, 6, 7, 7, 5 ]


  * For n = 100 (which was about the number of collectors card in my youth)

    This took 52.5s for rejection:
    expectation:
    [ [ 'v', 518.8331299999998 ],
      [ 't', 518.7377517639619 ],
      [ 't2', 518.7385850888091 ] ]


    This took 7.7s for SMC:
    [ [ 'v', 518.8375000000008 ],
      [ 't', 518.7377517639619 ],
      [ 't2', 518.7385850888091 ] ]


  * For n=50

    [ [ 'v', 225.49710000000002 ],
      [ 't', 224.96026691647117 ],
      [ 't2', 224.9619335164073 ] ]



  Cf coupon_collector.wppl, coupon_collector2.wppl and coupon_collector3.wppl
  for some other approaches.

*/

// From https://en.wikipedia.org/wiki/Coupon_collector%27s_problem
var eulers_gamma = 0.5772156649

var run = function(n) {
    console.log("\nn:",n)
    
    var model = function() {
        // var n = 9 // We want the n'th animal
        
        // "Theoretical" (see above)
        var t = sum(mapN(function(i) { return -(n/(i-n)) },n))
        
        // Theoretical value from https://en.wikipedia.org/wiki/Coupon_collector%27s_problem#cite_note-2
        // n * log n + n*eulers_gamma + 1/2
        var t2 = n * Math.log(n) + n *eulers_gamma + 1/2
        
        var vv = mapN(function(i) { return 1+geometric_exact_dist(1-i/n) },n)
        var v = sum(vv)
        
        return {
            v:v,
            t:t,
            t2:t2,
        }
    }
    
    // var d = Infer({method:"rejection",samples:100000},model)
    // var d = Infer({method:"MCMC",samples:100000},model)
    var d = Infer({method:"SMC",particles:10000},model) // <-- 
    // var d = Infer( {method:"enumerate",maxExecutions:100000},model) // Not good on small or large n
    // var d = Infer( {method:"enumerate",maxExecutions:1000000},model) // Slower but more exact
    // var d = Infer( {method:"enumerate"},model) // Javascript heap out of memory
    // display(d)
    
    exp_map(d,["v","t","t2"],["expectation"])

}

// run(7)
mapN(function(n) { run(n+1) }, 10)
// run(100)
// run(50)

console.log("\nSimulating the process:")
console.log(repeat(25, function() {return discrete(_.range(1,11)) }))
    
