/*
  Holmes Clock problem

  From "Introduction to Probability" av Grinstead & Snell, page 92
  """
  Mr. Wimply Dimple, one of London's most prestigious watch makers, has come to 
  Sherlock Holmes in a panic, having discovered that someone has been producing and 
  selling crude counterfeits of his best selling watch. The 16 counterfeits so far 
  discovered bear stamped numbers, all of which fall between 1 and 56, and Dimple is 
  anxious to know the extent of the forger's work. All present agree that it seems 
  reasonable to assume that the counterfeits thus far produced bear consecutive 
  numbers from 1 to whatever the total number is. "Chin up, Dimple," opines Dr. Watson.
  "I shouldn't worry overly much if I were you; the Maximum Likelihood Principle, 
  which estimates the total number as precisely that which gives the highest 
  probability for the series of numbers found, suggests that we guess 56 itself as the
  total. Thus, your forgers are not a big operation, and we shall have them safely 
  behind bars before your business suffers significantly." "Stuff, nonsense, and 
  bother your fancy principles, Watson," counters Holmes. "Anyone can see that, of 
  course, there must be quite a few more than 56 watches - why the odds of our having 
  discovered precisely the highest numbered watch made are laughably negligible. A 
  much better guess would be twice 56." 
  """

  Let's simulate this by an urn model were we have two urns:
  - urn 1 which have 56 balls numbered 1..56
  - urn 2 which have 2*56 = 112 balls numbered 1..112

  The probability of selecting each of the urns are 1/2.

  Using Bayes formula:

    p(ball from urn 1) = 0.5
    p(ball from urn 2) = 0.5
        
    p(number 56 is drawn|urn=urn 1) = 1/56
    p(nummer 56 is drawn|urn=urn 2) = 1/112

  What are the probabilities:
    p(urn 1|number 56 was drawn)
    p(urn 2|number 56 was drawn)
  ? 

  p(urn 1|number 56 was drawn) = p(urn 1 /\ number 56) / p(number 56)

         = p(number 56|urn 1) * p(urn 1)
           ------------------------------
           p(number 56|urn 1) * p(urn 1) + p(number 56|urn 2)*p(urn 2)

         = 1/56 * 0.5
           ----------
           1/56 * 0.5 + 1/112*0.5

         = (1/56 * 0.5)/(1/56 * 0.5 + 1/112*0.5) 
         = 0.6666667

  p(urn 2|number 56 was drawn) = p(urn 2 /\ number 56) / p(number 56)

         = p(number 56|urn 2) * p(urn 2)
           ------------------------------
           p(number 56|urn 1) * p(urn 1) + p(number 56|urn 2)*p(urn 2)

         = 1/112 * 0.5
           ----------
           1/56 * 0.5 + 1/112*0.5

         = (1/112 * 0.5)/(1/56 * 0.5 + 1/112*0.5) 
         = 0.3333333

  This model gives the following result which confirms the calculations (or the other way around :-)

  ball_obs: 56 num_balls1: 56 num_balls2: 112
  Marginals:
  urn
  Marginal:
    "urn1" : 0.6666666666666665
    "urn2" : 0.33333333333333354
  
  I.e. if we draw ball number 56 it's more likely that it was from urn number 1 (with balls 1..56) than 
  from urn 2 (with balls 1..112), 66% vs 33%
  
  Some more experiments were we increments the number of balls in urn2 
  ball_obs: 56 num_balls1: 56 num_balls2: 168
  Marginals:
  urn
  Marginal:
    "urn1" : 0.75
    "urn2" : 0.2500000000000001

  ball_obs: 56 num_balls1: 56 num_balls2: 224
  Marginals:
  urn
  Marginal:
    "urn1" : 0.7999999999999998
    "urn2" : 0.20000000000000012

  ball_obs: 56 num_balls1: 56 num_balls2: 280
  Marginals:
  urn
  Marginal:
    "urn1" : 0.8333333333333333
    "urn2" : 0.16666666666666674

  ball_obs: 56 num_balls1: 56 num_balls2: 336
  Marginals:
  urn
  Marginal:
    "urn1" : 0.8571428571428571
    "urn2" : 0.1428571428571429

  ball_obs: 56 num_balls1: 56 num_balls2: 392
  Marginals:
  urn
  Marginal:
    "urn1" : 0.8749999999999999
    "urn2" : 0.12500000000000008

  ball_obs: 56 num_balls1: 56 num_balls2: 448
  Marginals:
  urn
  Marginal:
    "urn1" : 0.8888888888888888
    "urn2" : 0.11111111111111119

  ball_obs: 56 num_balls1: 56 num_balls2: 504
  Marginals:
  urn
  Marginal:
    "urn1" : 0.8999999999999999
    "urn2" : 0.10000000000000002

  ball_obs: 56 num_balls1: 56 num_balls2: 560
  Marginals:
  urn
  Marginal:
    "urn1" : 0.9090909090909091
    "urn2" : 0.09090909090909098



  (This is a port of my Turing.jl model holmes_clock_problem.jl)

*/

var run = function(ball_obs, num_balls1, num_balls2) {
    console.log("\nball_obs:",ball_obs, "num_balls1:",num_balls1, "num_balls2:",num_balls2)
    var model = function() {
        // var ball_obs = 56 // The observed ball
        // var num_balls1 = 56
        // var num_balls2 = 112
        
        var urn1 = 0
        var urn2 = 1 
        
        var urn = categorical({ps:[0.5,0.5],vs:["urn1","urn2"]})
        var ball = urn == "urn1" ? 1+randomInteger(num_balls1) : 1+randomInteger(num_balls2)
        
        condition(ball == ball_obs)
        
        return {
            urn:urn,
            // ball:ball
        }

    }
    
    var d = Infer({method:"enumerate"},model)   
    exp_map(d,["urn"],["marginals"])

    
}

var num_balls1 = 56
var num_balls2 = 112
var ball_obs = 56
console.log("Original problem:")
run(ball_obs,num_balls1,num_balls2)

console.log("\nSome more experiments:")
var tt = mapN(function(i) {
    run(ball_obs,num_balls1,56*(i+3))
},8)
