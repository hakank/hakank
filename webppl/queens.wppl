/*
   N-queens problem in WebPPL

   This model use the standard formulation of the n-queens problem.

   * Three separate loops 
     Using method:enumerate (i.e. exact solutions) for different Ns
   
     N    #sols  time
     --------------------------
     2    0      -
     3    0      -
     4    2      1.06s
     5   10      1.15s       
     6    4      2.1s
     7   40      21.2s
     8   92      >8min

   * Using method:"rejection"
     N    #sols  time
     --------------------------
     2    0      -
     3    0      -
     4    2      1.4s
     5   10      2.1s
     6    4     45.3s 
     7   40     >to slow 
     8   92      

     Well, using probabilistic programming for this problem is 
     not the best choice. :-) :-)

   * Later: 
     Combining all three constraints into one loop is quite faster.
     
     Using enumerate:
     N    #sols  time
     --------------------------
     2    0      -
     3    0      -
     4    2      1.6s
     5   10      1.8s       
     6    4      2.5s
     7   40     19.9s 
     8   92     531.43s 


*/

var all_different = function(a,n) {
    mapN(function(i) {
        console.log("i",i)
        mapN(function(j) {
            console.log("i",i,"j",j)
            if (i != j) {
                condition(a[i] != a[j])
            }
            },i)
    },n);
}

var model = function() {
    var n = 4;

    var queen = mem(function(i) {
        return randomInteger(n);
    })

    var queens = mapN(function(i) { return queen(i) },n);

    // all_different(queen,n);

    mapN(function(i) {
        mapN(function(j) {
            condition( queen(i) != queen(j)
                       &&
                       queen(i)+i != queen(j)+j
                       &&
                       queen(i)-i != queen(j)-j
                     ) 
        },i)
    },n);
    
    return {
        queens:queens,
    }

}

// var d = Infer({method:"enumerate"},model);
// exp_map(d,["queens"]);
// var m = marginalize(d, "queens");
// console.log("#solutions",m.supp.length)


/*
  Another approach: Using 3 all_different 
  (the standard constraint programm approach)

  No, this does not work...

*/
var model2 = function() {
    var n = 4;

    var queen = mem(function(i) {
        return randomInteger(n);
    })

    var queens = mapN(function(i) { return queen(i) },n);

    all_different(queen,n)
    all_different(mapN(function(i) { queen(i)+i},n),n)
    all_different(mapN(function(i) { queen(i)-i},n),n)

    return {
        queens:queens,
    }

}

console.log("\nModel 2")
var d2 = Infer({method:"enumerate"},model2);
exp_map(d2,["queens"]);
var m2 = marginalize(d2, "queens");
console.log("#solutions",m2.supp.length)
