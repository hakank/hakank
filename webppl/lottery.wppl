/*
  From Mathematica (BernoulliDistribution)
  """
  A lottery sells 10 tickets for $1 per ticket. Each time there 
  is only one winning ticket. A gambler has $5 to spend. Find his probability of 
  winning if he buys 5 tickets in 5 different lotteries:
    D = ProductDistribution[{BernoulliDistribution[1/10], 5}];
    Probability[1 <= x + y + u + v + w, {x, y, u, v, w} -> D]
    ->
    40951/100000 (0.40951)

  His probability of winning is greater if he buys 5 tickets in the same lottery:
    PDF[HypergeometricDistribution[5, 1, 10], 1]
    -> 1/2

  """

  expectation:
  [ [ 'p_different_lotteries', 0.40951000000000015 ],
    [ 'p_same_lottery', 0.4999999999999999 ] ]


*/

// Hypergeometric (see hypergemetric_dist.wppl)
// What is the probability that we draw exactly k "success" objects
// of the n drawn objects of total N objects where there are in total
// K "success" objects
//
// k: number of successes we want to check
// N: total number of objects
// K: total number of success objects
// n: number of draws
//
var hypergeometric1 = function(k,N,K,n,count) {
    if (n==0 || K<= 0) {
        return count;
    } else {
        // we have K successes left and N objects left
        var p = K/N; // probability of drawing a success object
        if (flip(p)) {
            // We drew a success:
            // - decrement the total objects (N)
            // - decrement the number of "success" objects (K)
            // - decrement the number of drawn objects (n)
            // - increment the number of successful draws (count)
            return hypergeometric1(k,N-1,K-1,n-1,count+1);
        } else {
            // We drew a failure:
            // - decrement the total objects (N)
            // - decrement the number of drawn objects (n)
            return hypergeometric1(k,N-1,K,n-1,count);
        }
    }
}

var hypergeometric = function(k,N,K,n) {
    var res = hypergeometric1(k,N,K,n,0);
    return res == k;
}

var model = function() {
    var n = 5
    var win = mapN(function(i) { return flip(1/10) }, n)

    var p_different_lotteries = 1 <= sum(win)
    var p_same_lottery = hypergeometric(1,10,1,5)
    
    return {
        p_different_lotteries:p_different_lotteries,
        p_same_lottery:p_same_lottery
    }
}

var d = Enumerate(model)
display(d)

exp_map(d,["p_different_lotteries","p_same_lottery"])
