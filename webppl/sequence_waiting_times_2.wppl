/*
   Sequence waiting times between patterns.

   From 
   Gunnar Blom, Lars Holst, Dennis Sandell:
   "Problems and Snapshots from the World of Probability"
   Page 4ff, Problem 1.4 Patterns I, (Part Problem 2)

   Problem: Waiting time betweem patterns (coin flipping)
   
   What is the waiting time for the patterns [0,1] in a coin 
   flipping sequence given that we start the sequence with [0,1]
   ? 
   What is the waiting time for the pattern [1,1] if we start 
   with the pattern [1,1]?

   Cf sequence_waiting_times_1.wppl

   In this version we will start and end with the same pattern.

   Answer: The waiting times are the same as if we start
   with an empty sequence:
     * waiting time for [0,1] ... [0,1] = 4
     * waiting time for [1,1] ... [1,1] = 6

 
   This model verifies this result.   
Pattern:  [ 0, 1 ]
Marginals:
len
Marginal:
    4 : 0.2509
    5 : 0.249
    6 : 0.18419999999999997
    7 : 0.12159999999999999
    8 : 0.07870000000000003
    9 : 0.04729999999999998
    10 : 0.029800000000000004
    11 : 0.014900000000000002
    12 : 0.0103
    13 : 0.0056000000000000025
    14 : 0.0033000000000000017
    15 : 0.0019000000000000013
    16 : 0.0014999999999999994
    17 : 0.0004000000000000001
    18 : 0.0002000000000000002
    20 : 0.00010000000000000009
    21 : 0.00010000000000000009
    23 : 0.00010000000000000009
    28 : 0.00010000000000000009

expectation:
[ [ 'len', 6.036900000000001 ] ]

MAP:
[ [ 'len', { val: 4, score: -1.3827008256097604 } ] ]


Pattern:  [ 1, 1 ]
Marginals:
len
Marginal:
    3 : 0.4962000000000001
    5 : 0.12480000000000004
    7 : 0.06640000000000001
    6 : 0.06340000000000001
    8 : 0.04850000000000001
    9 : 0.03850000000000001
    10 : 0.027900000000000008
    11 : 0.02430000000000003
    12 : 0.018400000000000014
    13 : 0.01549999999999999
    14 : 0.014200000000000015
    15 : 0.011599999999999989
    16 : 0.00959999999999999
    17 : 0.007199999999999994
    18 : 0.006299999999999994
    19 : 0.005199999999999999
    20 : 0.004799999999999999
    21 : 0.003500000000000004
    23 : 0.0023999999999999994
    25 : 0.0023
    22 : 0.0022000000000000006
    24 : 0.0013000000000000006
    26 : 0.0012000000000000005
    28 : 0.001000000000000001
    27 : 0.0006000000000000003
    29 : 0.0005000000000000001
    30 : 0.0004000000000000001
    33 : 0.0003000000000000001
    34 : 0.0003000000000000001
    35 : 0.0003000000000000001
    36 : 0.0002000000000000002
    38 : 0.0002000000000000002
    37 : 0.00010000000000000009
    39 : 0.00010000000000000009
    40 : 0.00010000000000000009
    50 : 0.00010000000000000009
    54 : 0.00010000000000000009

expectation:
(node:16410) [DEP0079] DeprecationWarning: Custom inspection function on Objects via .inspect() is deprecated
[ [ 'len', 6.053000000000001 ] ]

MAP:
[ [ 'len', { val: 3, score: -0.7007762077244363 } ] ]

*/


//
// Show the distribution and expected waiting time for
// finding the pattern <pattern> in a coin flip sequence.
//
var findPattern = function(pattern) {
    console.log("\n\nPattern: ", pattern);
    
    var model = function() {
        var patternLen = pattern.length;
        
        var flipSequence = function(a) {
            var len = a.length;
            if (len > patternLen && _.isEqual(a.slice(len-patternLen),pattern)) {
                return a;
            } else {
                return flipSequence(a.concat(flip() ? 1 : 0));
            }
        }
        
        var a = flipSequence(pattern);
        
        return {
            a:a,
            len:a.length,
        }

    }

    // var d = Infer(model);
    // var d = Infer({method:"enumerate"},model); // JavaScript heap out of memory
    // var d = Infer({method:"enumerate",maxExecutions:100000},model);
    var d = Infer({method:"rejection",samples:10000},model);
    // var d = Infer({method:"MCMC",samples:10000},model);
    // display(d);
    exp_map(d,["len"]);
        
}

findPattern([0,1]); // Waiting time: 4

findPattern([1,1]); // Longer waiting time: 6

// findPattern([1,1,1]);






