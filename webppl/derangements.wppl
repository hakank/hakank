/*

  From http://rosettacode.org/wiki/Permutations/Derangements
  """
  Permutations/Derangements
  A derangement is a permutation of the order of distinct items in which 
  no item appears in its original place.

  For example, the only two derangements of the three items 
    (0, 1, 2) are (1, 2, 0), and (2, 0, 1).
  
  The number of derangements of n distinct items is known as the subfactorial of n, 
  sometimes written as !n. There are various ways to calculate !n.
  ...
  """

  For different n:
  * n = 1
total
Marginal:
    1 : 1
totalIs0
Marginal:
    false : 1


  * n = 2
total
Marginal:
    0 : 0.5
    2 : 0.5
totalIs0
Marginal:
    false : 0.5
    true : 0.5


  * n = 3
total
Marginal:
    1 : 0.5
    0 : 0.33333333333333337
    3 : 0.16666666666666669
totalIs0
Marginal:
    false : 0.6666666666666666
    true : 0.33333333333333337

  * n = 4
total
Marginal:
    0 : 0.375
    1 : 0.33333333333333337
    2 : 0.24999999999999994
    4 : 0.04166666666666666
totalIs0
Marginal:
    false : 0.625
    true : 0.375

  * n = 5
total
Marginal:
    1 : 0.3749999999999999
    0 : 0.3666666666666667
    2 : 0.16666666666666669
    3 : 0.0833333333333334
    5 : 0.008333333333333342
totalIs0
Marginal:
    false : 0.6333333333333333
    true : 0.3666666666666667

  * n = 6
total
Marginal:
    0 : 0.36805555555555536
    1 : 0.3666666666666665
    2 : 0.1875000000000001
    3 : 0.05555555555555574
    4 : 0.02083333333333346
    6 : 0.0013888888888888948
totalIs0
Marginal:
    false : 0.6319444444444446
    true : 0.36805555555555536

  * n = 7 (this takes 33s using method:enumerate)
total
Marginal:
    1 : 0.36805555555555636
    0 : 0.36785714285714366
    2 : 0.18333333333333243
    3 : 0.06249999999999937
    4 : 0.013888888888888803
    5 : 0.004166666666666648
    7 : 0.00019841269841269727
totalIs0
Marginal:
    false : 0.6321428571428563
    true : 0.36785714285714366


  Note: 1/exp(1) is 0.36787944117144232160
  (Mathematica N[1/Exp[1],20] -> 0.36787944117144232160)

*/

var model = function() {

    var n = 8;

    var p = mem(function(i) {
        return randomInteger(n);
    })

    var seq = mapN(function(i) { return p(i); },n);
    
    // How many are in the i'th position
    var total = sum(map(function(i) { return i==p(i); },seq));
        
    // Ensure unicity. 
    mapN(function(i) {
        sum(mapN(
            function(j) {
                if (i != j) {
                    condition(p(i) != p(j))
                }
            },
            i)
           )
    },n);
    

    // condition(total == 0);
    
    return {
        // seq:seq,
        // seqTotal:[seq,total],
        total:total,
        totalIs0:total==0,
    }

}

var d = Infer({method:"enumerate"},model);
// display(d);

exp_map_all(d);

