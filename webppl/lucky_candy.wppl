/*

  Lucky candy in WebPPL

  From https://brainstellar.com/puzzles/probability/5
  """
  Lucky Candy

  How do you place 50 good candies and 50 rotten candies in two boxes such that if 
  you choose a box at random and take out a candy at random, it better be good!

  We need to maximize the probability of getting a good candy when selecting a random 
  box and a random candy from it.

  ...

  Answer: 
  Place 1 good candy in one box and all the remaining (49 good and 50 rotten candies) in the second box.

  Solution:
  Place 1 good candy in one box and all remaining (49 good and 50 rotten candies) in the second box.
    (1/2)*1 + (1/2)*(49/99)=74.74%
  """

  This is a port of my Racket/Gamble model gamble_lucky_candy.rkt

  Here we explicitly check all combinations of 5 good/5 bad candies and see which has the optimal number of
  successes. This simplification is quite faster than using 50/50 candies: 1.8s vs 6.1s (using enumerate).

  Below are all experiments. The two optimal one are
    - obs-num1-good: 1 obs-num1-bad: 0
    - obs-num1-good: 4 obs-num1-bad: 5  (i.e. box 2 has 1 good and 0 bad)
  which yields a probability 0.7222222222222222 to get a good candy.

  All other combinations of good/bad candies in box1 are worse.

  The corresponding probabilities using the  equation above: 
    (1/2)*1+(1/2)*(4/9) = ~0.72222222222222222222
  which seems to confirm that the model is correct...

  Fhe full test with 50/50 candies give the following probabilities (it takes about 6.1s)
     true: 74/99 (0.7474747474747475)
     false: 25/99 (0.25252525252525254)
  which is the same as the answer in the problem statement above.

  Note: The first and last runs, those with 0 candies in box1 or box2 includes the "false" result (to 
  overcome division by 0)

[ 'obs_box1_good', 0, 'obs_box1_bad', 0 ]
Marginals:
p
Marginal:
    false : 0.75
    true : 0.24999999999999994

expectation:
[ [ 'p', 0.24999999999999994 ] ]

[ 'obs_box1_good', 1, 'obs_box1_bad', 0 ]
Marginals:
p
Marginal:
    true : 0.7222222222222221
    false : 0.27777777777777785

expectation:
[ [ 'p', 0.7222222222222221 ] ]

[ 'obs_box1_good', 2, 'obs_box1_bad', 0 ]
Marginals:
p
Marginal:
    true : 0.6874999999999998
    false : 0.3125000000000002

expectation:
[ [ 'p', 0.6874999999999998 ] ]

[ 'obs_box1_good', 3, 'obs_box1_bad', 0 ]
Marginals:
p
Marginal:
    true : 0.6428571428571426
    false : 0.35714285714285743

expectation:
[ [ 'p', 0.6428571428571426 ] ]

[ 'obs_box1_good', 4, 'obs_box1_bad', 0 ]
Marginals:
p
Marginal:
    true : 0.5833333333333334
    false : 0.4166666666666667

expectation:
[ [ 'p', 0.5833333333333334 ] ]

[ 'obs_box1_good', 5, 'obs_box1_bad', 0 ]
Marginals:
p
Marginal:
    true : 0.5
    false : 0.5

expectation:
[ [ 'p', 0.5 ] ]

[ 'obs_box1_good', 0, 'obs_box1_bad', 1 ]
Marginals:
p
Marginal:
    false : 0.7222222222222221
    true : 0.27777777777777785

expectation:
[ [ 'p', 0.27777777777777785 ] ]

[ 'obs_box1_good', 1, 'obs_box1_bad', 1 ]
Marginals:
p
Marginal:
    true : 0.5
    false : 0.5

expectation:
[ [ 'p', 0.5 ] ]

[ 'obs_box1_good', 2, 'obs_box1_bad', 1 ]
Marginals:
p
Marginal:
    true : 0.5476190476190477
    false : 0.45238095238095233

expectation:
[ [ 'p', 0.5476190476190477 ] ]

[ 'obs_box1_good', 3, 'obs_box1_bad', 1 ]
Marginals:
p
Marginal:
    true : 0.5416666666666665
    false : 0.4583333333333334

expectation:
[ [ 'p', 0.5416666666666665 ] ]

[ 'obs_box1_good', 4, 'obs_box1_bad', 1 ]
Marginals:
p
Marginal:
    true : 0.5
    false : 0.5

expectation:
[ [ 'p', 0.5 ] ]

[ 'obs_box1_good', 5, 'obs_box1_bad', 1 ]
Marginals:
p
Marginal:
    false : 0.5833333333333334
    true : 0.4166666666666667

expectation:
[ [ 'p', 0.4166666666666667 ] ]

[ 'obs_box1_good', 0, 'obs_box1_bad', 2 ]
Marginals:
p
Marginal:
    false : 0.6874999999999998
    true : 0.3125000000000002

expectation:
[ [ 'p', 0.3125000000000002 ] ]

[ 'obs_box1_good', 1, 'obs_box1_bad', 2 ]
Marginals:
p
Marginal:
    false : 0.5476190476190477
    true : 0.45238095238095233

expectation:
[ [ 'p', 0.45238095238095233 ] ]

[ 'obs_box1_good', 2, 'obs_box1_bad', 2 ]
Marginals:
p
Marginal:
    true : 0.5
    false : 0.5

expectation:
[ [ 'p', 0.5 ] ]

[ 'obs_box1_good', 3, 'obs_box1_bad', 2 ]
Marginals:
p
Marginal:
    true : 0.5
    false : 0.5

expectation:
[ [ 'p', 0.5 ] ]

[ 'obs_box1_good', 4, 'obs_box1_bad', 2 ]
Marginals:
p
Marginal:
    false : 0.5416666666666665
    true : 0.4583333333333334

expectation:
[ [ 'p', 0.4583333333333334 ] ]

[ 'obs_box1_good', 5, 'obs_box1_bad', 2 ]
Marginals:
p
Marginal:
    false : 0.6428571428571426
    true : 0.35714285714285743

expectation:
[ [ 'p', 0.35714285714285743 ] ]

[ 'obs_box1_good', 0, 'obs_box1_bad', 3 ]
Marginals:
p
Marginal:
    false : 0.6428571428571426
    true : 0.35714285714285743

expectation:
[ [ 'p', 0.35714285714285743 ] ]

[ 'obs_box1_good', 1, 'obs_box1_bad', 3 ]
Marginals:
p
Marginal:
    false : 0.5416666666666665
    true : 0.4583333333333334

expectation:
[ [ 'p', 0.4583333333333334 ] ]

[ 'obs_box1_good', 2, 'obs_box1_bad', 3 ]
Marginals:
p
Marginal:
    true : 0.5
    false : 0.5

expectation:
[ [ 'p', 0.5 ] ]

[ 'obs_box1_good', 3, 'obs_box1_bad', 3 ]
Marginals:
p
Marginal:
    true : 0.5
    false : 0.5

expectation:
[ [ 'p', 0.5 ] ]

[ 'obs_box1_good', 4, 'obs_box1_bad', 3 ]
Marginals:
p
Marginal:
    false : 0.5476190476190477
    true : 0.45238095238095233

expectation:
[ [ 'p', 0.45238095238095233 ] ]

[ 'obs_box1_good', 5, 'obs_box1_bad', 3 ]
Marginals:
p
Marginal:
    false : 0.6874999999999998
    true : 0.3125000000000002

expectation:
[ [ 'p', 0.3125000000000002 ] ]

[ 'obs_box1_good', 0, 'obs_box1_bad', 4 ]
Marginals:
p
Marginal:
    false : 0.5833333333333334
    true : 0.4166666666666667

expectation:
[ [ 'p', 0.4166666666666667 ] ]

[ 'obs_box1_good', 1, 'obs_box1_bad', 4 ]
Marginals:
p
Marginal:
    true : 0.5
    false : 0.5

expectation:
[ [ 'p', 0.5 ] ]

[ 'obs_box1_good', 2, 'obs_box1_bad', 4 ]
Marginals:
p
Marginal:
    true : 0.5416666666666665
    false : 0.4583333333333334

expectation:
[ [ 'p', 0.5416666666666665 ] ]

[ 'obs_box1_good', 3, 'obs_box1_bad', 4 ]
Marginals:
p
Marginal:
    true : 0.5476190476190477
    false : 0.45238095238095233

expectation:
[ [ 'p', 0.5476190476190477 ] ]

[ 'obs_box1_good', 4, 'obs_box1_bad', 4 ]
Marginals:
p
Marginal:
    true : 0.5
    false : 0.5

expectation:
[ [ 'p', 0.5 ] ]

[ 'obs_box1_good', 5, 'obs_box1_bad', 4 ]
Marginals:
p
Marginal:
    false : 0.7222222222222221
    true : 0.27777777777777785

expectation:
[ [ 'p', 0.27777777777777785 ] ]

[ 'obs_box1_good', 0, 'obs_box1_bad', 5 ]
Marginals:
p
Marginal:
    false : 0.5
    true : 0.5

expectation:
[ [ 'p', 0.5 ] ]

[ 'obs_box1_good', 1, 'obs_box1_bad', 5 ]
Marginals:
p
Marginal:
    true : 0.5833333333333334
    false : 0.4166666666666667

expectation:
[ [ 'p', 0.5833333333333334 ] ]

[ 'obs_box1_good', 2, 'obs_box1_bad', 5 ]
Marginals:
p
Marginal:
    true : 0.6428571428571426
    false : 0.35714285714285743

expectation:
[ [ 'p', 0.6428571428571426 ] ]

[ 'obs_box1_good', 3, 'obs_box1_bad', 5 ]
Marginals:
p
Marginal:
    true : 0.6874999999999998
    false : 0.3125000000000002

expectation:
[ [ 'p', 0.6874999999999998 ] ]

[ 'obs_box1_good', 4, 'obs_box1_bad', 5 ]
Marginals:
p
Marginal:
    true : 0.7222222222222221
    false : 0.27777777777777785

expectation:
[ [ 'p', 0.7222222222222221 ] ]

[ 'obs_box1_good', 5, 'obs_box1_bad', 5 ]
Marginals:
p
Marginal:
    false : 0.75
    true : 0.24999999999999994

expectation:
[ [ 'p', 0.24999999999999994 ] ]


  This program was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my WebPPL page: http://www.hakank.org/webppl/

*/

var run = function(n, obs_box1_good, obs_box1_bad) {
    console.log(["obs_box1_good",obs_box1_good,"obs_box1_bad",obs_box1_bad])
    
    var model = function() {
        var num_good = n
        var num_bad = n
        
        var box1_good = randomInteger(num_good+1)
        var box1_bad  = randomInteger(num_bad+1)
        var box2_good = randomInteger(num_good+1)
        var box2_bad  = randomInteger(num_bad+1)
        
        var box1_total = box1_good + box1_bad
        var box2_total = box2_good + box2_bad
       
        condition(box1_good + box2_good == num_good)
        condition(box1_bad + box2_bad == num_bad)    
        
        // The test
        condition(box1_good == obs_box1_good)
        condition(box1_bad == obs_box1_bad)
        
        var box = uniformDraw(["box1","box2"])

        // Fixing the 0 probability issue: If the total is 0, then return false        
        var pick_one = (box == "box1") ?
            (box1_total > 0 ? categorical({ps:[box1_good / box1_total, box1_bad / box1_total], vs:["good","bad"]}) : false)
            :
            (box2_total > 0 ? categorical({ps:[box2_good / box2_total, box2_bad / box2_total], vs:["good","bad"]}) : false)
        
        var p = pick_one == "good"
        
        return {
            // box1_total:box1_total,
            // box2_total:box2_total,
            // box1_good:box1_good,
            // box1_bad:box1_bad,
            // box2_good:box2_good,
            // box2_bad:box2_bad,
            // box:box,
            // pick_one:pick_one,
            p:p
        }
    }

    var d = Infer(model)
    // var d = Infer({method:"rejection",samples:1000},model)
    // var d = Infer({method:"SMC",particles:1000},model)
    // var d = Infer({method:"MCMC",kernel:"HMC",samples:1000},model)
    exp_map_all(d,["marginals","expectation"])

}

/*

[ 'obs_box1_good', 1, 'obs_box1_bad', 0 ]
Marginals:
p
Marginal:
    true : 0.7474747474747476
    false : 0.2525252525252523

expectation:
[ [ 'p', 0.7474747474747476 ] ]

This took 6.1s

*/
// run(50,1,0)

var n = 6
var t = mapN(function(box1_bad) {
    mapN(function(box1_good) {
        run(5,box1_good,box1_bad);
    },n)
},n)

