/*
  4 girls and 1 boy 

  From Statistics101
  """
  What is probability of selecting 4 girls and 1 boy,
  in any order, when selecting five students from any 
  25 girls and 25 boys? 
  (From Page 122ff in "Resampling Stats: The New Statistics").
  """

  Here are some different approaches.

  Model 1:
  Marginals:
  p
  Marginal:
    false : 0.854
    true : 0.14600000000000002
  num_girls
  Marginal:
    2 : 0.3312000000000001
    3 : 0.3238000000000001
    1 : 0.1488000000000001
    4 : 0.14600000000000005
    0 : 0.0251
    5 : 0.0251

  expectation:
  [ [ 'p', 0.14600000000000002 ],
    [ 'num_girls', 2.492100000000001 ] ]



  Model 1b:
  Marginals:
  p
  Marginal:
    false : 0.8449
    true : 0.15509999999999993
  num_girls
  Marginal:
    2 : 0.32730000000000004
    3 : 0.3198
    4 : 0.1551
    1 : 0.1452
    5 : 0.0273
    0 : 0.025300000000000003

  expectation:
  [ [ 'p', 0.15509999999999993 ], 
    [ 'num_girls', 2.5161 ] ]


  Model 2:
  Marginals:
  p
  Marginal:
    false : 0.8431000000000001
    true : 0.15689999999999998
  num_girls
  Marginal:
    3 : 0.3114
    2 : 0.305
    1 : 0.1658
    4 : 0.15689999999999998
    0 : 0.030499999999999996
    5 : 0.030400000000000007

  expectation:
  [ [ 'p', 0.15689999999999998 ], 
    [ 'num_girls', 2.4896 ] ]


*/



var model = function() {
    var n = 25 // n boys and n girls
    var m = 5 // pick m children
    var boys = repeat(n,function() { "boy"})
    var girls = repeat(n,function() { "girl"})
    var children = boys.concat(girls)
    var selected = draw_without_replacement2(m, children, [])

    // How many girls?
    var num_girls = sum(map(function(c) { c == "girl" ? 1 : 0}, selected))
    // 4 girls?
    var p = num_girls == 4
    
    return {
        selected:selected,
        num_girls:num_girls,
        p:p,
    }
}

console.log("Model 1:")
// var d = Infer(model)
// var d = Infer({method:"enumerate"},model) // To large for exact enumerate
// var d = Infer({method:"rejection",samples:10000},model)
var d = Infer({method:"SMC",particles:10000},model)
// display(d)

exp_map(d,["p","num_girls"])


/*
  This version uses the Javascript function shuffle() instead.

*/
var model1b = function() {
    var n = 25 // n boys and n girls
    var m = 5 // pick m children
    var boys = repeat(n,function() { "boy"})
    var girls = repeat(n,function() { "girl"})
    var selected = _.take(shuffle(boys.concat(girls)),m)

    // How many girls?
    var num_girls = sum(map(function(c) { c == "girl" ? 1 : 0}, selected))
    // 4 girls?
    var p = num_girls == 4
    
    return {
        selected:selected,
        num_girls:num_girls,
        p:p,
    }
}

console.log("\nModel 1b:")
// var d1b = Infer(model1b)
// var d1b = Infer({method:"enumerate"},model1b) // To large for exact enumerate
// var d1b = Infer({method:"rejection",samples:10000},model1b)
var d1b= Infer({method:"SMC",particles:10000},model1b)
// display(d1b)

exp_map(d1b,["p","num_girls"])


/*
  Alternative and simpler version.
*/
var model2 = function() {
    // 50 boys (0) and girls (1)
    var d = mapN(function() {return flip() },50)
    // How many girls?
    var num_girls = sum(mapN(function(i) { d[i] }, 5))
    // 4 girls?
    var p = num_girls == 4
    return {
        num_girls:num_girls,
        p:p,        
    }
}

console.log("\nModel 2:")
// var d2 = Infer(model2)
var d2 = Infer({method:"SMC",particles:10000},model2)
// display(d2)
exp_map(d2,["p","num_girls"])
