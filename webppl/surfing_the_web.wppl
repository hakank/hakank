/*
  From an exercise in the Wolfram U's Introduction to Probability
  """
  While surfing the web, you encounter ad A 7 times and ads B and C 3 times each. 
  How many arrangements are possible?
  """
  See comments here: 
  https://community.wolfram.com/groups/-/m/t/2848381
  
  The answer should be 
  In[1]:= 13!/(7!3!3!)
  Out[1]= 34320

  Using enumerate (and d.support().length to calculate the number of solutions):

  Number of different solutions (d.support().length): 34320

  This took 1min11s
  


  I asked GPT4 about this. It has a long explanation and then
  """
  Finally, we can compute the number of arrangements:

  C(13; 7, 3, 3) = 6,227,020,800 / (5,040 * 6 * 6) = 6,227,020,800 / 181,440 = 34,320

  There are 34,320 possible arrangements of encountering ad A 7 times and ads B and C 3 times 
  each while surfing the web.
  """

  How does GPT3.5 do on this?
  """
  ...
  Using this formula, the number of arrangements for encountering ad A 7 times and ads B and 
  C 3 times each is:

  (7 + 3 + 3) choose 7,3,3 = 13! / (7! * 3! * 3!) = 13,860,000 arrangements.
  """

  The formula is correct but the calculation is wrong. From Mathematica:
    In[1]:= 13! / (7! * 3! * 3!)
    Out[1]= 34320

    I asked GPT3.5 to try again and it gave the following guesses:
    18,564 
    3,003,600 
    24,860

    This shows that GPT4 is better of doing calculations than GPT3.5, and both GPT3.5 and GPT4 identified the
    correct approach for this problem... 

*/


var model = function() {
    var a = 7
    var b = 3
    var c = 3
    var n = a+b+c

    // Generate samples
    var v = mapN(function() {
        return categorical({ps:[a/n,b/n,c/n],vs:["a","b","c"],})
    },n)

    // Enforce the specific distribution of the characters
    var num_a = sum(map(function(v) {v == "a"}, v))
    var num_b = sum(map(function(v) {v == "b"}, v))
    var num_c = sum(map(function(v) {v == "c"}, v))
    condition(num_a == a && num_b == b && num_c == c)

    // This is not correct:
    // var cc = sort(Object.values(hakank_utils.collect(v)))
    // condition(_.isEqual(cc,[b,c,a]) )

    return {
        v:v
    }


}

// var d = Infer(model)
// var d = Infer({method:"rejection",samples:100},model)
var d = Infer({method:"enumerate",maxRuntimeInMS:500000}, model)
// console.log(d)
// exp_map_all(d);

console.log("Number of different solutions (d.support().length):",d.support().length)
