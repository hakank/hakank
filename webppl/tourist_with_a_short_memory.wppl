/*
   Tourist with a short memory

   From 
   Gunnar Blom, Lars Holst, Dennis Sandell:
   "Problems and Snapshots from the World of Probability"
   page 2, Problem 1.2

   A tourist wants to visits all the four cities, A, B, C, and D. 
   When he is in A he then visit the other cities (B, C, or D) 
   with equal probability, and the same for the other cities.
   Unfortunately, he don't remember which cities he has already visited
   so he always select the other 3 cities woth equal probability.

   How many cities will he visit until he had visited all four cities?

   The text state the "theoretical" expectation (geometry distribution) as:
   """
      E(N) = 1 + 1 + 3/2 + 3 = 13/2 [= 6.5]
   """

   This model agree with this.

   Method:rejection:
   Marginal:
    5 : 0.22170999999999985
    4 : 0.22138999999999986
    6 : 0.17383999999999988
    7 : 0.12416999999999988
    8 : 0.08497999999999994
    9 : 0.05753999999999995
    10 : 0.03805999999999996
    11 : 0.02626999999999998
    12 : 0.01727999999999999
    13 : 0.011779999999999987
    14 : 0.00736999999999999
    15 : 0.005239999999999993
    16 : 0.0035799999999999964
    17 : 0.0021799999999999975
    18 : 0.0015399999999999988
    19 : 0.0009899999999999987
    20 : 0.0006899999999999994
    21 : 0.0004899999999999997
    22 : 0.0002900000000000001
    23 : 0.00025
    24 : 0.0001299999999999999
    25 : 0.00007
    27 : 0.00005999999999999996
    28 : 0.000039999999999999996
    26 : 0.000029999999999999977
    29 : 0.000009999999999999999
    31 : 0.000009999999999999999
    35 : 0.000009999999999999999
  expectation:
[ [ 'len', 6.502319999999996 ] ]

  Theoretical: 6.5

*/

//
// The theoretical expectation according to the cited text.
//
var theoretical = function(numCities) {
    return 1 + (numCities-1)*sum(mapN(function(i) { return 1/(1+i) },numCities-1));
}
    
var numCities = 4;
var model = function() {
    var cities = _.range(numCities);

    var visitCities = function(a) {
        var len = a.length;
        if (_.uniq(a).length == numCities) {
            return a;
        } else if (len == 0) {
            return visitCities(a.concat(uniformDraw(cities)));
        } else {
            var lastCity = last(a);
            var nextCity = _.difference(cities,[lastCity]);
            return visitCities(a.concat(uniformDraw(nextCity)));
        }
    }

    var a = visitCities([]);
    
    return {
        // a:a,
        len:a.length,
    }
    
}


// var d = Infer(model);
// var d = Infer({method:"enumerate"},model); // JavaScript heap out of memory
// var d = Infer({method:"enumerate",maxExecutions:100000},model);
var d = Infer({method:"rejection",samples:100000},model);
// var d = Infer({method:"MCMC",samples:10000},model);
// display(d);


exp_map(d,["len"],["expectation","marginals"]);

console.log("\nTheoretical:", theoretical(numCities));
