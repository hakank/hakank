/*
  From Bar-Hillel & Falk "Some teasers concerning conditional probabilities" 
  """
  Problem 3:
  A deck of four cards consists of the ace of spades, the ace of clubs, the deuce of spades, 
  and the deuce of clubs. A hand of two cards is randomly dealt from this deck. What 
  is the probability that it contains both aces if we know it contains at least one?

  The answer to this problem is traditionally agreed upon to be l/S, following the reasoning 
  that five equiprobable hands are compatible with the conditioning event (only the double 
  deuce hand is ruled outj, and just one of these contains both aces.

  Now compare Problem 3 to the following: 

  Problem 4:
  Like Problem 3, but the question is: What is the probability that the hand contains 
  both aces if we know it contains the ace of spadesâ€™.
  """

  Here are the probability of 2 aces for different versions of conditions:

  * no condition: 0.16666666666666669

  * condition(num_aces >= 1): 0.20000000000000007
  * condition(count("AS",selected) == 1 || count("AC",selected) == 1): 0.20000000000000007

  * condition(count("AS",selected) == 1): 0.33333333333333337
  * condition(selected[0] == "AS"): 0.33333333333333337
  * condition(selected[0] == "AS" || selected[1] == "AS"): 0.33333333333333337

  Compare with:
  * two_children_problem.wppl
  * how_many_sons.wppl

*/

/*
  Model 1: condition(num_aces >= 1): 0.20000000000000007

  cards
  Marginal:
    ["AS","AC","2S","2C"] : 1
  selected
  Marginal:
    ["AS","AC"] : 0.10000000000000002
    ["AS","2S"] : 0.10000000000000002
    ["AS","2C"] : 0.10000000000000002
    ["AC","AS"] : 0.10000000000000002
    ["AC","2S"] : 0.10000000000000002
    ["AC","2C"] : 0.10000000000000002
    ["2S","AS"] : 0.10000000000000002
    ["2S","AC"] : 0.10000000000000002
    ["2C","AS"] : 0.10000000000000002
    ["2C","AC"] : 0.10000000000000002
  num_aces
  Marginal:
    1 : 0.8
    2 : 0.20000000000000007
  p
  Marginal:
    false : 0.8
    true : 0.20000000000000007

  expectation:
  [ [ 'cards', NaN ],
    [ 'selected', NaN ],
    [ 'num_aces', 1.2000000000000002 ],
    [ 'p', 0.20000000000000007 ] ]

*/
console.log("Model 1:")
var model = function() {
    var cards = ["AS","AC","2S","2C"]
    var selected = draw_without_replacement2(2,cards,[])

    var num_aces = count("AS",selected) + count("AC",selected)
    condition(num_aces >= 1)    
    var p = num_aces == 2

    return {
        cards:cards,
        selected:selected,
        num_aces:num_aces,
        p:p,
    }
}

var d = Infer(model)
exp_map_all(d)

/*
  For condition(count("AS",selected) == 1)    

  Model 2:
  Marginals:
  cards
  Marginal:
    ["AS","AC","2S","2C"] : 1
  selected
  Marginal:
    ["AS","AC"] : 0.16666666666666669
    ["AS","2S"] : 0.16666666666666669
    ["AS","2C"] : 0.16666666666666669
    ["AC","AS"] : 0.16666666666666669
    ["2S","AS"] : 0.16666666666666669
    ["2C","AS"] : 0.16666666666666669
  num_aces
  Marginal:
    1 : 0.6666666666666666
    2 : 0.33333333333333337
  p
  Marginal:
    false : 0.6666666666666666
    true : 0.33333333333333337

  expectation:
  [ [ 'cards', NaN ],
    [ 'selected', NaN ],
    [ 'num_aces', 1.3333333333333335 ],
    [ 'p', 0.33333333333333337 ] ]


 */
console.log("\nModel 2:")
var model2 = function() {
    var cards = ["AS","AC","2S","2C"]
    var selected = draw_without_replacement2(2,cards,[])

    var num_aces = count("AS",selected) + count("AC",selected)
    // condition(count("AS",selected) == 1)
    condition(selected[0] == "AS")
    // condition(selected[0] == "AS" || selected[1] == "AS")
    // condition(count("AS",selected) == 1 || count("AC",selected) == 1) // same as model 1
    
    var p = num_aces == 2

    return {
        cards:cards,
        selected:selected,
        num_aces:num_aces,
        p:p,
    }
}

var d2 = Infer(model2)
exp_map_all(d2)
