/*
  Poisson distribution recovering generated data
  
  data.length: 1000
  min: 8 mean: 20.044 max: 36
  Marginals:
  lambda
  Marginal:
    20 : 1
  post
  Marginal:
    18 : 0.101
    17 : 0.092
    19 : 0.07700000000000001
    20 : 0.07599999999999998
    23 : 0.071
    24 : 0.059000000000000004
    16 : 0.057999999999999996
    15 : 0.05
    25 : 0.040999999999999995
    26 : 0.038000000000000006
    14 : 0.037000000000000005
    13 : 0.026999999999999996
    12 : 0.023999999999999997
    27 : 0.023999999999999997
    29 : 0.011999999999999997
    11 : 0.009
    28 : 0.007999999999999997
    10 : 0.007999999999999997
    30 : 0.005999999999999998
    32 : 0.004000000000000002
    9 : 0.002999999999999999
    31 : 0.002999999999999999
    33 : 0.002999999999999999
    7 : 0.0010000000000000002
    8 : 0.0010000000000000002
    36 : 0.0010000000000000002
  p
  Marginal:
    false : 0.5640000000000001
    true : 0.43599999999999994

  expectation:
  [ [ 'lambda', 20 ],
    [ 'post', 19.807 ],
    [ 'p', 0.43599999999999994 ] ]

  MAP:
  [ [ 'lambda', { val: 20, score: 0 } ],
    [ 'post', { val: 18, score: -2.2926347621408776 } ],
    [ 'p', { val: false, score: -0.572701027484078 } ] ]


  Stat for v: lambda
  min: 20 mean: 20 max: 20 stdev: 0

  Stat for v: post
  min: 7 mean: 20.571428571428573 max: 36 stdev: 8.204652736747134

  Stat for v: p
  min: false mean: 0.5 max: true stdev: 0.5

  Credible interval for lambda (93%): [ 20, 20 ]
  Credible interval for post (93%): [ 12, 27 ]

  var lambda
  min: 20
  listMean: 20
  listVar: 0
  listStdev: 0
  max: 20
  Percentiles:
  [ [ 0, 20 ],
    [ 2.5, 20 ],
    [ 25, 20 ],
    [ 50, 20 ],
    [ 75, 20 ],
    [ 97.5, 20 ],
    [ 100, 20 ] ]
  Histogram:
  bins: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NaN: NaN ]

  var post
  min: 7
  listMean: 19.807
  listVar: 19.19575100000002
  listStdev: 4.381295584641604
  max: 36
  Percentiles:
  [ [ 0, 7 ],
    [ 2.5, 12 ],
    [ 25, 17 ],
    [ 50, 20 ],
    [ 75, 23 ],
    [ 97.5, 29 ],
    [ 100, 36 ] ]
  Histogram:
  bins: [ 1, 1, 3, 17, 24, 64, 50, 150, 101, 153, 84, 82, 130, 41, 62, 8, 18, 3, 7, 0, 1 ]

*/

var data = mapN(function(i) {
             return poisson(20)
           },1000)

// console.log("data:", data)
console.log("data.length:", data.length)
console.log("min:",_.min(data),"mean:",listMean(data),"max:",_.max(data))
// console.log("mean(data):",listMean(data))

var model = function() {

    var lambda = 1+randomInteger(100)
    
    mapIndexed(function(i,val) {
        // factor(y(i) == val ? 0 : -Infinity)
        // factor(poisson(lambda) == data[i] ? 0 : -100000)
        observe(Poisson({mu:lambda}),data[i])
    }, data)

    var post = poisson(lambda)
    var p = post > 20    
    
    return {
        lambda:lambda,
        post:post,
        p:p,
    }
    
}

// var d = Infer(model) // nope
// var d = Infer({method:"rejection",samples:1000},model) // very slow
var d = Infer({method:"SMC",particles:1000},model)
// var d = Infer({method:"MCMC",kernel:"HMC",samples:1000,burn:100,verbose:true},model)
// display(d)

exp_map(d,["lambda","post","p"])
console.log("\n")
stat2(d,"lambda")
stat2(d,"post")
stat2(d,"p")

console.log("\n")
showCredibleInterval(d,"lambda", 0.93)
showCredibleInterval(d,"post", 0.93)

var ps = [0,2.5,25,50,75,97.5,100]
show_stats(d,"lambda",ps)
show_stats(d,"post",ps)
