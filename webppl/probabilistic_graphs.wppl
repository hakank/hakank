/*
  Probabilistic graphs
  https://dtai.cs.kuleuven.be/problog/tutorial/basic/04_pgraph.html

  Cf ~/blog/probabilistic_graphs.blog

*/

/*
ProbLog model:

0.6::edge(1,2).
0.1::edge(1,3).
0.4::edge(2,5).
0.3::edge(2,6).
0.3::edge(3,4).
0.8::edge(4,5).
0.2::edge(5,6).

path(X,Y) :- edge(X,Y).
path(X,Y) :- edge(X,Z),
             Y \== Z,
         path(Z,Y).

query(path(1,5)).
query(path(1,6)).
query(path(5,2)).
*/

/* 
Results

ProbLog model
path(1,5): 0.25824    (i.e. 0->4)
path(1,6): 0.2167296  (i.e. 0->5(


BLOG model
Distribution of values for path(1, 2) 0->1
	true	0.6021000000000071
Distribution of values for path(1, 5) 0->4
	true	0.2578699999999918
Distribution of values for path(1, 6) 0->5
	true	0.21718999999999142
Distribution of values for path(5, 2) 4->1
	true	0.0

This webppl model:

method:"rejection",samples:100000 (7.9s)
expectation:
[ [ 'path01', 0.59814 ],
  [ 'path04', 0.25801999999999997 ],
  [ 'path05', 0.21770000000000003 ],
  [ 'path41', 0 ] ]



method:"MCMC",kernel:"MH", samples:100000 (2.7s)
expectation:
[ [ 'path01', 0.59582 ],
  [ 'path04', 0.25827000000000006 ],
  [ 'path05', 0.21725000000000005 ],
  [ 'path41', 0 ] ]



*/

var model = function() {
    var edges = _.range(6);

    var m = [
        // 0    1    2    3    4    5 
        [0.0, 0.6, 0.1, 0.0, 0.0, 0.0],  // 0
        [0.0, 0.0, 0.0, 0.0, 0.4, 0.3],  // 1
        [0.0, 0.0, 0.0, 0.3, 0.0, 0.0],  // 2
        [0.0, 0.0, 0.0, 0.0, 0.8, 0.0],  // 3
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.2],  // 4
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]   // 5
        
    ];
    
    // Note: The graph is acyclic, and it works in BLOG
    // When adding an edge (e.g. 6->1) which makes a cyclic graph, then BLOG complains...
    var edge = mem(function(t1, t2) {
        return flip(m[t1][t2]);
    });
    
    var path1 = (function(t1, t2) {
        if (edge(t1,t2)) {
            return true;
        } else {
            if (
                any(function(t3) { t2 != t3 && t1 != t3 && edge(t1,t3) && path1(t3,t2)},edges)
            ) {
                return true;
            } else {
                return false;
            }
        }
    })

    var path = mem(function(t1,t2) { return path1(t1,t2); });
    
    return {
        path01:path(0,1),
        path04:path(0,4),
        path05:path(0,5),
        path41:path(4,1)
    }
}

// var d = Infer({method:"enumerate",maxExecutions:100},model); // strange loop!
// var d = Infer(model);
// var d = Infer({method:"rejection",samples:100000},model);
var d = Infer({method:"MCMC",kernel:"MH",samples:100000,burn:10000},model);
// display(d);


exp_map(d,["path01","path04","path05","path41"],["expectation"]);

