/*
  webppl/tests/test-data/deterministic/models/webpplEval.wppl
  """
  webpplEval('1+1'),
  Enumerate(function() { return webpplEval('1+1'); }).support()
  """

  webpplEval can be used for test small snippets, especially discrete stuff.

  Note: the argument is 
      ...   --- --program " the program "


  Here are some examples.

  $ time webppl  --require webppl-viz --require hakank_utils eval_program.wppl -- --program "flip(0.5)+flip(0.5)"

  Marginal:
    1 : 0.49999999999999994
    0 : 0.24999999999999994
    2 : 0.24999999999999994


  program: var a = flip(0.5); var b = flip(0.5); var c = a+b; [a,b,c]
  Marginal:
    [false,false,0] : 0.24999999999999994
    [false,true,1] : 0.24999999999999994
    [true,false,1] : 0.24999999999999994
    [true,true,2] : 0.24999999999999994


  program: var a = flip(0.5); var b = flip(0.5); var c = a+b; condition(c == 1); [a,b,c]
  Marginal:
    [false,true,1] : 0.5
    [true,false,1] : 0.5


  program: var a = binomial(0.9,10); condition(a > 4); [a]
  Marginal:
    [9] : 0.3874774104390348
    [10] : 0.3487296693951313
    [8] : 0.1937387052195173
    [7] : 0.057404060805782926
    [6] : 0.011161900712235561
    [5] : 0.001488253428298073

  Note: The program "eval_program" is a wrapper for this model.

*/

var program = argv.program
console.log("program:",program)

var d = Infer(function() {
    return webpplEval(program)
})

display(d)

exp_map_all(d)

// var support = d.support()
// console.log(support[0])
// var len = support[0].length
// console.log("len:",len)
// console.log(marginalize(d, 0))
