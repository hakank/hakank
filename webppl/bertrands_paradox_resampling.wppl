/*
  Bertrand's paradox (boxes) 

  From Julian Simon "Resampling Statistics", page 80ff
  """
  A Spanish treasure fleet of three ships was sunk at sea
  off Mexico. One ship had a trunk of gold forward and
  another aft, another ship had a trunk of gold forward
  and a trunk of silver aft, while a third ship had a trunk
  of silver forward and another trunk of silver aft. Divers
  just found one of the ships and a trunk of silver in it.
  They are now taking bets about whether the other trunk
  found on the same ship will contain silver or gold. What
  are fair odds?

  
  (This is a restatement of a problem that Joseph Bertrand posed
  early in the 19th century.) In the Goldberg variation:

  Three identical boxes each contain two coins. In one
  box both are pennies, in the second both are nickels,
  and in the third there is one penny and one nickel.
  A man chooses a box at random and takes out a coin.
  If the coin is a penny, what is the probability that the
  other coin in the box is also a penny?
  """

  Here are two different approaches:
  - model 1: resampling approach
  - model 2: "pure" PPL

  Cf bertrands_paradox.wppl for another approach using "pure" PPL.
  IMHO, model 2 below is a little neater.
*/

/*
  Model 1: Using global array scores:
  scores_len: 49987 scores_sum: 33233 z: 0.6648328565427011

*/
console.log("Model 1: Using global array scores:")
var scores = []
var model1 = function() {
    var gg = ["g","g"] // gold, gold
    var gs = ["g","s"] // gold, silver
    var ss = ["s","s"] // silver, silver

    var ships = [gg,gs,ss]

    // Pick a ship
    var ship = randomInteger(3)

    // If we pick ship 0: then the other must be gold
    // If we pick ship 1: then we pick gold and thus then the other must be silver
    // If we pick ship 2: then it's not interesting (both are silver)
    // Note: This does not work with Enumerate
    if (ship == 0) {
        // We pick ship 0: both are gold
        scores.push(1)
        
    } else if (ship == 1 && uniformDraw(ships[ship]) == "g") {
        // We pick ship 1 and picked gold -> the other is silver: no hit
        scores.push(0)
    }

    return {
        ship:ship,
    }
    
}
// var d1 = Infer(model1)
var d1 = Infer({method:"rejection",samples:100000},model1)
// exp_map_all(d1)

var scores_len = scores.length
var scores_sum = sum(scores)
console.log("scores_len:",scores_len, "scores_sum:",scores_sum,"z:",scores_sum/scores_len)


/*
  Model 2: Using Enumerate
  Marginals:
  ship
  Marginal:
    0 : 0.6666666666666666
    1 : 0.3333333333333333
  z
  Marginal:
    true : 0.6666666666666666
    false : 0.3333333333333333

*/
console.log("\nModel 2: Using Enumerate")
var model2 = function() {
    var gg = ["g","g"] // gold, gold
    var gs = ["g","s"] // gold, silver
    var ss = ["s","s"] // silver, silver

    var ships = [gg,gs,ss]

    var ship = randomInteger(3)

    // This works, but requires an ugly condition.
    // Here we simply ignore the cases when we don't find any gold in the first pick
    // var z = ship == 0 ? 1 : (ship == 1 && uniformDraw(ships[ship]) == "g" ? 0 : "no gold found")
    // condition(z != "no gold found")

    // This works, and also requires a condition. But it's cleaner than
    // the "no gold found" approach above
    var pick_side = randomInteger(2) // Pick a random side
    var other_side = pick_side == 0 ? 1 : 0 // Check the other side
    var z = ships[ship][other_side] == "g"

    condition(ships[ship][pick_side] == "g") // We did found gold in the first pick
    
    return {
        ship:ship,
        z:z,
    }
    
}

var d2 = Infer(model2)
// var d2 = Infer({method:"rejection",samples:100000},model2)
// display(d)
exp_map_all(d2)
