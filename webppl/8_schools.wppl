/*
  8 schools problem

  expectation:
  [ [ 'mu', 9.907859104932996 ],
    [ 'tau', 9.54764965675287 ],
    [ 'eta0', -0.09436607021507995 ],
    [ 'eta1', -0.0921117608998057 ],
    [ 'eta2', -0.04808031359267466 ],
    [ 'eta3', -0.0028837981088742316 ],
    [ 'eta4', -0.04165699790076232 ],
    [ 'eta5', 0.05384804180452294 ],
    [ 'eta6', 0.000049898402005793714 ],
    [ 'eta7', 0.020244396122522556 ],
    [ 'theta0', 9.885397944603142 ],
    [ 'theta1', 10.225709619636865 ],
    [ 'theta2', 9.688342949043475 ],
    [ 'theta3', 10.168241541986582 ],
    [ 'theta4', 10.418627501374976 ],
    [ 'theta5', 10.186023558882725 ],
    [ 'theta6', 10.082951496334498 ],
    [ 'theta7', 10.084149889348392 ] ]

  See ~/blog/8_shools.blog

*/

var model = function() {

    var ys     = [28.0,  8.0, -3.0,  7.0, -1.0,  1.0, 18.0, 12.0]
    var sigmas = [15.0, 10.0, 16.0, 11.0,  9.0, 11.0, 10.0, 18.0]
    
    var mu = gaussian(10,Math.sqrt(2))
    var tau = gaussian(10,Math.sqrt(2)) // > 0! See check_tau!
    
    // Fraction of consistent worlds is about 1 (depending on the prior) so it seems to be good...
    // var check_tau = tau > 0.0 ? true : false;
    
    var eta   = function(i) { return gaussian(0,1) }
    var theta = function(i) { return mu + tau * eta(i) }    
    var y = function(i) {
        return Gaussian({mu:theta(i), sigma:sigmas[i]}); //   avg_likelihood
    }
    
    // condition(tau >= 0);

    // observe the values in y
    mapIndexed(function(i,val) {
        observe(y(i),val);
    }, ys);


    return {mu:mu,
            tau:tau,
            eta0:eta(0),
            eta1:eta(1),
            eta2:eta(2),
            eta3:eta(3),
            eta4:eta(4),
            eta5:eta(5),
            eta6:eta(6),
            eta7:eta(7),
            theta0:theta(0),
            theta1:theta(1),
            theta2:theta(2),
            theta3:theta(3),
            theta4:theta(4),
            theta5:theta(5),
            theta6:theta(6),
            theta7:theta(7),
            // eta:mapN(function(i) {return eta(i)}, 8),
            // theta:mapN(function(i) {return theta(i)}, 8),
           }

}

var d = Infer({method:"MCMC",kernel:"MH",samples:10000},model);
// var d = Infer(model);
// display(d);

exp_map(d,["mu","tau","eta0","eta1","eta2","eta3","eta4","eta5","eta6","eta7",
           "theta0","theta1","theta2","theta3","theta4","theta5","theta6","theta7"],
       ["expectation"])

// viz.auto(d) // Quite cluttered picture, but it works!
