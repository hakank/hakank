/*
  Negative Hypergeometric distribution

  From Mathematica BetaBinomialDistribution
  """
  Define a negative hypergeometric distribution:
  NegativeHypergeometricDistribution[w_, wtot_, btot_] := BetaBinomialDistribution[w, wtot - w + 1, btot]
  Find the probability that b black balls were sampled without replacement before a w^th 
  white ball was drawn from an urn initially filled with k_b black and  k_w white balls:

  Mean@NegativeHypergeometricDistribution[3, 10, 20] // N
  -> 5.45455
  Probability[x > 10, x ~ NegativeHypergeometricDistribution[3, 10, 20]] // N
  -> 0.0742771
  """

  Marginals:
  d
  Marginal:
    4 : 0.12230666666666673
    5 : 0.12000000000000006
    3 : 0.1130266666666667
    6 : 0.10605333333333336
    2 : 0.0965466666666667
    7 : 0.09375333333333338
    8 : 0.07664000000000003
    1 : 0.0651266666666667
    9 : 0.0582066666666667
    10 : 0.04338666666666668
    0 : 0.03157333333333335
    11 : 0.02836666666666668
    12 : 0.020086666666666676
    13 : 0.01213333333333333
    14 : 0.006746666666666666
    15 : 0.003240000000000001
    16 : 0.0018733333333333336
    17 : 0.0007400000000000002
    18 : 0.0001333333333333333
    19 : 0.00003333333333333332
    20 : 0.000026666666666666684
  p
  Marginal:
    false : 0.92662
    true : 0.07338000000000001

  expectation:
  [ [ 'd', 5.44994666666667 ], 
    [ 'p', 0.07338000000000001 ] ]


*/

/*
var negative_hypergeometric_dist = function(w,wtot,btot) {
    return beta_binomial_dist(btot,w,wtot-w+1)
}
*/

var model = function() {
    var w = 3
    var wtot = 10
    var btot = 20

    var d = negative_hypergeometric_dist(w,wtot,btot)
    var p = d > 10

    return {
        d:d,
        p:p,
    }
    
}

// var d = Infer({method:"rejection",samples:10000},model)
var d = Infer({method:"SMC",particles:10000,rejuvSteps:15},model)
exp_map_all(d)
