/*
  From Mathematica (GeometricDistribution) 
  """
  A coin-tossing experiment consists of tossing a fair coin repeatedly 
  until a tail results. Simulate the process:
    RandomVariate[GeometricDistribution[1/2], 10]
    -> 
     {0,0,1,1,2,0,0,2,0,1}

  Compute the probability that at least 4 coin tosses will be necessary:
    Probability[x >= 4, x -> GeometricDistribution[1/2]]
    -> 1/16 (0.0625)
    
  Compute the expected number of coin tosses:
    Mean[GeometricDistribution[1/2]] 
    -> 1

  """

  * Simulating the process:
    [ 1, 0, 2, 0, 3, 3, 0, 0, 1, 1 ]


  * Main model, using enumerate + maxExecutions:10000
    v
    Marginal:
      0 : 0.4999999999999999
      1 : 0.24999999999999994
      2 : 0.12500000000000003
      3 : 0.0625
      4 : 0.03125
      5 : 0.015625000000000007
      6 : 0.007812500000000002
      7 : 0.003906250000000001
      8 : 0.001953125
      9 : 0.0009765625
      ....

    expectation:
    [ [ 'v', 1 ], 
      [ 'p_at_least_4', 0.0625 ] ]
  
*/

// From Handbook on probability distributions
// page 19
// Expectation: (1-p)/p
// """
// A basic algorithm is to use i.i.d. Bernoulli variables as follows:
// * initialize X to 0 and generate U from an uniform distribution,
// * while U > p do ; generate U from an uniform distribution; X = X + 1;
// * return X.
// """
// var geometric1 = function(p,x) {
//     var u = uniform(0,1);
//     return u > p ? geometric1(p,x+1) : x;
// }
//
// var geometric = function(p) {
//     return geometric1(p,0);
// }

// From http://dippl.org/chapters/02-webppl.html
// We can use enumerate with this.
var geometric = function(p) {
    return flip(p) ? 0 : 1 + geometric(p)
}


var model = function() {
    var v = geometric(1/2)
    var p_at_least_4 = v >= 4

    return {
        v:v,
        p_at_least_4:p_at_least_4
    }
}

// var d = Infer({method:"rejection",samples:100000},model)
var d = Infer( {method:"enumerate",maxExecutions:10000},model)
// display(d)

exp_map(d,["v","p_at_least_4"],["expectation","marginals"])


console.log("\nSimulating the process:")
console.log(repeat(10, function() {return geometric(0.5) }))
