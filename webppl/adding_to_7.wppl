/*
   From   https://www.youtube.com/watch?v=6Lqt07enBGs&list=PLPhJUsEbNh6T7TZ-LPRZgepphZQIB0A02&index=6&t=1627s
   Probabilistic Programming and Bayesian Nonparametrics -- Frank Wood (Part 1)
   @1:21:01
  
   [assume a (- (poisson 100) 100)]
   [assume b (- (poisson 100) 100)]
   [observe (normal (+ a b) 0.00001) 7]
   [predict (list a b)]

   * using observe(Gaussian({mu:a+b,sigma:0.00001}),7)
     MCMC:1000 samples 
Marginal:
    {"a":-2,"b":9,"ab":7} : 0.937
    {"a":-4,"b":10,"ab":6} : 0.036
    {"a":-2,"b":10,"ab":8} : 0.007
    {"a":-4,"b":12,"ab":8} : 0.006
    {"a":0,"b":10,"ab":10} : 0.005
    {"a":-7,"b":4,"ab":-3} : 0.003
    {"a":0,"b":3,"ab":3} : 0.003
    {"a":9,"b":3,"ab":12} : 0.002
    {"a":9,"b":4,"ab":13} : 0.001

    SMC particles 1000 is much more reliable on this
Marginal:
    {"a":3,"b":4,"ab":7} : 0.118
    {"a":2,"b":5,"ab":7} : 0.117
    {"a":1,"b":6,"ab":7} : 0.088
    {"a":-2,"b":9,"ab":7} : 0.06
    {"a":7,"b":0,"ab":7} : 0.06
    {"a":15,"b":-8,"ab":7} : 0.059
    {"a":-3,"b":10,"ab":7} : 0.058
    {"a":14,"b":-7,"ab":7} : 0.031
    {"a":9,"b":-2,"ab":7} : 0.03
    {"a":11,"b":-4,"ab":7} : 0.03
    {"a":5,"b":2,"ab":7} : 0.03
    {"a":10,"b":-3,"ab":7} : 0.029
    {"a":-6,"b":13,"ab":7} : 0.029
    {"a":-1,"b":8,"ab":7} : 0.029
    {"a":-4,"b":11,"ab":7} : 0.029
    {"a":6,"b":1,"ab":7} : 0.029
    {"a":13,"b":-6,"ab":7} : 0.029
    {"a":-9,"b":16,"ab":7} : 0.029
    {"a":-5,"b":12,"ab":7} : 0.029
    {"a":16,"b":-9,"ab":7} : 0.029
    {"a":0,"b":7,"ab":7} : 0.029
    {"a":4,"b":3,"ab":7} : 0.029


*/

var model = function() {
    var a = poisson(100) - 100
    var b = poisson(100) - 100

    observe(Gaussian({mu:a+b,sigma:0.00001}),7)
    // factor(Gaussian({mu:a+b,sigma:0.00001}) == 7 ? 0 : -10000000) // Not as good

    return {
        a:a,
        b:b,
        ab:a+b
    }
}

// var d = Infer({method:"MCMC",kernel:"HMC",samples:1000},model)
var d = Infer({method:"SMC",particles:1000},model)
// var d = Infer({method:"rejection",samples:1000},model) // Error: Score exceeded upper bound.
display(d)

exp_map_all(d)
