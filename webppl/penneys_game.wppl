/*
  Penney's game
  https://en.wikipedia.org/wiki/Penney%27s_game
  """
  Penney's game, named after its inventor Walter Penney, is a binary (head/tail) 
  sequence generating game between two players. Player A selects a sequence of heads 
  and tails (of length 3 or larger), and shows this sequence to player B. Player B then 
  selects another sequence of heads and tails of the same length. Subsequently, a fair 
  coin is tossed until either player A's or player B's sequence appears as a consecutive 
  subsequence of the coin toss outcomes. The player whose sequence appears first wins.

  Provided sequences of at least length three are used, the second player (B) has an edge over the 
  starting player (A). This is because the game is nontransitive such that for any given sequence of 
  length three or longer one can find another sequence that has higher probability of occurring first.

  ...

  An easy way to remember the sequence is for the second player to start with the opposite of the 
  middle choice of the first player, then follow it with the first player's first two choices.

  So for the first player's choice of 1-2-3
  the second player must choose (not-2)-1-2
  where (not-2) is the opposite of the second choice of the first player.

  """

  Here are some implementations of experiments from 
  https://www.quora.com/What-are-the-most-interesting-or-popular-probability-puzzles-in-which-the-intuition-is-contrary-to-the-solution
  """
  1. Flip a fair coin twice. What is the probability that you get two heads (HH)? What is the 
     probability that you get heads followed by tails (HT)? Are these probabilities the same?

     (Yes, sure they are. No confusion yet.)

  2. Flip a fair coin repeatedly until you get two heads in a row (HH). On average, how many 
     flips should this take? What if we flip until we get heads followed by tails (HT)? 
     Are the answers the same?

     (Based on the previous problem, most folks assume that the answer is Yes, but the 
     answer is No.).

  3. Let's play a game: we flip a coin repeatedly until either HH emerges (I win) or HT 
     emerges (you win). Is the game fair?

     (Based on the previous problem, most folks assume that the answer is No, 
     but the answer is Yes.)

  4. We play the let's-flip-a-coin-until-a-pattern-emerges game. You pick HHT as your pattern, 
     I pick THH. We flip a fair coin repeatedly until we get heads-heads-tails in a row (you win) 
     or tails-heads-heads in a row (I win). Is the game fair?

     (Based on symmetry, most folks assume that the answer is Yes, but the answer is No. I'm 
     winning 75% of the games).
  """

  Cf sequence_waiting_times_1.wppl and sequence_waiting_times_2.wppl

*/


/*
  """
  1. Flip a fair coin twice. What is the probability that you get two heads (HH)? What is the 
     probability that you get heads followed by tails (HT)? Are these probabilities the same?

     (Yes, sure they are. No confusion yet.)
  """

  Marginals:
  hh_wins
  Marginal:
    false : 0.75
    true : 0.25
  ht_wins
  Marginal:
    false : 0.75
    true : 0.25

  expectation:
  [ [ 'hh_wins', 0.25 ], 
    [ 'ht_wins', 0.25 ] ]


*/
console.log("\nModel 1:")
var model1 = function() {
    var hh = ['H','H']
    var ht = ['H','T']

    var coin = function() {flip() ? "H" : "T"}
    var flips = [coin(),coin()]

    var hh_wins = _.isEqual(flips,hh)
    var ht_wins = _.isEqual(flips,ht)

    return {
        hh_wins:hh_wins,
        ht_wins:ht_wins,
    }
}
// var d1 = Infer({method:"rejection",samples:1000},model1)
// var d1 = Infer({method:"SMC",particles:10000},model1)
var d1 = Infer(model1) 
exp_map_all(d1,["marginals","expectation"])

/*
  """
  2. Flip a fair coin repeatedly until you get two heads in a row (HH). On average, how many 
     flips should this take? What if we flip until we get heads followed by tails (HT)? 
     Are the answers the same?

     (Based on the previous problem, most folks assume that the answer is Yes, but the 
     answer is No.).
  """

  Model 2:
  Marginals:
  hh_len
  Marginal:
    2 : 0.25179999999999997
    3 : 0.1262
    4 : 0.12530000000000002
    5 : 0.09840000000000003
    6 : 0.07819999999999998
    7 : 0.06020000000000001
    8 : 0.04810000000000002
    9 : 0.038200000000000005
    10 : 0.031200000000000006
    11 : 0.0273
    12 : 0.021699999999999994
    13 : 0.0158
    14 : 0.01369999999999999
    15 : 0.011000000000000005
    17 : 0.0087
    16 : 0.008200000000000002
    18 : 0.0072
    19 : 0.005699999999999996
    20 : 0.004699999999999999
    21 : 0.0038999999999999994
    24 : 0.0019000000000000013
    22 : 0.0018999999999999996
    25 : 0.0018999999999999996
    23 : 0.0014999999999999994
    28 : 0.0013000000000000006
    27 : 0.0012000000000000005
    30 : 0.0007000000000000001
    31 : 0.0005000000000000001
    39 : 0.0003000000000000001
    32 : 0.0002000000000000002
    38 : 0.0002000000000000002
    36 : 0.0002000000000000002
    35 : 0.00019999999999999985
    37 : 0.00019999999999999985
    34 : 0.00010000000000000009
    33 : 0.00010000000000000009
    40 : 0.00010000000000000009
    41 : 0.00010000000000000009
    43 : 0.00010000000000000009
    49 : 0.00010000000000000009
  ht_len
  Marginal:
    3 : 0.25730000000000003
    2 : 0.24899999999999994
    4 : 0.19019999999999998
    5 : 0.12379999999999997
    6 : 0.07750000000000003
    7 : 0.0445
    8 : 0.027799999999999995
    9 : 0.014100000000000003
    10 : 0.006999999999999997
    11 : 0.0038999999999999994
    12 : 0.002100000000000001
    13 : 0.0016000000000000007
    14 : 0.0008999999999999998
    15 : 0.0002000000000000002
    16 : 0.00010000000000000009

  expectation:
  [ [ 'hh_len', 6.0147 ], 
    [ 'ht_len', 3.9516 ] ]


  Here are some other (pair) comparisons of the expectations of the lengths until a sequence:

  ['H','H','H']: 14.012199999999991
  ['H','T','H']: 8.014800000000003

  ['H','H','H'',H']: 29.4843
  ['H','T','H','T']: 20.2928

  ['H','H','H','H']: 30.196300000000022
  ['H','T','T','T']: 16.057499999999994

*/
console.log("\nModel 2:")
var model2 = function() {
    var n = 2
    var hh = ['H','H']   // ['H','H','H','H']
    var ht = ['H','T']   // ['H','T','T','T']

    var run = function(seq,a) {
        var a_len = a.length
        var seq_len = seq.length
        var t = _.drop(a,a_len-seq_len)
        if (a_len >= seq_len && _.isEqual(seq,t)) {
            return a
        } else {
            var c = flip() ? "H" : "T"
            run(seq,a.concat(c))
        }
    }
    
    var hh_seq = run(hh,[])
    var hh_len = hh_seq.length
    
    var ht_seq = run(ht,[])
    var ht_len = ht_seq.length

    return {
        // hh_seq:hh_seq,
        hh_len:hh_len,
        
        // ht_seq:ht_seq,
        ht_len:ht_len,
    }
}

// var d2 = Infer({method:"rejection",samples:1000},model2)
var d2 = Infer({method:"SMC",particles:10000},model2)
// var d2 = Infer(model2) // This does not work (w/o any limits of the lengths)
exp_map_all(d2,["marginals","expectation"])



/*
  """
  3. Let's play a game: we flip a coin repeatedly until either HH emerges (I win) or HT 
     emerges (you win). Is the game fair?

     (Based on the previous problem, most folks assume that the answer is No, 
     but the answer is Yes.)
  """

  Model 3:
  Marginals:
  winner
  Marginal:
    "ht" : 0.5009
    "hh" : 0.49909999999999993

*/
console.log("\nModel 3:")
var model3 = function() {
    var n = 2
    var hh = ['H','H']
    var ht = ['H','T']
    var th = ['T','H']
    var tt = ['T','T']

    var run = function(seq) {
        var seq_len = seq.length
        if (seq_len >= n) {
            var t = _.drop(seq,seq_len-2)
            if (_.isEqual(t,hh)) {
                return "hh"
            } else if (_.isEqual(t,ht)) {
                return "ht"
            } else {
                var c = flip() ? "H" : "T"
                run(seq.concat(c))
            }
       
        } else {
            var c = flip() ? "H" : "T"
            run(seq.concat(c))
        }
    }
    var winner = run([])

    return {
        winner:winner,
    }
}

// var d3 = Infer({method:"rejection",samples:10000},model3)
var d3 = Infer({method:"SMC",particles:100000},model3)
exp_map_all(d3,["marginals","expectation"])

/*
  """
  4. We play the let's-flip-a-coin-until-a-pattern-emerges game. You pick HHT as your pattern, 
     I pick THH. We flip a fair coin repeatedly until we get heads-heads-tails in a row (you win) 
     or tails-heads-heads in a row (I win). Is the game fair?

     (Based on symmetry, most folks assume that the answer is Yes, but the answer is No. I'm 
     winning 75% of the games).
  """

  Here's the general version: you pick some pattern (1-2-3) and I pick the 
  corresponding (not-2)-1-2 pattern (see https://en.wikipedia.org/wiki/Penney%27s_game )

  Model 4: Penney's Game
  You pick: [ 'T', 'T', 'T' ]
  I pick  : [ 'H', 'T', 'T' ]
  Marginals:
  winner
  Marginal:
    ["H","T","T"] : 0.8745999999999999
    ["T","T","T"] : 0.12539999999999998

  You pick: [ 'T', 'T', 'H' ]
  I pick  : [ 'H', 'T', 'T' ]
  Marginals:
  winner
  Marginal:
    ["H","T","T"] : 0.7527
    ["T","T","H"] : 0.24730000000000002

  You pick: [ 'T', 'H', 'T' ]
  I pick  : [ 'T', 'T', 'H' ]
  Marginals:
  winner
  Marginal:
    ["T","T","H"] : 0.6684
    ["T","H","T"] : 0.3316

  You pick: [ 'T', 'H', 'H' ]
  I pick  : [ 'T', 'T', 'H' ]
  Marginals:
  winner
  Marginal:
    ["T","T","H"] : 0.6676000000000001
    ["T","H","H"] : 0.33240000000000003

  You pick: [ 'H', 'T', 'T' ]
  I pick  : [ 'H', 'H', 'T' ]
  Marginals:
  winner
  Marginal:
    ["H","H","T"] : 0.6585
    ["H","T","T"] : 0.3415000000000001

  You pick: [ 'H', 'T', 'H' ]
  I pick  : [ 'H', 'H', 'T' ]
  Marginals:
  winner
  Marginal:
    ["H","H","T"] : 0.6642000000000001
    ["H","T","H"] : 0.3358

  You pick: [ 'H', 'H', 'T' ]
  I pick  : [ 'T', 'H', 'H' ]
  Marginals:
  winner
  Marginal:
    ["T","H","H"] : 0.7533
    ["H","H","T"] : 0.2467

  You pick: [ 'H', 'H', 'H' ]
  I pick  : [ 'T', 'H', 'H' ]
  Marginals:
  winner
  Marginal:
    ["T","H","H"] : 0.8700000000000001
    ["H","H","H"] : 0.13


*/
console.log("\nModel 4: Penney's Game")

// You pick pattern you,
var penneys_game = function(you) {
    var n = you.length  
    // var you = ['H','H','T'] // You pick
    // var you = ['H','H','H'] // You pick
        
    // var y = ['T','H','H'] // I pick
    var my_first = you[1] == 'H' ?  'T' : 'H'
    var me = [my_first].concat(_.take(you,n-1))

    console.log("You pick:", you)            
    console.log("I pick  :", me)
    
    var model4 = function() {
        
        var run = function(seq) {
            var seq_len = seq.length
            if (seq_len >= n) {
                var t = _.drop(seq,seq_len-n)
                if (_.isEqual(t,you)) {
                    return you
                } else if (_.isEqual(t,me)) {
                    return me
                } else {
                    var c = flip() ? "H" : "T"
                    run(seq.concat(c))
                }
                
            } else {
                var c = flip() ? "H" : "T"
                run(seq.concat(c))
            }
        }
        var winner = run([])

        return {
            // you:you,
            // me:me,
            winner:winner,
        }
    }
    // var d4 = Infer({method:"rejection",samples:1000},model4)
    var d4 = Infer({method:"SMC",particles:10000},model4)
    exp_map_all(d4,["marginals"])

}

var run_penneys_game = function() {
    var n = 4

    var flips = repeat(n, function() {flip() ? 'H' : 'T'})
    penneys_game(flips)

}

var d5 = Infer({method:"enumerate"},run_penneys_game)

