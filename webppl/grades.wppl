/* 
   From BLOG examples/grades.blog
   """
   A standard toy example used to explain probabilistic relational 
   models (PRMs) and directed acyclic probabilistic entity-relationship 
   (DAPER) models.  This version follows Heckerman, Meek and 
   Koller (2004). 
   "Probabilistic models for relational data". Microsoft Research 
   TR 2004-30.
   """

   (The comments in quotes below are from the BLOG model.)

   Result (method:enumerate)
   gradeJohnCS106
   Marginal:
    "A" : 0.46714471171674493
    "B" : 0.2959892528516842
    "C" : 0.1704537970521472
    "D" : 0.045732606045023834
    "F" : 0.020679632334399612
    gradeMaryCS106
    Marginal:
    "A" : 0.48361356932153443
    "B" : 0.3090265486725655
    "C" : 0.1501327433628324
    "D" : 0.039398230088495446
    "F" : 0.017828908554572195
    gradeFredCS106
    Marginal:
    "B" : 0.4068352871954868
    "C" : 0.2507585649372798
    "A" : 0.24935537382137946
    "D" : 0.06620786258522887
    "F" : 0.02684291146062493

*/

var model = function() {
   
    var Professors = ["Smith", "Jones", "Moriarty"];
    var Students =  ["John", "Mary", "Fred"];
    var Courses = ["CS106", "Phil80", "Stat10"];
    var grades = ["A","B","C","D","F"];
    
    /* 
     * """
     * Relational skeleton and evidence.
     *
     * To specify the interpretations of the non-random Boolean functions, 
     * we use the ListInterp class.  The first parameter to ListInterp is
     * the number of arguments to the function.  If the number of arguments
     * is k, then the remaining parameters are interpreted in groups of k,
     * as k-tuples for which the function returns true.  
     * 
     * Given this evidence, Mary has a high probability of getting an A in 
     * CS106, because she got an A in Phil80.  Since Fred got a C in Stat10, 
     * his expected grade in CS106 is lower than Mary's.  John got the same 
     * grade as Fred in Stat10, but has an advisor; since his advisor might 
     * be friends with one of the CS106 teachers, John has a higher 
     * probability of getting an A.  
     * """
     */

    var Teaches = mem(function(p,c) {
        var ret = 
        (p=="Smith" && c=="CS106") ||
            (p=="Jones" && c=="CS106") ||
            (p=="Moriarty" && c=="Phil80") ||
            (p=="Jones" && c=="Stat10");
        return ret;
    });
    
    var Advises = function(p,s) {
        return p=="Moriarty" && s=="John";
    }
    
    var Takes = mem(function(s,c) {
        var ret = 
            (s=="John" && c =="Stat10") ||
            (s=="John" && c =="CS106") ||
            (s=="Mary" && c =="Phil80") ||
            (s=="Mary" && c =="CS106") ||
            (s=="Fred" && c =="Stat10") ||
            (s=="Fred" && c =="CS106");
        return ret;
    });

    
    /* 
     * """
     * In the DAPER paper this relation is called "Friend", but there is no 
     * attempt to ensure that it's symmetric, and ensuring that in BLOG is 
     * hard. Here we use "Likes", which doesn't imply symmetry.
     * """
     */
    var Likes = function(p1, p2) {
        if (p1 == p2) {
            return true;
        } else {
            return flip(0.2);
        }
    }

    var Difficulty = mem(function(c) {
        return categorical({ps:[0.7,0.3],vs:["Easy", "Hard"]});
      })

    var Intelligence = mem(function(s) {
        return categorical({ps:[0.2,0.6,0.2],vs:["Smart", "Average", "Weak"]});
    })

    /* 
     * """
     * If one of the teachers of course c likes an advisor of student s, 
     * then student s usually gets an A.  Otherwise the grade depends on 
     * the student's intelligence and the course's difficulty.  
     * """
     */
    var GradeObtained = mem(function(s, c) {
        if ( Takes(s, c) &&
             sum(map(function(p1) {
                 sum(map(function(p2) {
                     return Teaches(p1, c) && Advises(p2, s) && Likes(p1, p2)
                 },Professors))
             },Professors)) > 0 
           ) {
            return categorical({ps:[0.85, 0.1, 0.03, 0.01,0.01],vs:grades})
        } else {
            if (Takes(s, c)) {
                var IntelligenceS = Intelligence(s);
                var DifficultyS = Difficulty(c);
                (IntelligenceS=="Weak"    &&  DifficultyS=="Easy") ? categorical({ps:[0.2, 0.4, 0.3, 0.07, 0.03],vs:grades})   : 
                (IntelligenceS=="Weak"    &&  DifficultyS=="Hard") ? categorical({ps:[0.05, 0.1, 0.55, 0.2, 0.1],vs:grades})   : 
                (IntelligenceS=="Average" &&  DifficultyS=="Easy") ? categorical({ps:[0.3, 0.55, 0.10, 0.04, 0.01],vs:grades}) :
                (IntelligenceS=="Average" &&  DifficultyS=="Hard") ? categorical({ps:[0.15, 0.3, 0.45, 0.07, 0.03],vs:grades}) :
                (IntelligenceS=="Smart"   &&  DifficultyS=="Easy") ? categorical({ps:[0.85, 0.1, 0.03, 0.01, 0.01],vs:grades}) : 
                (IntelligenceS=="Smart"   &&  DifficultyS=="Hard") ? categorical({ps:[0.60, 0.25, 0.1, 0.03, 0.02],vs:grades}) : "xxx";
            } else {
            return undefined;
            }
        }
    })
    
    // Evidence
    condition(GradeObtained("John", "Stat10") == "C");
    condition(GradeObtained("Mary", "Phil80") == "A");
    condition(GradeObtained("Fred", "Stat10") == "C");
    
    return {
        gradeJohnCS106:GradeObtained("John", "CS106"),
        gradeMaryCS106:GradeObtained("Mary", "CS106"),
        gradeFredCS106:GradeObtained("Fred", "CS106"),
    }

}

// var d = Infer({method:"MCMC",kernel:"MH",samples:10000,verbose:true},model);
var d = Infer({method:"enumerate"},model);
// display(d);


exp_map_all(d,["marginals"]);

