/*
   Generating Negative Binomial distribution

   From Handbook on probability distributions
   page 22ff
   """
   The algorithm to simulate a negative binomial distribution NB(m, p) 
   is simply to generate m random variables geometrically distributed 
   and to sum them."
   """

   Compare with Mathematica:

    d = NegativeBinomialDistribution[3, 0.7]
    Table[PDF[d, k], {k, 0, 10}]
    -> {0.343, 0.3087, 0.18522, 0.09261, 0.0416745, 0.0175033, 0.00700132, 0.00270051, 0.00101269, 0.00037132, 0.000133675}

    Probability[d >= 4, d \[Distributed] heads4]
    -> 0.07047

    This model:
    d
    Marginal:
    0 : 0.34356
    1 : 0.30824999999999997
    2 : 0.18412
    3 : 0.09461999999999998
    4 : 0.041589999999999995
    5 : 0.01682
    6 : 0.006800000000000002
    7 : 0.002639999999999999
    8 : 0.0009199999999999999
    9 : 0.00035999999999999986
    10 : 0.00022
    11 : 0.00007
    12 : 0.000029999999999999977

    p
    Marginal:
    false : 0.92703
    true : 0.07297

*/

// From Handbook on probability distributions
// page 19
// Expectation: (1-p)/p
// (See geometric_dist.wppl)
var geometric1 = function(p,n) {
    var u = uniform(0,1);
    return u > p ? geometric1(p,n+1) : n;

}

var geometric = function(p) {
    return geometric1(p,0);
}


// From Handbook on probability distributions
// page 23
// Expectation: m*(1-p)/p
// """
// The algorithm to simulate a negative binomial distribution NB(m,p) is simply
// to generate m random variables geometrically distributed and to sum them.
// """
var negative_binomial = function(m,p) {
    var g = mapN(function() { return geometric(p)}, m);
    return sum(g);

}


var model = function() {

    // See negative_binomial_test.wppl
    var d = negative_binomial(3,0.7);


    return {
        d:d,
        p:(d >= 4),
    }
}


// var d = Infer({method:"MCMC",kernel:"MH",samples:1000000},model);
var d = Infer({method:"rejection",samples:10000},model);
// var d = Infer(model);
// display(d);

exp_map(d,["d","p"]);

stat2(d,"d")
stat2(d,"p")
