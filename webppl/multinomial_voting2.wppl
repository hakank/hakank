/*
  From Mathematica Multinomial

  """
  There are two candidates in an election where the winner is chosen based on a simple majority. 
  Each of n voters votes for candidate 1 with probability p1 and for candidate 2 
  with probability p2, where p1+p2<1, so that a voter may choose not to vote for either 
  candidate. When n=100, p1=p2=0.4, the probability of one swing vote is: 

    D = MultinomialDistribution[100 - 1, {0.4, 0.4, 1 - 0.4 - 0.4}];
    Probability[x == y, {x, y, z} -> D]
    -> 0.0447288


  Probability that a winner won by one vote:

    Probability[ Abs[x - y] == 1, {x, y, z} -> D]
    -> 0.0888996

  Probability that candidate 1 wins the election:
    Probability[x > y, {x, y, z} -> D]
    ->  0.477636
  """

   
  expectation:
  [ [ 'x', 39.60000000000002 ],
    [ 'y', 39.60000000000002 ],
    [ 'z', 19.799999999999944 ],
    [ 'p_swing_vote', 0.04472881097398111 ],
    [ 'p_won_by_one_vote', 0.08889956800751829 ],
    [ 'p_candidate_1_wins', 0.47763559451301085 ] ]
    

  x
  Marginal:
    40 : 0.08121914499610766
    39 : 0.08121914499610647
    41 : 0.0779175537361004
    38 : 0.0778904915126595
    ...

  y
  Marginal:
    40 : 0.08121914499610766
    39 : 0.08121914499610647
    41 : 0.0779175537361004
    38 : 0.0778904915126595
    ...

  z
  Marginal:
    19 : 0.09930021480882478
    20 : 0.09930021480882294
    21 : 0.09338948773687088
    18 : 0.09317057191939092
    ...


  next 4 elections: [ [ 40, 46, 13 ], [ 39, 39, 21 ], [ 34, 46, 19 ], [ 38, 42, 19 ] ]
  score( [ 40, 40, 19 ] ): 0.008830557464742372


*/

var model = function() {
    var v = multinomial([0.4,0.4,1-0.4-0.4],99)

    // var [x,y,z] = v // This does not work
    var x = v[0]
    var y = v[1]
    var z = v[2]

    var p_swing_vote = x == y
    var p_won_by_one_vote = Math.abs(x-y) == 1
    var p_candidate_1_wins = x > y
   
    return {
        x:x,
        y:y,
        z:z,
        p_swing_vote:p_swing_vote,
        p_won_by_one_vote:p_won_by_one_vote,
        p_candidate_1_wins:p_candidate_1_wins,
    }
}

var d = Enumerate(model)
// display(d)
exp_map(d,["x","y","z","p_swing_vote","p_won_by_one_vote","p_candidate_1_wins"])

// Just generate a value
var v = repeat(4,function() { sample(Multinomial({ps:[0.4,0.4,1-0.4-0.4],n:99}) ) } )
console.log("\nnext 4 elections:", v)

// Check for a specific outcome:
var d2 = Enumerate(function() { var v= multinomial([0.4,0.4,1-0.4-0.4],99); return v } )
var val = [40,40,19]
console.log("score(",val, "):", Math.exp(d2.score(val)))
