/*

  Fair coin tosses in WebPPL

  From 
  https://keith-mcnulty.medium.com/the-trick-that-helps-all-statisticians-survive-069ac685e6d7
  """
  A Cambridge University mathematics entrance question in 1991 posed the following 
  question:

  A fair coin is thrown 10,000 times. On each throw, 1 point is scored for a head and 
  1 point is lost for a tail. Find an approximation for the probability that the final 
  score is greater than 100.

  ...

  Our standard deviation is 50, so we are looking for the area under the normal curve 
  to the right of 50.5/50 = 1.01 standard deviations above the mean, so our z-score 
  is +1.01. We can use tables, an appropriate scientific calculator, or a function in 
  R to calculate the appropriate upper-tail p-value for this z-score:

  > pnorm(1.01, lower.tail = FALSE)
  [1] 0.1562476

  Let’s see if this agrees with the R function for calculating the p-value for a 
  binomial distribution:

  > pbinom(5050, 10000, 0.5, lower.tail = FALSE)
  [1] 0.1562476

  A perfect match. And there we are — the probability that the score is greater than 
  100 is approximately 15.62%.
  """
  
  model2 give the following exact probabilities

  Marginals:
  p
  Marginal:
    false : 0.8437523952489335
    true : 0.15624760475106653

  expectation:
  [ [ 'p', 0.15624760475106653 ] ]


  This is a port of my Racket Gamble model  gamble_fair_coin_tosses.rkt

  This program was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my WebPPL page: http://www.hakank.org/webppl/

*/

// Too slow (as expected)
var model1 = function() {
    var n = 10000

    var sum_tosses = sum(mapN(function(i) {
        return uniformDraw([1,-1])
    }, n))

    var p = sum_tosses > 100

    return {
        // sum_tosses:sum_tosses,
        p:p,
    }
        
}


// var d1 = Infer(model1) // Timeout
// var d1 = Infer({method:"rejection",samples:1000},model1) // Slow: 16.6s: 'p', 0.16500000000000004 
// var d1 = Infer({method:"SMC",particles:1000},model1) // Slow: 17.5s:  'p', 0.15799999999999997
// var d1 = Infer({method:"MCMC",kernel:"HMC",samples:1000},model1) // Slow and wrong: 16.5s p_ 0 
// exp_map_all(d1)

var model2 = function() {
    var n = 10000

    var p = binomial(0.5,n)
    var p = p > 5050
    return {
       p:p,
    }
        
}

var d2 = Infer(model2)
exp_map_all(d2)
