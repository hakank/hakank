/*
  https://www.youtube.com/watch?v=X_DdGRjtwAo&t=157s
  The unexpected logic behind rolling multiple dice and picking the highest.

  Following Matt Parker's simulations

  * For two d20 (exact result, 1.3s)

    v
    Marginal:
      20 : 0.09750000000000002
      19 : 0.09250000000000003
      18 : 0.08750000000000001
      17 : 0.08249999999999999
      16 : 0.07749999999999999
      15 : 0.0725
      14 : 0.06749999999999999
      13 : 0.0625
      12 : 0.05749999999999999
      11 : 0.05249999999999999
      10 : 0.04749999999999999
      9 : 0.042499999999999975
      8 : 0.03749999999999998
      7 : 0.032499999999999994
      6 : 0.0275 
      5 : 0.0225
      4 : 0.01749999999999999
      3 : 0.012499999999999994
      2 : 0.007499999999999998
      1 : 0.0024999999999999988

   expectation:
   [ [ 'v', 13.825 ] ]

   (Matt Parker's first Python simulation gives 13.829135)

  * For 2 d12 (exact result)

    v
    Marginal:
      12 : 0.15972222222222227
      11 : 0.1458333333333334
      10 : 0.13194444444444448
      9 : 0.11805555555555555
      8 : 0.10416666666666666
      7 : 0.09027777777777782
      6 : 0.07638888888888892
      5 : 0.06250000000000003
      4 : 0.04861111111111113
      3 : 0.03472222222222224
      2 : 0.02083333333333335
      1 : 0.00694444444444445

    expectation:
    [ [ 'v', 8.486111111111112 ] ]

   (Matt Parker's Python simulation gives 8.489548)

  * For two d6 (exact value)

    v
    Marginal:
      6 : 0.3055555555555556
      5 : 0.24999999999999994
      4 : 0.19444444444444445
      3 : 0.1388888888888889
      2 : 0.08333333333333337
      1 : 0.02777777777777778

   expectation:
   [ [ 'v', 4.472222222222222 ] ]

  * Two d120 (exact result)
    v
    Marginal:
      120 : 0.016597222222222235
      119 : 0.016458333333333346
      118 : 0.01631944444444445
      117 : 0.01618055555555557
      116 : 0.016041666666666683
      115 : 0.01590277777777779
      ...

    expectation:
    [ [ 'v', 80.49861111111117 ] ]


  Running n=1..20:
    1  1 
    2  1.75 
    3  2.444444444444444 
    4  3.125 
    5  3.8 
    6  4.472222222222222 
    7  5.1428571428571415 
    8  5.8125 
    9  6.481481481481481 
   10  7.1499999999999995 
   11  7.818181818181818 
   12  8.486111111111112 
   13  9.153846153846153 
   14  9.821428571428571 
   15  10.488888888888889 
   16  11.156250000000002 
   17  11.823529411764705 
   18  12.49074074074074 
   19  13.157894736842104 
   20  13.825

  @11:10 Parker shows that the formula is 
    1/(6*N)*(N+1)*(4*N-1)
  where N is the sides of the die.

  Picat> X=[1/(6*N)*(N+1)*(4*N-1) : N in 1..20]
  X = [1.0,1.75,2.444444444444444,3.125,3.8,4.472222222222221,5.142857142857142,5.8125,6.481481481481481,7.149999999999999,7.818181818181818,8.486111111111111,9.153846153846153,9.821428571428569,10.488888888888889,11.156249999999998,11.823529411764705,12.49074074074074,13.157894736842104,13.824999999999999]

  With m=3 (i.e. 3 dice)
 
  * 3 d6
  Marginal:
    6 : 0.42129629629629634
    5 : 0.2824074074074073
    4 : 0.1712962962962963
    3 : 0.08796296296296297
    2 : 0.03240740740740742
    1 : 0.0046296296296296285

  expectation:
  [ [ 'n', 6 ], [ 'v', 4.958333333333334 ] ]
 
  Using Maple's identify() function, the probabilities are
    6 : 0.42129629629629634   = 91/216
    5 : 0.2824074074074073    = 61/216
    4 : 0.1712962962962963    = 37/216
    3 : 0.08796296296296297   = 19/216
    2 : 0.03240740740740742   =  7/216
    1 : 0.0046296296296296285 =  1/216
    And 91+61+37+19+7+1 = 216

  * 3 d12
  v
  Marginal:
    12 : 0.2297453703703702
    11 : 0.1915509259259259
    10 : 0.15682870370370372
    9 : 0.12557870370370372
    8 : 0.09780092592592592
    7 : 0.07349537037037039
    6 : 0.052662037037037104
    5 : 0.035300925925925986
    4 : 0.02141203703703708
    3 : 0.010995370370370381
    2 : 0.004050925925925935
    1 : 0.0005787037037037049

  expectation:
  [ [ 'n', 12 ], [ 'v', 9.479166666666666 ] ]


 
*/


var model = function() {
    // var n = 120 
    var n = 12   
    // var n = 6
    // var m = 2 // Number of identical d<n> dice
    var m = 3 // Number of identical d<n> dice    
    
    // Throw the m dice
    var ts = mapN(function(i) { 1+ randomInteger(n) },m)
    
    // What is the max value 
    var v = _.max(ts)
    
    return {
        n:n,
        v:v,
    }
}

var d = Infer(model)
exp_map_all(d)
// exp_map_all(d,["expectation"])    



var run = function(n) {
    var model = function() {
        // var n = 120
        var m = 2 // Number of identical d<n> dice

        // Throw the m dice
        var ts = mapN(function(i) { 1+ randomInteger(n) },m)
        
        // What is the max value 
        var v = _.max(ts)

        return {
            n:n,
            v:v,
        }
    }
    
    var d = Infer(model)
    // exp_map_all(d)
    exp_map_all(d,["expectation"])    

}

/*
var t = mapN(function(n) {
    // console.log("n:",n+1)
    run(n+1)
},20)
*/
