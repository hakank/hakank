/*
   Random permutations.

   It's fairly fast for - e.g. - 52. 
   Though that is without much constraints/conditions.
   
*/

// This is probably not the optimal way
// of swapping....
var swapN1 = function(a,c) {
    if (c==0) {
        return a;
    } else {
        var a2 = swap(a);
        return swapN1(a2,c-1);
    }
}

var swapN = function(a,n) {
    return swapN1(a,n);
}

var swap = function(a) {
    var len = a.length;
    var i = randomInteger(len);
    var j = randomInteger(len);
    var ixes = mapN(function(k) {
        if (k == i) {
            return j;
        } else if (k== j) {
            return i;
        } else {
            return k;
        }
    },len);
    var p = map(function(i) {return a[i]}, ixes);
    return p;
                                                       
}


var model = function() {
    var n = 52;
    var p = _.range(n);
    var a = swapN(p,n*2);

    var numInPlace = sum(mapN(function(i) {return a[i] == i},n));

    // condition(numInPlace==0);
    // condition(a[0]<=a[1]);
    
    return {
        a:a,
        numInPlace:numInPlace,
    }
    
}

// var d = Infer({method:"enumerate"},model); // long time for n=5 (1min:30s) (should be 5!=720 solutions).
// var d = Infer({method:"MCMC",kernel:"MH",samples:1000,lag:100}, model);
// var d = Infer({method:"SMC",particles:1000}, model);
var d = Infer({method:"SMC"}, model);
display(d);

exp_map(d,["numInPlace"]);

var m = marginalize(d, "a");
console.log("#solutions",m.supp.length)
