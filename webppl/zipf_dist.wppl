/*
  Zipf distribution

  https://en.wikipedia.org/wiki/Zipf%27s_law and Mathematica's ZipfDistribution

  zipf_dist(n,s) can be used with Enumerate.

  Note that zipf1_dist(s) is approximated by zipf_dist(1000,s) so it's not especially reliable.
  If you want a more reliable approximation, use zipf_dist(<a larger value of n>, s).

 
  From Mathematica:
  """
  Rank 15 web pages according to popularity. The access frequencies follow Zipf distribution 
  with 0.3. Find the distribution of access frequencies:
  """
  d = ZipfDistribution[15, 0.3];
  Mean[d]
  -> 3.57738
  """

  * Enumerate (exact), here for n=15,s=0.3

  Marginals:
  x
  Marginal:
    1 : 0.4053103525580217
    2 : 0.16460715256662192
    3 : 0.09716952184112387
    4 : 0.06685127706480753
    5 : 0.050018042487856997
    6 : 0.039463088484121216
    7 : 0.03229685582099084
    8 : 0.02715005499768228
    9 : 0.023295521358490365
    10 : 0.020313637435904922
    11 : 0.017946394327218534
    12 : 0.016026994094422806
    13 : 0.01444313061499415
    14 : 0.013116599267685826
    15 : 0.011991377080057004

  expectation:
  [ [ 'x', 3.5773795828075947 ] ]

  MAP:
  [ [ 'x', { val: 1, score: -0.9031022027231357 } ] ]

  min: 1 mean: 3.587 max: 15 stdev: 3.4829629627661802

  Credible interval for x (90%): [ 1, 10 ]
  Credible interval for x (95%): [ 1, 12 ]
  Credible interval for x (99%): [ 1, 15 ]
  Credible interval for x (99.9%): [ 1, 15 ]

*/

var model = function() {
    var x = zipf_dist(15,0.3)
    // var x = zipf_dist(15,0.98)

    // zipf1 is more unreliable (it's approximated by zipf_dist(1000, s)
    // var x = zipf1_dist(1.3)
    // var x = zipf1_dist(0.98)
    return {
        x:x,
    }
}

var d = Infer(model)
// var d = Infer({method:"rejection",samples:1000},model)
// var d = Infer({method:"SMC",particles:1000,rejuvSteps:0},model)
// var d = Infer({method:"MCMC",kernel:"HMC",samples:10000},model)

exp_map_all(d,["expectation","marginals","MAP"])

// This does not work with Enumerate
// stat2(d,"x")
// showCredibleInterval(d,"x",0.90)
// showCredibleInterval(d,"x",0.95)
// showCredibleInterval(d,"x",0.99)

// Generate 10000 samples from d["x"] and get the statistics
stat3(d,"x",10000)

/*
var marg = marginalize(d,"x")
var supp = marg.supp
console.log("margs:",map(function(v) { [v,Math.exp(marg.score(v))] },supp ))
*/

showCredibleInterval2(d,"x",0.90,1000)
showCredibleInterval2(d,"x",0.95,1000)
showCredibleInterval2(d,"x",0.99,1000)
showCredibleInterval2(d,"x",0.999,1000)

