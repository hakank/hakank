/*
    This is a port of the SPPL model two-dimensional-mixture-model.pynb

    The SPPL model returns the following probabilities for these 
    conditions  
                (((-4 < X) < 4) & ((1 < Y) < 2)) 
                (((-4 < X) < 4) & ((-2 < Y) < -1)) 
                (((-1 < X) < 1) & ((-1 <= Y) <= 1)) 
                (((-1 < X) < 1) & ((2 <= Y) < 6))
    prior:
    [0.09278584524638006, 0.04331568961023601, 0.06717622976807626, 0.023365316112895024]
    posterior
    [0.40939191677247666, 0.1911185175795767, 0.29639656127801434, 0.10309300436993234]

    * Prior (forward)
      expectation:
      [ [ 'cluster', 1.3799999999999994 ],
        [ 'x', 0.04637134342876804 ],
        [ 'y', 5.031467229428567 ],
        [ 't1', 0.092 ],
        [ 't2', 0.044999999999999984 ],
        [ 't3', 0.05299999999999997 ],
        [ 't4', 0.019999999999999993 ] ]

    * Posterior
      
      expectation:
      [ [ 'cluster', 1.7399999999999998 ],
        [ 'x', 0.31814784580778543 ],
        [ 'y', 1.9166699463865262 ],
        [ 't1', 0.29500000000000026 ],
        [ 't2', 0.1029999999999999 ],
        [ 't3', 0.22399999999999978 ],
        [ 't4', 0.07700000000000011 ] ]

*/

/*
  SPPL model:
  """
  X ~= norm(loc=0, scale=2)
  Y ~= 0.6*norm(loc=8, scale=1) | 0.4*gamma(loc=-3, a=3)
  """
  It seems that 0.6 and 0.6 are the weights, i.e. 
  the probability of each cluster 
*/

var model = function() {
    var x = gaussian(0, 2)
    
    // Probability of the clusters
    var cluster = categorical({ps:[0.6,0.4],vs:[1,2]}) // [cluster1, cluster2]
    var y = cluster == 1 ? gaussian(8, 1)  : gamma(3,1) - 3
     

    factor( ((-4 < x && x < 4) && (1 < Math.pow(y,2) && Math.pow(y,2) < 4)) 
                    || 
                ((-1 < x && x < 1) && (-1.5 < y && y < 6))
            ? 0 : -2)

    // The different conditions in the SPPL model
    var t1 = ((-4 < x && x < 4) && (-2 <  y && y < -1)) 
    var t2 = ((-4 < x && x < 4) && ( 1 <  y && y <  2)) 
    var t3 = ((-1 < x && x < 1) && (-1 <= y && y <= 1)) 
    var t4 = ((-1 < x && x < 1) && ( 2 <= y && y <  6))
    
    return {
        cluster:cluster,
        x:x,
        y:y,
        t1:t1,
        t2:t2,
        t3:t3,
        t4:t4
    }

}

// var d = Infer({method:"forward",samples:1000},model) // Prior
var d = Infer({method:"MCMC",kernel:"HMC",samples:10000},model)
// var d = Infer({method:"SMC",particles:1000},model)
// display(d)

exp_map(d,["cluster","x","y","t1","t2","t3","t4"],["expectation"])
