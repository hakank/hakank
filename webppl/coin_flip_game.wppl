/*
  Anne Obborn:
  https://twitter.com/AnneOgborn/status/1560681513548759042
  """
  I offer a game-  flip a coin. Heads, I pay $1 and the game ends. Tails, we flip again- 
  if Heads, I pay $2 and game ends, Tails, we flip again, doubling each time.
  What would you pay me to play this game?
  """

  Comment by Richard Barrell:
  """
  Roughly 0.5*log2(your bankroll)
  Each round has an EV of $0.50 and the number of rounds is log2(the maximum possible 
  amount of money you can pay out)
  """
  
  (This is related to the St Petersburg "paradox"/lottery: https://en.wikipedia.org/wiki/St._Petersburg_paradox)
 

  With a limit of 2*12 Euro:
  n
  Marginal:
    1000000000000 : 1
  game
  Marginal:
    1 : 0.4999999999999999
    2 : 0.24999999999999994
    4 : 0.12499999999999997
    8 : 0.06249999999999995
    16 : 0.03125
    32 : 0.015625000000000007
    64 : 0.007812500000000002
    128 : 0.003906250000000001
    256 : 0.001953125
    512 : 0.0009765625
    1024 : 0.00048828124999999995
    2048 : 0.00024414062500000016
    4096 : 0.00012207031249999986
    8192 : 0.00006103515625000003
    16384 : 0.00003051757812499996
    32768 : 0.000015258789062500007
    65536 : 0.000007629394531250015
    131072 : 0.000003814697265625001
    262144 : 0.0000019073486328125034
    524288 : 9.536743164062517e-7
    1048576 : 4.768371582031267e-7
    2097152 : 2.3841857910156414e-7
    4194304 : 1.1920928955078228e-7
    8388608 : 5.960464477539114e-8
    16777216 : 2.980232238769562e-8
    33554432 : 1.4901161193847835e-8
    67108864 : 7.450580596923929e-9
    134217728 : 3.725290298461971e-9
    268435456 : 1.862645149230989e-9
    536870912 : 9.313225746154959e-10
    1073741824 : 4.656612873077488e-10
    2147483648 : 2.3283064365387475e-10
    4294967296 : 1.1641532182693758e-10
    8589934592 : 5.82076609134689e-11
    17179869184 : 2.910383045673449e-11
    34359738368 : 1.4551915228367272e-11
    68719476736 : 7.275957614183647e-12
    137438953472 : 3.63797880709183e-12
    274877906944 : 1.8189894035459183e-12
    549755813888 : 9.094947017729605e-13
    1099511627776 : 9.094947017729573e-13
  log2ndiv2
  Marginal:
    19.931568569324174 : 1
  est
  Marginal:
    20.931568569324174 : 1
  p
  Marginal:
    false : 0.96875
    true : 0.031249999999999972
  p2
  Marginal:
    false : 0.96875
    true : 0.03124999999999989


  expectation:
  [ [ 'n', 1000000000000 ],
    [ 'game', 21.000000000000227 ],
    [ 'log2ndiv2', 19.931568569324174 ],
    [ 'est', 20.931568569324174 ],
    [ 'p', 0.031249999999999972 ],
    [ 'p2', 0.03124999999999989 ] ]



  With a limit of 2**20 (1048576)
n: 1048576
Marginals:
game
Marginal:
    1 : 0.49999999999999994
    2 : 0.24999999999999994
    4 : 0.12499999999999997
    8 : 0.06249999999999998
    16 : 0.031250000000000014
    32 : 0.015625000000000007
    64 : 0.007812500000000002
    128 : 0.003906250000000001
    256 : 0.001953125
    512 : 0.0009765625
    1024 : 0.0004882812500000004
    2048 : 0.00024414062500000016
    4096 : 0.00012207031250000008
    8192 : 0.00006103515625000003
    16384 : 0.000030517578125000014
    32768 : 0.000015258789062500007
    65536 : 0.000007629394531250002
    131072 : 0.000003814697265625001
    262144 : 0.0000019073486328125
    524288 : 9.5367431640625e-7
    1048576 : 9.5367431640625e-7
  log2ndiv2
  Marginal:
    10 : 1
  p
  Marginal:
    false : 0.9375
    true : 0.06249999999999998

  expectation:
  [ [ 'game', 11 ],
    [ 'log2ndiv2', 10 ],
    [ 'p', 0.06249999999999998 ] ]

  p is the probability that we get at least the expected value (0.5*log2(n)).


  For larger n, it seems that log2ndiv2 underestimates the estimated value 
  by about 1.


  Testing for n (limited bankroll) as powers of 2:
  n: 1 expectation: 1
  n: 2 expectation: 1.5
  n: 4 expectation: 2
  n: 8 expectation: 2.5000000000000004
  n: 16 expectation: 3.000000000000001
  n: 32 expectation: 3.5000000000000004
  n: 64 expectation: 4.000000000000001
  n: 128 expectation: 4.500000000000001
  n: 256 expectation: 5.000000000000001
  n: 512 expectation: 5.5
  n: 1024 expectation: 6.000000000000001
  n: 2048 expectation: 6.500000000000002
  n: 4096 expectation: 7.000000000000002
  n: 8192 expectation: 7.500000000000002
  n: 16384 expectation: 8.000000000000002
  n: 32768 expectation: 8.500000000000002
  n: 65536 expectation: 9.000000000000002
  n: 131072 expectation: 9.500000000000002
  n: 262144 expectation: 10.000000000000002
  n: 524288 expectation: 10.5


  Via JGAP (Symbolic Regressions), the estimated value for the powers of 2 results, is about
    (log (4 * n)) / (log(4))
  or:
    0.7213475205 ln(4.0 V1)

  Maple:
  > (log (4 * V1)) / (log(40));
                                                ln(4 V1)
                                                --------
                                                 ln(40)

  Mathematica:
  The estimate from Richard Barrell has the limit of:
    Limit[Log2[n] / 2, n -> Infinity]
    -> Infinity

    However, with some limit (bankroll) a:
    Limit[Log2[n] / 2, n -> a]
    -> Log[a]/Log[4]

  

*/

var run = function(n) {
    // console.log("n:",n)
    var model = function() {
        // var n = Math.pow(10,130) // we have some limit (bankroll)
        // var n = Math.pow(10,5) // we have some limit (bankroll)

        var game = function(i) {
            var v = flip(0.5)
            if (v == true || i >= n) {
                return i
            } else {
                return game(2*i)
            }
        }


        // Probability that we get at least the expected value
        // (according to the 0.5*log2(n) formula)
        var p = game(1) >= 0.5*Math.log2(n)
        var p2 = game(1) >= (Math.log(4 * n)) / (Math.log(4))

        return {
            n:n,
            game:game(1),
            log2ndiv2:0.5*Math.log2(n),
            est: (Math.log(4 * n)) / (Math.log(4)), // based on powers of 2
            p:p,
            p2:p2,
        }
    }

    var d = Infer(model)
    // var d = Infer({method:"MCMC",particles:100000},model)
    // display(d)
    exp_map_all(d)    
    // exp_map_all(d,["expectation"])
    console.log("n:", n, "expectation:", expectation(marginalize(d, "game")))
}

run(Math.pow(10,12))

/*
var t = mapN(function(n) {
    run(Math.pow(2,n))
    // run(Math.pow(10,n))    
    // run(n)
},20);

*/
