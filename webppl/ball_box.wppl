/*
  From https://bitbucket.org/pedrozudo/hal_problog/src/master/examples/ball_box.pl
  """
  beta(2,2)~b.

  P::p:- b~=P.

  box(1):-p.
  box(2):- \+p.

  1/4::ball(X, red);3/4::ball(X, white):- box(1).
  3/4::ball(X, red);1/4::ball(X, white):- box(2).


  evidence(ball(1,red)).
  evidence(ball(2,red)).

  :-free(b).
  query(density(b)).
  """

  What I understand it's a common pick a ball from a random box-problem:
  - There are two boxes (box 1 and box 2)
  - box 1 contains 1 red ball and 3 white balls
  - box 2 contains 3 red balls and 1 white ball
  - one random box is selected 
  - one ball is picked from that box (and returned I suppose): it's a red ball
  - again one ball is picked from the same box: it's also red
  - Question: which box was selected?
  - Answer: It's box 2 with a probability of about 90%

  p
  Marginal:
    false : 0.8946
    true : 0.10540000000000002
  box
  Marginal:
    2 : 0.8946
    1 : 0.10540000000000002
  ball1
  Marginal:
    "red" : 1
  ball2
  Marginal:
    "red" : 1
  expectation:
  [ [ 'b', 0.4349646305675074 ],
    [ 'p', 0.10540000000000002 ],
    [ 'box', 1.8945999999999998 ],

*/

var model = function() {
    var b = beta(2,2)
    var p = flip(b)
    
    var box = p ? 1 : 2

    var red = 1
    var white = 2
    
    var ball = mem(function(the_box) {
        return box == 1 ? categorical({ps:[1/4,3/4],vs:["red","white"]})
                        : categorical({ps:[3/4,1/4],vs:["red","white"]})
    })

    condition(ball(1) == "red")
    condition(ball(2) == "red")
    // Let's continue to pick balls
    // condition(ball(3) == "red")
    // condition(ball(4) == "red")    
    
    return {
        b:b,
        p:p,
        box:box,
        // ball1:ball(1),
        // ball2:ball(2),
        // ball3:ball(3),
        // ball4:ball(4),
    }

}

// var d = Infer(model)
var d = Infer({method:"MCMC",kernel:"MH",samples:10000},model)
// display(d)


exp_map(d,["b","p","box",
          // "ball1","ball2",
          // "ball3","ball4"
          ])

// viz.auto() cannot handle ball1:ball(1) 
// viz.auto(d)
