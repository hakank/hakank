/*
  From
  Siddharth Srivastava and Stuart Russell and Paul Ruan and Xiang Cheng
  "First-Order Open-Universe POMDPs"
  page 3
  """
  Fig. 1 shows a simple example of a BLOG model with two
  types, Urn and Ball. This model expresses a distribution
  over possible worlds consisting of varying numbers of urns
  with varying numbers of balls in each urn. The number of
  urns follows a Poisson(5) distribution (line 3). The num-
  ber of balls in an urn depends on whether or not the urn is
  Large. Origin functions map the object being generated to
  the arguments that were used in the number statement that
  was responsible for generating it. In Fig. 1, Source maps a
  ball to the urn it belongs to. The number of balls in an urn
  follows a Poisson(10) distribution if the urn is Large, and
  a Poisson(2) distribution otherwise (lines 4-6). Finally, the
  probability of an urn being Large is 0.5 (lines 7 & 8).
  """

  * With condition(num_large_urns > 0)

    Marginals:
    num_urns
    Marginal:
      5 : 0.18300000000000005
      4 : 0.18130000000000002
      6 : 0.15530000000000005
      3 : 0.13859999999999997
      7 : 0.11039999999999997
      8 : 0.0747
      2 : 0.06659999999999998
      9 : 0.03790000000000002
      10 : 0.019999999999999983
      1 : 0.0168
      11 : 0.009099999999999997
      12 : 0.0034000000000000007
      13 : 0.0019000000000000013
      14 : 0.0005000000000000001
      15 : 0.0004000000000000001
      16 : 0.00010000000000000009
    num_large_urns
    Marginal:
      2 : 0.2796
      3 : 0.2371000000000001
      1 : 0.22170000000000006
      4 : 0.14340000000000006
      5 : 0.07030000000000002
      6 : 0.02860000000000002
      7 : 0.012899999999999998
      8 : 0.005199999999999999
      9 : 0.0011
      11 : 0.00010000000000000009

    expectation:
    [ [ 'num_urns', 5.2295 ],
      [ 'num_large_urns', 2.7318000000000007 ] ]


   * No condition that num_large_urns > 0
     expectation:
     [ [ 'num_urns', 5.0409 ], [ 'num_large_urns', 2.5195 ] ]


*/


var model = function() {
    var num_urns = poisson(5)
    condition(num_urns > 0)

    var large_urn = mapN(function(i) { return flip(0.5) },num_urns)
    
    var num_balls = mapN(function(u) {
        return large_urn[u] ? poisson(10) : poisson(2)
    },num_urns)

    var num_large_urns = sum(mapN(function(i) { return large_urn[i] ? 1 : 0 }, num_urns))

    condition(num_large_urns > 0)

    return {
        num_urns:num_urns,
        num_large_urns:num_large_urns,
    }

}

var d = Infer({method:"rejection",samples:10000},model)
exp_map(d,["num_urns","num_large_urns"])
