/*
  https://dtai.cs.kuleuven.be/problog/tutorial/basic/02_bayes.html
  """
  Since the random variables in the Bayesian network are all Boolean, we only need a single literal 
  in the head of the rules. We can extend the Bayesian network to have a multi-valued variable by 
  indicating the severity of the earthquake. The literal earthquake now has three possible values 
  none, mild, heavy instead of previously two (no or yes).
  """
  
  ProbLog model:
  """
  person(john).
  person(mary).
  
  0.7::burglary.
  0.01::earthquake(heavy); 0.19::earthquake(mild); 0.8::earthquake(none).
  
  0.90::alarm :-   burglary, earthquake(heavy).
  0.85::alarm :-   burglary, earthquake(mild).
  0.80::alarm :-   burglary, earthquake(none).
  0.10::alarm :- \+burglary, earthquake(mild).
  0.30::alarm :- \+burglary, earthquake(heavy).
  
  0.8::calls(X) :- alarm, person(X).
  0.1::calls(X) :- \+alarm, person(X).
  
  evidence(calls(john),true).
  evidence(calls(mary),true).
  
  query(burglary).
  query(earthquake(_)).
  """

  callsJohn
  Marginal:
    true : 1
  callsMary
  Marginal:
    true : 1
  alarm
  Marginal:
    true : 0.999884027193738
    false : 0.00011597280626194895
  burglary
  Marginal:
    true : 0.9884222092292877
    false : 0.01157779077071232
  earthquake
  Marginal:
    "none" : 0.7805610903463549
    "mild" : 0.20689495557218027
    "heavy" : 0.012543954081464977
  expectation:
  [ [ 'callsJohn', 1 ],
    [ 'callsMary', 1 ],
    [ 'alarm', 0.999884027193738 ],
    [ 'burglary', 0.9884222092292877 ],
    [ 'earthquake', NaN ] ]


   Cf ~/blog/alarm_multi.blog
      ~/psi/alarm_multi.psi

*/




var model = function() {
    
    var burglary = flip(0.7);
    var earthquake = categorical({ps:[0.01,0.19,0.8], vs:["heavy", "mild","none"]});
    
    var alarm =
        (burglary && earthquake == "heavy") ? flip(0.9) :
        (burglary && earthquake == "mild") ? flip(0.85) :
        (burglary && earthquake == "none") ? flip(0.80) : 
        (!burglary && earthquake == "heavy") ? flip(0.30) :
        (!burglary && earthquake == "mild") ? flip(0.10) : false;
    
    var calls = mem(function(p) {
        if (alarm) {
            return flip(0.8)
        } else {
            return flip(0.01);
        }
    });
    
    condition(calls("john") == true);
    condition(calls("mary") == true);
    
    return {
        callsJohn:calls("john"),
        callsMary:calls("mary"),
        alarm:alarm,
        burglary:burglary,
        earthquake:earthquake
    };


}


var d = Infer(model);
// var d = Infer({method:"rejection",sample:10000},model);
// display(d);

exp_map(d,["callsJohn","callsMary","alarm","burglary","earthquake"]);
