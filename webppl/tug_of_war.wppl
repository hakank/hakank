/*
   From Hakaru example documentation/tugofwar_rejection.hk

   $ hakaru tugofwar_rejection.hk | head -100000 | collect
   1.0	true: 69223
   1.0	false: 30777


  expectation:
  [ [ 'match1', NaN ],
    [ 'match2', NaN ],
    [ 'match3', NaN ],
    [ 'match1And2', NaN ],
    [ 'strengthAlice', 1.0524161028293268 ],
    [ 'strengthBob', 0.771533559129645 ],
    [ 'strengthCarol', 0.6335293319855387 ],
    [ 'pullsAlice', 1.8830754796437035 ],
    [ 'pullsBob', 1.0777231922087074 ],
    [ 'pullsCarol', 0.4833137377011983 ] ]

  MAP:
  [ [ 'match1', { val: 'alice', score: 0 } ],
    [ 'match2', { val: 'bob', score: 0 } ],
    [ 'match3', { val: 'alice', score: 0 } ],


   Via ~/blog/tug_of_war.blog

*/

var model = function() {
    
    var strength = mem(function(p) {
        return Math.abs(gaussian(0,1));
    })
    
    var pulls = mem(function(p) {
        return Math.abs(gaussian(strength(p), 1));
    })

    // The Hakary/BLOG model had "pulls(a) < pulls(b) "
    // which is a little strange so I change to return the winner.
    var winner = function(a, b) {
        return pulls(a) > pulls(b) ? a : b;
    }
    
    var match1 = winner("alice", "bob");
    var match2 = winner("bob", "carol");
    var match3 = winner("alice", "carol");
    
    condition(match1 == "alice");
    condition(match2 == "bob");

    return {
        match1:match1,
        match2:match2,
        match3:match3,        
        match1And2:match1 && match2,
        strengthAlice:strength("alice"),
        strengthBob:strength("bob"),
        strengthCarol:strength("carol"),
        pullsAlice:pulls("alice"),
        pullsBob:pulls("bob"),
        pullsCarol:pulls("carol"),
        // pulls(alice) < pulls(bob),
        // pulls(alice) < pulls(carol),
        // pulls(bob) < pulls(carol),
        // match1 & match2 & match3 == true,
        // match1 & match2 & match3 == false,
    }

}

var d = Infer({method:"rejection",samples:1000},model);
// display(d);

exp_map_all(d);
