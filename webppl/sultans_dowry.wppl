/*
   Sultan's dowry
   
   https://mathworld.wolfram.com/SultansDowryProblem.html
   """
   A sultan has granted a commoner a chance to marry one of his n daughters. The 
   commoner will be presented with the daughters one at a time and, when each 
   daughter is presented, the commoner will be told the daughter's dowry (which 
   is fixed in advance). Upon being presented with a daughter, the commoner must 
   immediately decide whether to accept or reject her (he is not allowed to 
   return to a previously rejected daughter). However, the sultan will allow the 
   marriage to take place only if the commoner picks the daughter with the 
   overall highest dowry. Then what is the commoner's best strategy, assuming he 
   knows nothing about the distribution of dowries (B. Elbows)?

   Since the commoner knows nothing about the distribution of the dowries, the 
   best strategy is to wait until a certain number x of daughters have been 
   presented, then pick the highest dowry thereafter. The exact number to skip is
   determined by the condition that the odds that the highest dowry has already 
   been seen is just greater than the odds that it remains to be seen and that if 
   it is seen it will be picked. 
   ....
   The problem is most commonly stated with n = 100 daughters, which gives the 
   result that the commoner should wait until he has seen 37 of the daughters, 
   then pick the first daughter with a dowry that is bigger than any preceding 
   one. With this strategy, his odds of choosing the daughter with the highest 
   dowry are surprisingly high: about 37% 
   (B. Elbows; Honsberger 1979, pp. 104-110, Mosteller 1987).
   """
   
  Note that the problem is to get the best strategy to pick the princess with
  the _highest_ downry. It is NOT to pick the best strategy to get the
  best mean best strategy.


  Here is the simulation of 30% .. 50% skip percentage (position):

  [ [ 'skip_pct', 0.3 ], [ 'p', 0.371 ] ]
  [ [ 'skip_pct', 0.31 ], [ 'p', 0.3648 ] ]
  [ [ 'skip_pct', 0.32 ], [ 'p', 0.3768 ] ]
  [ [ 'skip_pct', 0.33 ], [ 'p', 0.3728 ] ]
  [ [ 'skip_pct', 0.34 ], [ 'p', 0.3701 ] ]
  [ [ 'skip_pct', 0.35 ], [ 'p', 0.36829999999999996 ] ]
  [ [ 'skip_pct', 0.36 ], [ 'p', 0.37260000000000004 ] ]
  [ [ 'skip_pct', 0.37 ], [ 'p', 0.3729 ] ]
  [ [ 'skip_pct', 0.38 ], [ 'p', 0.3782 ] ]
  [ [ 'skip_pct', 0.39 ], [ 'p', 0.37029999999999996 ] ]
  [ [ 'skip_pct', 0.4 ], [ 'p', 0.36519999999999997 ] ]
  [ [ 'skip_pct', 0.41 ], [ 'p', 0.3574 ] ]
  [ [ 'skip_pct', 0.42 ], [ 'p', 0.3671 ] ]
  [ [ 'skip_pct', 0.43 ], [ 'p', 0.35829999999999995 ] ]
  [ [ 'skip_pct', 0.44 ], [ 'p', 0.3569 ] ]
  [ [ 'skip_pct', 0.45 ], [ 'p', 0.358 ] ]
  [ [ 'skip_pct', 0.46 ], [ 'p', 0.351 ] ]
  [ [ 'skip_pct', 0.47 ], [ 'p', 0.352 ] ]
  [ [ 'skip_pct', 0.48 ], [ 'p', 0.35439999999999994 ] ]
  [ [ 'skip_pct', 0.49 ], [ 'p', 0.3422 ] ]
  [ [ 'skip_pct', 0.5 ], [ 'p', 0.34730000000000005 ] ]


  (Cf my (Swedish) page on simulation in R: http://www.hakank.org/sims/simulering.html)

*/

var run = function(n, skip_pct) {

    var model = function() {

        // The position to skip over
        var skip_pos = Math.round(skip_pct*n)

        // Each princess has some random dowry (1..n*10)
        var s = mapN(function(i) {
            1+randomInteger(n*10)
        },n)

        var max_val = _.max(s)

        // Best value before the skip position
        var best_before_skip = _.max(mapN(function(i) {
            i <= skip_pos ? s[i] : 0
        },n))

        // The values after skip position > best value before skip position
        var ds = _.difference(mapN(function(i) {
            i > skip_pos && s[i] > best_before_skip  ? s[i] : 0
        },n),[0])

        // Find the first value > best before skip position
        var best_after_skip = ds.length > 0 ? _.first(ds) : 0
        // condition(best_after_skip > 0)
        // console.log("ds:",ds, "best_after_skip:",best_after_skip)        

        // Did we get the best dowry?
        var p = best_after_skip == max_val
        
        return {
            skip_pct:skip_pct,
            // skip_pos:skip_pos,
            // best_before_skip:best_before_skip,
            // best_after_skip:best_after_skip,
            // max_val:max_val,
            p:p,
        }
    }
    // var d = Infer({method:"enumerate"},model)
    var d = Infer({method:"rejection",samples:10000},model)
    // var d = Infer({method:"SMC",particles:1000},model)

    var t = exp_map_all(d,["expectation"])

}

var n = 100
var ttt = map(function(i) {
    var pct = i/n
    run(n,pct)
}, _.range(30,51));





