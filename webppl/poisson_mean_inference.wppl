/*
  This is a port of the SPPL model poisson_mean_inference.pynb

  Here is the PDF of Y = 0..20 (exact probabilities) from the SPPL model:
  (0, 0.19572329209779615),
  (1, 0.24541518485806976),
  (2, 0.15633363576277434),
  (3, 0.07275764007128807),
  (4, 0.03749784880330323),
  (5, 0.03225414602603766),
  (6, 0.036272539178041456),
  (7, 0.03919655164760693),
  (8, 0.03782130413444809),
  (9, 0.032547494609049904),
  (10, 0.025221805385485633),
  (11, 0.017769927037907036),
  (12, 0.011477227802063514),
  (13, 0.006844292955361095),
  (14, 0.00379364785941744),
  (15, 0.0019704640279916506),
  (16, 0.000975431521715664),
  (17, 0.0004844975064651556),
  (18, 0.0002799391781190319),
  (19, 0.00023526933546341676)
  (20, 0.0002864142016352986)


  Using rejection:
  y
  Marginal:
    1 : 0.23929999999999998
    0 : 0.186
    2 : 0.16620000000000001
    3 : 0.09900000000000019
    4 : 0.0636000000000001
    5 : 0.043000000000000045
    6 : 0.030899999999999987
    7 : 0.02329999999999997
    8 : 0.01739999999999997
    9 : 0.015099999999999987
    10 : 0.01409999999999999
    11 : 0.011800000000000005
    12 : 0.0116
    13 : 0.008200000000000002
    14 : 0.0076
    15 : 0.006000000000000004
    19 : 0.005600000000000008
    17 : 0.0051000000000000064
    16 : 0.004900000000000006
    18 : 0.004100000000000008
    20 : 0.003000000000000007
    21 : 0.002800000000000006
    24 : 0.002600000000000004
    23 : 0.0021000000000000046
    22 : 0.001900000000000003
    26 : 0.001800000000000003
    29 : 0.001800000000000003
    28 : 0.0017000000000000032
    27 : 0.0015000000000000033
    25 : 0.0014000000000000028
    30 : 0.0012000000000000027
    34 : 0.0012000000000000027
    31 : 0.001100000000000003
    38 : 0.001100000000000003
    36 : 0.0010000000000000028
    35 : 0.0010000000000000028
    33 : 0.0008000000000000017
    33 : 0.0008000000000000017
    45 : 0.0007000000000000014
    40 : 0.0006000000000000014
    37 : 0.0006000000000000014
    32 : 0.0006000000000000014
    50 : 0.000500000000000001
    46 : 0.000500000000000001
    39 : 0.000500000000000001
    44 : 0.0004000000000000008
    48 : 0.0004000000000000008
    43 : 0.0004000000000000008
    41 : 0.0004000000000000008
    62 : 0.0003000000000000006
    81 : 0.0003000000000000006
    42 : 0.0003000000000000006
    55 : 0.0003000000000000006
    52 : 0.00020000000000000055
    65 : 0.00020000000000000055
    69 : 0.00020000000000000055
    61 : 0.00010000000000000026
    129 : 0.00010000000000000026
    63 : 0.00010000000000000026
    64 : 0.00010000000000000026
    53 : 0.00010000000000000026
    66 : 0.00010000000000000026
    67 : 0.00010000000000000026
    68 : 0.00010000000000000026
    49 : 0.00010000000000000026
    70 : 0.00010000000000000026
    72 : 0.00010000000000000026
    75 : 0.00010000000000000026
    47 : 0.00010000000000000026
    88 : 0.00010000000000000026
    100 : 0.00010000000000000026
    102 : 0.00010000000000000026
    123 : 0.00010000000000000026
    56 : 0.00010000000000000026


  expectation:
  [ [ 'x', 0.02271570765610799 ], [ 'y', 4.2428000000000035 ] ]



  Cf my Turing.jl model poisson_mean_inference.jl:

  Summary Statistics
  parameters      mean       std   naive_se      mcse         ess      rhat   ess_per_sec 
     Symbol   Float64   Float64    Float64   Float64     Float64   Float64       Float64 
     
         X    0.0256    1.0030     0.0100    0.0124   6401.6166    0.9999     2199.1125
         Y    4.2629    7.6756     0.0768    0.0975   6534.2074    1.0000     2244.6607

*/

var model = function() {
    
    var x = gaussian(0,1)
    condition(x >= -4 && x <= 4) // truncated
    
    var y = poisson(1+2*Math.abs(Math.pow(x,3)))
    return {
        x:x,
        y:y
    }

}

var d = Infer({method:"rejection",samples:10000},model)
// display(d)

exp_map(d,["x","y"],["expectation","MAP","marginals"])


