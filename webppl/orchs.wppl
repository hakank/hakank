/*
  From Church
  """
  ;;; Rejection sampling
(define (take-sample)
    (define Legolas (random-integer 21))
    (define Gimli (random-integer 21))
    (define Eowyn (random-integer  21))
    (define total-orcs (+ Legolas Gimli Eowyn))
    (if (>= total-orcs 45) Gimli (take-sample)))
(hist (repeat 1000 take-sample) "Number of Orcs Gimli Took Out, Given That Everyone Took Out More Than 45")
  """

  expectation:
  [ [ 'Legolas', 16.25 ],
    [ 'Gimli', 16.25 ],
    [ 'Eowyn', 16.25 ],
    [ 'total_orcs', 48.74999999999999 ] ]

  MAP:
  [ [ 'Legolas', { val: 20, score: -1.7917594692280554 } ],
    [ 'Gimli', { val: 20, score: -1.7917594692280554 } ],
    [ 'Eowyn', { val: 20, score: -1.7917594692280554 } ],
    [ 'total_orcs', { val: 45, score: -1.7917594692280556 } ] ]

*/

var model = function() {
    var Legolas = randomInteger(21)
    var Gimli   = randomInteger(21)
    var Eowyn   = randomInteger(21)
    var total_orcs = Legolas + Gimli + Eowyn
    condition(total_orcs >= 45)

    return {
        Legolas:Legolas,
        Gimli:Gimli,
        Eowyn:Eowyn,
        total_orcs:total_orcs,
    }
    
}

var d = Infer(model)
// display(d)

exp_map(d,["Legolas","Gimli","Eowyn","total_orcs"])

// viz(d)


/*
  Note:  This is more like the Church model

  Marginals:
  Gimli
  Marginal:
    20 : 0.159
    19 : 0.14899999999999997
    17 : 0.116
    18 : 0.11499999999999999
    16 : 0.09700000000000003
    15 : 0.08699999999999998
    14 : 0.06300000000000001
    13 : 0.06099999999999999
    12 : 0.044000000000000004
    10 : 0.03300000000000001
    11 : 0.03200000000000001
    9 : 0.022
    8 : 0.014999999999999996
    7 : 0.004000000000000002
    5 : 0.0020000000000000005
    6 : 0.0010000000000000002

  expectation:
  [ [ 'Gimli', 16.157 ] ]


*/
var model2 = function() {
    
    var f = function() {
        var Legolas = randomInteger(21)
        var Gimli   = randomInteger(21)
        var Eowyn   = randomInteger(21)
    
        var total_orcs = Legolas + Gimli + Eowyn
        return (total_orcs >= 45) ? Gimli : f()
    }

    var Gimli = f()
    
    return {
        Gimli:Gimli,
    }
    
}

var d2 = Infer({method:"rejection",samples:1000},model2)
exp_map_all(d2)
