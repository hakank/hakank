/*
  Birthday coincidence

  From https://www.doc.ic.ac.uk/~mpd37/teaching/2014/ml_tutorials/2014-10-15-wood-anglican.pdf
  page 18f:
  """
  Birthday Coincidence
  Approximately, whatâ€™s the probability that in a room
  filled with 23 people at least one pair of people
  have the same birthday? 

  [assume birthday (mem (lambda (i) (uniform-discrete 1 366)))]
  [assume N 23]
  [assume pair-equal
    (lambda (i j)
      (if (> i N)
        false
          (if (> j N)
            (pair-equal (+ i 1) (+ i 2))
            (if (= (birthday i) (birthday j))
              true
              (pair-equal i (+ j 1))))))]
  [predict (pair-equal 1 2)
  """

  Marginal:
    {"p":false} : 0.509
    {"p":true} : 0.491

  2: 0.005000000000000002
  3: 0.007999999999999997
  4: 0.005999999999999998
  5: 0.028999999999999998
  6: 0.035
  7: 0.06300000000000001
  8: 0.071
  9: 0.08799999999999998
  10: 0.12000000000000001
  11: 0.142
  12: 0.15799999999999997
  13: 0.181
  14: 0.217
  15: 0.23199999999999998
  16: 0.264
  17: 0.319
  18: 0.32600000000000007
  19: 0.381
  20: 0.424
  21: 0.447
  22: 0.462
  23: 0.509
  24: 0.539
  25: 0.579
  26: 0.595
  27: 0.623
  28: 0.666
  29: 0.679
  30: 0.703
  31: 0.738

*/

var run = function(n) {

    var model = function() {
        var birthday = mem(function(i) { 1+randomInteger(365) })

        var pair_equal = function(i,j) {
            if (i > n) {
                return false
            } else {
                if (j > n) {
                    return pair_equal(i+1,i+2)
                } else {
                    if (birthday(i) == birthday(j)) {
                        return true
                    } else {
                        return pair_equal(i,j+1)
                    }
                }
            }
        }

        var p = pair_equal(1,2)
        return {
            p:p
        }
    }


    var d = Infer({method:"rejection",samples:1000},model)
    // var d = Infer({method:"SMC",samples:1000},model)    
    // var d = Infer(model)
    console.log(n +': ' + Math.exp(d.score({p:true})))

    // exp_map_all(d)
}

// run(23)

var ttt = mapN(function(n) { run(2+n) }, 30);
