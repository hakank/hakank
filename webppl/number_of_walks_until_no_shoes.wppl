/*
   Number of walks until no shoes

   From 
   Gunnar Blom, Lars Holst, Dennis Sandell:
   "Problems and Snapshots from the World of Probability"
   Page 8f, Problem 1.6 Number of walks until no shoes

   """
   A has a house with one front door and one back door. He places
   two pairs of walking shoes at each door. For each walk, he selects
   one door at random, puts on a pair of shoes, returns after a walk
   to a randomly chosen door, and takes off the shoes at the door.
   We want to determine the expected number of finished walks until
   A discovers that no shoes are available at the door he has selected
   for his next walk.
   """

   Result (method:rejection):
   len
   Marginal:
    4 : 0.08000000000000002
    3 : 0.07760000000000002
    5 : 0.07060000000000005
    2 : 0.06620000000000004
    6 : 0.06580000000000001
    7 : 0.06090000000000004
    8 : 0.05790000000000005
    9 : 0.04949999999999989
    11 : 0.04090000000000002
    10 : 0.04039999999999995
    12 : 0.037000000000000005
    13 : 0.03179999999999996
    15 : 0.030099999999999964
    14 : 0.02959999999999998
    16 : 0.025599999999999973
    17 : 0.02219999999999995
    18 : 0.018899999999999945
    19 : 0.017699999999999962
    20 : 0.016599999999999962
    21 : 0.014899999999999974
    22 : 0.013299999999999975
    24 : 0.012999999999999973
    23 : 0.012899999999999976
    25 : 0.0104
    26 : 0.0095
    28 : 0.008800000000000004
    27 : 0.008099999999999996
    30 : 0.006699999999999998
    29 : 0.006100000000000001
    31 : 0.0056000000000000025
    35 : 0.005000000000000002
    34 : 0.004300000000000005
    32 : 0.004300000000000005
    37 : 0.0037000000000000045
    38 : 0.0035000000000000074
    33 : 0.003200000000000007
    36 : 0.0027000000000000027
    39 : 0.0020000000000000026
    40 : 0.0018000000000000013
    43 : 0.0018000000000000013
    45 : 0.0017000000000000016
    41 : 0.001600000000000002
    44 : 0.0014000000000000015
    42 : 0.0014000000000000015
    52 : 0.0013000000000000017
    47 : 0.0012000000000000016
    49 : 0.0012000000000000016
    50 : 0.0012000000000000016
    48 : 0.0009000000000000014
    55 : 0.0009000000000000014
    46 : 0.0008000000000000009
    51 : 0.0007000000000000008
    59 : 0.0006000000000000008
    53 : 0.0006000000000000008
    63 : 0.0006000000000000008
    56 : 0.0005000000000000006
    58 : 0.00040000000000000045
    60 : 0.00040000000000000045
    61 : 0.00040000000000000045
    62 : 0.0002000000000000002
    54 : 0.0002000000000000002
    65 : 0.0002000000000000002
    64 : 0.00010000000000000009
    67 : 0.00010000000000000009
    68 : 0.00010000000000000009
    69 : 0.00010000000000000009
    70 : 0.00010000000000000009
    74 : 0.00010000000000000009
    97 : 0.00010000000000000009
  expectation:
  [ [ 'len', 11.999599999999992 ] ]

  Theoretical prob. of winning for each strategy: 12 

*/

// The theoretical probability
var theoreticalProb = function(n,i) {
    return 2*n+4*n*i-2*i*i;
}


var run = function(n,i) {
    console.log("\nn:",n,"i:",i);

    
    var model = function() {

        // Take shoes from a random door
        // Note: we only add to a when taking the shoes.    
        var takeShoes = function(a,left,right) {
            // Pick a door and check if there are any shoes
            var pick = flip() ? 'l' : 'r';
            if ((pick == 'l' && left == 0)  ||
                (pick == 'r' && right == 0)
                ) {
                return a
            } else {
                if (pick == 'l') {
                    return leaveShoes(a.concat(pick),left-1,right);
                } else {
                    return leaveShoes(a.concat(pick),left,right-1);
                }
            }
        }

        // Leave shoes at a random door
        var leaveShoes = function(a,left,right) {
            if (flip()) {
                return takeShoes(a,left+1,right);
            } else {
                return takeShoes(a,left,right+1);
            }
        }

        var a = takeShoes([],n,n);
                            
        return {
            a:a,
            len:a.length,
            
        }
    }

    // var d = Infer({method:"enumerate"},model); 
    var d = Infer({method:"rejection",samples:10000},model); 
    // var d = Infer({method:"SMC",particles:10000},model);
    
    // display(d);
    exp_map(d,["a","len"],["marginals","expecation"]);

    console.log("\nTheoretical prob. of winning for each strategy:", theoreticalProb(n,i),"\n\n");

}

run(2,2);

// Some other experiments
// run(1,1);

// run(3,3);

console.log("Expected walks for n: 1..10:",mapN(function(i) {[1+i,theoreticalProb(1+i,1+i)]},10));

