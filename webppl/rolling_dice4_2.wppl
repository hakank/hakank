/*
  https://dtai.cs.kuleuven.be/problog/tutorial/basic/03_dice.html
  """
  Letâ€™s consider an infinite number of dice, which we roll one after the other until we see a 
  six for the first time. What is the probability of stopping after n dice? The first die is always rolled, 
  those with higher numbers D are only rolled if the previous roll did not stop the process.
  """

  Cf dice_6_throws.wppl 
     dice_6_throws2.wppl
     ~/blog/rolling_dice4.blog
     ~/psi/rolling_dice4.psi

  Compared to rolling_dice4.wppl this model use arrays and recursions.

  Using method:rejection (samples:1000000)

len
Marginal:
    1 : 0.16671699999999998
    2 : 0.13942299999999996
    3 : 0.11606399999999997
    4 : 0.096885
    5 : 0.08040800000000001
    6 : 0.06668899999999998
    7 : 0.05599699999999999
    8 : 0.04638600000000001
    9 : 0.03832800000000001
    10 : 0.03221000000000001
    11 : 0.026580999999999994
    12 : 0.022676000000000005
    13 : 0.018431000000000003
    14 : 0.015637000000000005
    15 : 0.013046000000000002
    16 : 0.010727999999999996
    17 : 0.008859000000000002
    18 : 0.007438000000000001
    19 : 0.0063230000000000005
    20 : 0.005146
    21 : 0.004420999999999998
    22 : 0.0035929999999999994
    23 : 0.002973000000000001
    24 : 0.002536000000000001
    25 : 0.002021
    26 : 0.0017220000000000004
    27 : 0.001471
    28 : 0.0012280000000000004
    29 : 0.0009649999999999998
    30 : 0.0008420000000000003
    31 : 0.0007110000000000002
    32 : 0.000629
    33 : 0.0005209999999999998
    34 : 0.0003930000000000002
    35 : 0.00032200000000000024
    36 : 0.0002660000000000001
    37 : 0.00024699999999999993
    38 : 0.00020600000000000013
    39 : 0.000162
    40 : 0.00012199999999999997
    41 : 0.00011499999999999996
    42 : 0.00010000000000000009
    43 : 0.00008500000000000006
    45 : 0.00005999999999999996
    44 : 0.00005999999999999996
    47 : 0.000037
    46 : 0.00003399999999999999
    48 : 0.00003099999999999999
    52 : 0.000027000000000000013
    50 : 0.000024000000000000004
    49 : 0.000021000000000000002
    53 : 0.000012
    51 : 0.000012
    54 : 0.000009999999999999999
    57 : 0.000009999999999999999
    58 : 0.000007000000000000004
    55 : 0.000006
    56 : 0.000004999999999999999
    59 : 0.000004000000000000002
    60 : 0.0000029999999999999997
    61 : 0.0000029999999999999997
    64 : 0.0000029999999999999997
    68 : 0.000002000000000000001
    65 : 0.0000010000000000000004
    66 : 0.0000010000000000000004
    86 : 0.0000010000000000000004
    74 : 0.0000010000000000000004
    82 : 0.0000010000000000000004
    62 : 0.0000010000000000000004

expectation:
[ [ 'len', 5.988072 ],
  [ 'len1', 0.16671700000000006 ],
  [ 'len2', 0.139423 ],
  [ 'len3', 0.11606400000000003 ],
  [ 'len4', 0.096885 ],
  [ 'len5', 0.08040800000000001 ],
  [ 'len6', 0.06668899999999998 ],
  [ 'closed_form1', 0.16666666666666666 ],
  [ 'closed_form2', 0.1388888888888889 ],
  [ 'closed_form3', 0.11574074074074076 ],
  [ 'closed_form4', 0.09645061728395063 ],
  [ 'closed_form5', 0.0803755144032922 ],
  [ 'closed_form6', 0.06697959533607684 ] ]


*/


var model = function() {
    var d = [1,2,3,4,5,6];    
    var roll = function(arr) {
        if (last(arr) == 6) {
            return arr;
        } else {
            return roll(arr.concat(uniformDraw(d)));
        }
    };
       
    // Closed form of the probability
    // We start at time 1 here as well.
    var closed_form = function(n) {
        return (1/6.0) * Math.pow((5/6.0),(n-1));        
    }

    var a = roll([]);
    // display(a);
    
    return {
        len:a.length,
        len1:a.length==1,
        len2:a.length==2,
        len3:a.length==3,
        len4:a.length==4,
        len5:a.length==5,
        len6:a.length==6,
        closed_form1:closed_form(1),
        closed_form2:closed_form(2),
        closed_form3:closed_form(3),
        closed_form4:closed_form(4),
        closed_form5:closed_form(5),
        closed_form6:closed_form(6)

    };

}

// var d = Infer({method:"enumerate",maxExecutions:100000},model);
// var d = Infer({method:"rejection",samples:1000000},model);
// var d = Infer({method:"enumerate",maxExecutions:100},model);
// var d = Infer({method:"MCMC",kernel:"MH",samples:1000000,burn:2000,verbose:true},model);
// var d = Infer({method:"incrementalMH",samples:1000000,burn:20000},model);
var d = Infer({method:"forward",samples:100000,guide:false},model);
// var d = Infer({method:"SMC",samples:100000,burn:2000,verbose:true},model);
// display(d);


exp_map_all(d);

