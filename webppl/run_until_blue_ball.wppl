/*
  From https://community.wolfram.com/groups/-/m/t/3007279
  """
  Experiment
  1. Start with 2 balls in urn: 1 red and 1 blue
  2. If you pick a blue ball, terminate. If red, put the red ball back and add one red ball to the urn
  3. Repeat until you pick a blue ball
  Find the average length of trials.
  """

  This is quite unstable
  Some runs with Rejection/10000:

  expectation: [ [ 'len', 8.825000000000003 ] ]
  Stat for v: len
  min: 1 mean: 111.49090909090908 max: 1781 stdev: 265.132273864628
  Credible interval for len (99%): [ 1, 105 ]

  expectation: [ [ 'len', 10.035299999999989 ] ]
  Stat for v: len
  min: 1 mean: 356.29651162790697 max: 4499 stdev: 757.2253661256406
  Credible interval for len (99%): [ 1, 94 ]

  expectation: [ [ 'len', 229.90810000000008 ] ]
  Stat for v: len
  min: 1 mean: 13203.421052631578 max: 2199961 stdev: 167722.61347755356
  Credible interval for len (99%): [ 1, 104 ]

  expectation: [ [ 'len', 8.224100000000002 ] ]
  Stat for v: len
  min: 1 mean: 237.69142857142856 max: 6436 stdev: 587.1871122424892
  Credible interval for len (99%): [ 1, 96 ]

  expectation: [ 'len', 15.020199999999999 ] ]
  Stat for v: len
  min: 1 mean: 646.1149425287356 max: 60967 stdev: 4652.791263157242
  Credible interval for len (99%): [ 1, 90 ]


  If we restrict the length to - say - >= 100, then it's much more stable:

  expectation: [ [ 'len', 6.1095999999999995 ] ]
  Stat for v: len
  min: 2 mean: 49.204301075268816 max: 101 stdev: 28.33310277190882
  Credible interval for len (99%): [ 2, 91 ]

  expectation: [ [ 'len', 6.085599999999998 ] ]
  Stat for v: len
  min: 2 mean: 48.65217391304348 max: 101 stdev: 28.163511230656585
  Credible interval for len (99%): [ 2, 101 ]

  expectation: [ [ 'len', 6.294600000000004 ] ]
  Stat for v: len
  min: 2 mean: 49.770833333333336 max: 101 stdev: 28.139340479813832
  Credible interval for len (99%): [ 2, 101 ]

  * Here's the exact result (using Enumerate)

  Marginals:
  len
  Marginal:
    2 : 0.4999999999999998
    3 : 0.1666666666666666
    4 : 0.08333333333333326
    5 : 0.04999999999999994
    6 : 0.033333333333333284
    7 : 0.023809523809523798
    8 : 0.017857142857142835
    9 : 0.013888888888888876
    10 : 0.011111111111111103
    101 : 0.009999999999999986
    11 : 0.009090909090909087
    12 : 0.007575757575757571
    13 : 0.006410256410256399
    14 : 0.005494505494505491
    15 : 0.0047619047619047545
    16 : 0.0041666666666666675
    17 : 0.0036764705882352923
    18 : 0.003267973856209151
    19 : 0.0029239766081871356
    20 : 0.0026315789473684206
    21 : 0.002380952380952381
    22 : 0.0021645021645021593
    23 : 0.001976284584980235
    24 : 0.0018115942028985481
    25 : 0.0016666666666666683
    26 : 0.0015384615384615372
    27 : 0.001424501424501426
    28 : 0.001322751322751321
    29 : 0.001231527093596057
    30 : 0.0011494252873563216
    31 : 0.0010752688172043004
    32 : 0.0010080645161290318
    33 : 0.0009469696969696961
    34 : 0.0008912655971479504
    35 : 0.0008403361344537819
    36 : 0.0007936507936507942
    37 : 0.0007507507507507486
    38 : 0.0007112375533428151
    39 : 0.0006747638326585697
    40 : 0.0006410256410256415
    41 : 0.0006097560975609758
    42 : 0.000580720092915215
    43 : 0.0005537098560354384
    44 : 0.0005285412262156444
    45 : 0.0005050505050505054
    46 : 0.00048309178743961313
    47 : 0.0004625346901017581
    48 : 0.00044326241134751826
    49 : 0.00042517006802721125
    50 : 0.00040816326530612257
    51 : 0.0003921568627450988
    52 : 0.0003770739064856715
    53 : 0.00036284470246734354
    54 : 0.0003494060097833674
    55 : 0.00033670033670033656
    56 : 0.0003246753246753253
    57 : 0.00031328320802005135
    58 : 0.00030248033877798
    59 : 0.0002922267679719457
    60 : 0.0002824858757062157
    61 : 0.00027322404371584705
    62 : 0.0002644103648863035
    63 : 0.00025601638504864403
    64 : 0.0002480158730158731
    65 : 0.0002403846153846147
    66 : 0.00023310023310023305
    67 : 0.00022614201718679407
    68 : 0.00021949078138718098
    69 : 0.00021312872975277018
    70 : 0.00020703933747411921
    71 : 0.0002012072434607645
    72 : 0.00019561815336463154
    73 : 0.0001902587519025884
    74 : 0.00018511662347278765
    75 : 0.00018018018018018032
    76 : 0.00017543859649122873
    77 : 0.0001708817498291185
    78 : 0.000166500166500166
    79 : 0.00016228497241155412
    80 : 0.00015822784810126547
    81 : 0.00015432098765432196
    82 : 0.00015055706112616725
    83 : 0.00014692918013517567
    84 : 0.00014343086632243233
    85 : 0.00014005602240896333
    86 : 0.00013679890560875564
    87 : 0.0001336541031809677
    88 : 0.0001306165099268547
    89 : 0.00012768130745658855
    90 : 0.00012484394506866376
    91 : 0.00012210012210012172
    92 : 0.00011944577161968532
    93 : 0.00011687704534829353
    94 : 0.00011439029970258489
    95 : 0.00011198208286674173
    96 : 0.00010964912280701709
    97 : 0.00010738831615120238
    98 : 0.00010519671786240284
    99 : 0.00010307153164295973
    100 : 0.00010101010101010106

  expectation:
  [ [ 'len', 6.187377517639616 ] ]

  For len < 200: expectation: [ 'len', 6.878030948121437 ] ]

  For len < 1000: expectation: [ [ 'len', 8.485470860550347 ] ]

  * Adding 2 red balls (instead of 1) and limit = 1000
    Enumerate: 
    expectation: [ [ 'len', 158.5888800799228 ] ]

  * Adding 3 red balls (instead of 1)  and limit = 1000:
    Enumerate: 
    expectation: [ [ 'len', 507.0824095536794 ] ]


  * Which limit gives a length of 10?

    for len = f(1)+1:

    By first using 
      var limit = 1+randomInteger(10000)
    and then trial and error limit is about 4549 (between 4549 and 4550):
    
    expectation: [ [ 'limit', 4549 ], [ 'len', 9.999988282711257 ] ]
    expectation: [ [ 'limit', 4550 ], [ 'len', 10.000208062931035 ] ]

   for var len = f(1):
     expectation: [ 'limit', 12366 ], [ 'len', 9.999962147921018 ] ]
     expectation: [ 'limit', 12367 ], [ 'len', 10.000043008275188 ] ]


*/


var model = function() {
    var num_to_add = 1
    // var limit = 4549 // for var len = f(1) + 1
    // var limit = 4550 // 1+randomInteger(10000)
    // var limit = 12367 // for var len = f(1)
    // var limit = 7500
    // var limit = 1+randomInteger(15000)
    var limit = 10000
    var f = function(num_red) {

        var pct = num_red/(num_red+1)
        // if (num_red >= limit) { return num_red } // For using with Enumerate 
        if (flip(pct)) {
            return f(num_red+num_to_add)
        } else {
            return num_red
        }
    }

    // We start with one red (and one blue)
    var len = f(1) + 1  // add the blue ball
    // condition(len == 10) // Testing
    return {
        // limit:limit,
        len:len,
    }
        
}


var d = Infer({method:"rejection",samples:10000},model)
// var d = Infer({method:"SMC",particles:1000,rejuvSteps:5},model)
// var d = Infer({method:"MCMC",kernel:"HMC",samples:10000},model)
// var d = Infer(model)

exp_map_all(d,["marginals","expectation"])
// exp_map_all(d,["expectation"])

stat2(d,"len")
showCredibleInterval(d,"len",0.99)


// Skipping adding the blue ball, i.e.
//   var len = f(1)
// instead of
//   var len = f(1) + 1
// The probability for i is (1/i+i^2)
// FindSequenceFunction[{2, 6, 12, 20, 30, 42, 56, 72, 90, 110}, x]
// -> x + x^2
/*
v: 1 : 0.49999999999999967 -> 2.0000000000000013
v: 2 : 0.16666666666666657 -> 6.0000000000000036
v: 3 : 0.08333333333333326 -> 12.00000000000001
v: 4 : 0.04999999999999994 -> 20.000000000000025
v: 5 : 0.033333333333333284 -> 30.000000000000043
v: 6 : 0.023809523809523798 -> 42.00000000000002
v: 7 : 0.017857142857142835 -> 56.00000000000007
v: 8 : 0.013888888888888876 -> 72.00000000000007
v: 9 : 0.011111111111111103 -> 90.00000000000007
v: 10 : 0.009090909090909087 -> 110.00000000000004
v: 11 : 0.007575757575757571 -> 132.00000000000009
v: 12 : 0.006410256410256399 -> 156.00000000000028
v: 13 : 0.005494505494505491 -> 182.00000000000014
v: 14 : 0.0047619047619047545 -> 210.0000000000003
...
*/
/*
var t = map(function(v) {
    var i = v.val.len
    console.log("v:",i,":", v.prob, "->", 1/v.prob, (1/(i+i*i)))
}, Object.values(d.getDist()))
*/

