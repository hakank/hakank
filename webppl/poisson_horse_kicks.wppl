/*
   Horse kicks 

   https://www.randomservices.org/random/data/HorseKicks.html
   """
   The data below give the number of soilders in the Prussian cavalry killed 
   by horse kicks, by corp membership and by year. The years are from 1875 to 1894, 
   and there are 14 different cavalry corps: the first column corresponds to the 
   guard corp and the other columns to corps 1 through 11, 14, and 15. The data are 
   from Distributome project and are derived from the book by Andrews and Herzberg. 
   The original source of the data is the classic book by von Bortkiewicz (references 
   are given below). The data are famous because they seem to fit the Poisson 
   model reasonably well.
   """

   First from Mathematica:
   """
   FindDistributionParameters[data, PoissonDistribution[lambda]]
   -> 
   {lambda -> 0.7}
   """

   Note that 0.7 is the mean of the data (which is the mean of a poisson distribution).

   """
   Table[PDF[PoissonDistribution[0.7], k], {k, 0, 7}]
   -> {0.496585, 0.34761, 0.121663, 0.0283881, 0.00496792, 0.000695509, 0.0000811427, 8.11427*10^-6}
   %*280
   {139.044, 97.3307, 34.0658, 7.94868, 1.39102, 0.194743, 0.02272, 0.002272}
   """

   This model (SMC/200/rejuvSteps:2, 20.6s)

post
Marginal:
    0 : 0.5074999999999998
    1 : 0.3225000000000002
    2 : 0.12250000000000007
    3 : 0.03250000000000001
    4 : 0.01500000000000001

expectation:
[ [ 'lambda', 0.6935023290703988 ],
  [ 'post', 0.7250000000000003 ] ]

Credible interval for lambda (84%): [ 0.607327076820372, 0.7453935702211165 ]

est_lambda: 0.693862218653026

Histogram data:
{ '0': 144, '1': 91, '2': 32, '3': 11, '4': 2 }

Histogram poisson( 0.693862218653026 ):
{ '0': 134, '1': 92, '2': 42, '3': 10, '4': 2 }

Histogram poisson(0.7) from Mathematica:
{ '0': 138, '1': 100, '2': 35, '3': 7 }

poisson_pdf( 0.693862218653026 ,k):
[ [ 0, 0.49964260874286837 ],
  [ 1, 0.3466831290359125 ],
  [ 2, 0.12027516254121576 ],
  [ 3, 0.027818130376567097 ],
  [ 4, 0.004825487415465996 ],
  [ 5, 0.0006696446808354984 ],
  [ 6, 0.00007744019065895274 ] ]

280*poisson_pdf( 0.693862218653026 ,k):
[ [ 0, 139.89993044800315 ],
  [ 1, 97.0712761300555 ],
  [ 2, 33.67704551154041 ],
  [ 3, 7.789076505438787 ],
  [ 4, 1.3511364763304787 ],
  [ 5, 0.18750051063393955 ],
  [ 6, 0.021683253384506766 ] ]

poisson_pdf(0.7,k):
[ [ 0, 139.04388506159466 ],
  [ 1, 97.33071954311626 ],
  [ 2, 34.06575184009069 ],
  [ 3, 7.948675429354493 ],
  [ 4, 1.3910182001370364 ],
  [ 5, 0.19474254801918506 ],
  [ 6, 0.022719963935571588 ] ]



*/

// Total number of death by horse kicks per year
// var data = [3,5,7,9,10,18,6,14,11,9,5,11,15,6,11,17,12,15,8,4]
// Death per cavalry corp per year
var data = [
 // A B C D E F G H I J K L M N   
    0,0,0,0,0,0,0,1,1,0,0,0,1,0, //,1875
    2,0,0,0,1,0,0,0,0,0,0,0,1,1,
    2,0,0,0,0,0,1,1,0,0,1,0,2,0,
    1,2,2,1,1,0,0,0,0,0,1,0,1,0,
    0,0,0,1,1,2,2,0,1,0,0,2,1,0,
    0,3,2,1,1,1,0,0,0,2,1,4,3,0,
    1,0,0,2,1,0,0,1,0,1,0,0,0,0,
    1,2,0,0,0,0,1,0,1,1,2,1,4,1,
    0,0,1,2,0,1,2,1,0,1,0,3,0,0,
    3,0,1,0,0,0,0,1,0,0,2,0,1,1,
    0,0,0,0,0,0,1,0,0,2,0,1,0,1,
    2,1,0,0,1,1,1,0,0,1,0,1,3,0,
    1,1,2,1,0,0,3,2,1,1,0,1,2,0,
    0,1,1,0,0,1,1,0,0,0,0,1,1,0,
    0,0,1,1,0,1,1,0,0,1,2,2,0,2,
    1,2,0,2,0,1,1,2,0,2,1,1,2,2,
    0,0,0,1,1,1,0,1,1,0,3,3,1,0,
    1,3,2,0,1,1,3,0,1,1,0,1,1,0,
    0,1,0,0,0,1,0,2,0,0,1,3,0,0,
    1,0,0,0,0,0,0,0,1,0,1,1,0,0, // 1894
]

console.log("data length:",data.length,"mean:",listMean(data))

var model = function() {
    var lambda = uniform(_.min(data),_.max(data))
    // var lambda = gaussian(listMean(data),0.1) // A little more informative prior
    
    mapIndexed(function(i,val) {
        observe(Poisson({mu:lambda}),val)
    }, data)

    var post = poisson(lambda)

    return {
        lambda:lambda,
        post:post,
    }
}

var d = Infer({method:"SMC",particles:200,rejuvSteps:1},model)
// var d = Infer({method:"SMC",particles:1000,rejuvSteps:0},model)
// var d = Infer({method:"MCMC",kernel:"HMC",samples:1000},model)
// var d = Infer({method:"rejection",samples:1000},model)
exp_map_all(d,["expectation","marginals"])

showCredibleInterval(d,"lambda",0.84)

// Estimeted
var est_lambda = listMean(repeat(1000,function() {sample(d).lambda}))
console.log("\nest_lambda:", est_lambda)

/* 
  Number of deaths
  https://mindyourdecisions.com/blog/2013/06/21/what-do-deaths-from-horse-kicks-have-to-do-with-statistics/
  From the book Bulmer "Principles of Statistics":
  https://www.google.se/books/edition/Principles_of_Statistics/BZi8AQAAQBAJ?hl=sv&gbpv=1&dq=prussian+soldier+horse+deaths+poisson&pg=PT125&printsec=frontcover&bshm=rimc/1

  Num deaths  Occurrences   Expected frequence (from the book)
  ------------------------------------------------------------
   0           144            139
   1            91             97 
   2            32             34
   3            11             8
   4             2             1
  >5             0             0

*/

console.log("\nHistogram data:")
console.log(hakank_utils.collect(data))
console.log("\nHistogram poisson(",est_lambda,"):")
console.log(hakank_utils.collect(repeat(data.length,function() {poisson(est_lambda)})))

console.log("\nHistogram poisson(0.7) from Mathematica:")
console.log(hakank_utils.collect(repeat(data.length,function() {poisson(0.7)})))

console.log("\npoisson_pdf(",est_lambda,",k):")
console.log(mapN(function(k) { return [k,poisson_pdf(est_lambda,k)] }, 7))
console.log("\n280*poisson_pdf(",est_lambda,",k):")
console.log(mapN(function(k) { return [k,280*poisson_pdf(est_lambda,k)] }, 7))

console.log("\npoisson_pdf(0.7,k):")
console.log(mapN(function(k) { return [k,280*poisson_pdf(0.7,k)] }, 7))

