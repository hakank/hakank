/*
  Frustration patience (aka frustration solitaire)

  Grinstead & Snells "Introduction of Probability", page 86
  (https://math.dartmouth.edu/~prob/prob/prob.pdf)
  """
  Recently, a related problem appeared in a column of Marilyn vos Savant.
  Charles Price wrote to ask about his experience playing a certain form of solitaire,
  sometimes called 'frustration solitaire'. In this particular game, a deck of cards
  is shuffled, and then dealt out, one card at a time. As the cards are being dealt,
  the player counts from 1 to 13, and then starts again at 1. (Thus, each number is
  counted four times.) If a number that is being counted coincides with the rank of
  the card that is being turned up, then the player loses the game. Price found that
  he rarely won and wondered how often he should win. Vos Savant remarked that
  the expected number of matches is 4 so it should be difficult to win the game.
  """

  The expected number is 4, but it's quite a range of possible number of matches:

  Marginals:
  s
  Marginal:
    4 : 0.20570000000000002
    3 : 0.19170000000000006
    5 : 0.16350000000000003
    2 : 0.14580000000000007
    6 : 0.10250000000000004
    1 : 0.06990000000000003
    7 : 0.059400000000000015
    8 : 0.026700000000000015
    0 : 0.014599999999999998
    9 : 0.013099999999999995
    10 : 0.004699999999999999
    11 : 0.0018999999999999996
    12 : 0.00019999999999999985
    13 : 0.00019999999999999985
    14 : 0.00010000000000000009

  expectation:
  [ [ 's', 4.0135000000000005 ] ]


  Cf my (Swedish) page on simulation in R: http://www.hakank.org/sims/simulering.html

*/

var n = 52
var a = _.range(1,n+1)
var model = function() {    
    var cards = draw_without_replacement(n,a,[])
    var counts = mapN(function(i) {
        var j = i+1
        cards[i] % 13 == j % 13 ? 1 : 0 
    },n)

    var s = sum(counts)
    return {
        s:s,
    }
}

var d = Infer({method:"rejection",samples:10000},model)
// var d = Infer({method:"SMC",particles:10000},model)
exp_map_all(d)

