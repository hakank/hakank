/*
   Generating Zero Truncated Poisson distribution

   From Handbook on probability distributions
   page 16f

*/

// See poisson_dist.wppl
var poisson_dist1 = function(lambda,n,p2) {
    var l = Math.exp(-lambda);
    var u = uniform(0,1);
    var p = p2*u;
    return p >= l ? poisson_dist1(lambda,n+1,p) : n;
}

var poisson_dist = function(lambda) {
    return poisson_dist1(lambda,0,1);
}


//
// Algorithm from Handbook on probability distributions,
// page 16
// """
// The basic algorithm for the zero-truncated version P0(lambda) is simply
// * do; generate X Poisson distributed P(λ); while X = 0
// * return X
//
// In output, we have a random variate in N ∗ .
// The zero-modified version P(λ, p) is a little bit tricky. We need to use the following heuristic:
// • generate U from an uniform distribution
// • if U < p, then X = 0
// • otherwise
// – do; generate X Poisson distributed P(λ); while X = 0
// • return X
// """
// Note: n is the counter, p2 is the acculumated value
var zero_truncated_poisson = function(lambda) {
    var p = poisson(lambda);
    return p != 0 ? p : zero_truncated_poisson(lambda);
}

var model = function() {

    var lambda = 4;
    
    var p = zero_truncated_poisson(lambda);

    return {
        p:p,
    }
}


var d = Infer({method:"MCMC",kernel:"MH",samples:10000},model);
// display(d);
exp_map(d,["p"]);
stat2(d,"p");
