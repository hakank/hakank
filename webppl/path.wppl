/*
   From "Probabilistic Logic Programming Under the Distribution Semantics"
   page 11
   """
   An interesting application of PLP under the distribution semantics
   is the computation of the probability of a path between two nodes in a graph in
   which the presence of each edge is probabilistic:

   This program, coded in ProbLog, was used in [10] for computing the probability
   that two biological concepts are related in the BIOMINE network [26].
   """
   
   cf ~/cplint/path.pl
   path(X,X).
   path(X,Y) :- path(X,Z),edge(Z,Y).

   edge(a,b):0.3.
   edge(b,c):0.2.
   edge(a,c):0.6.
   edge(c,a):0.1.

   ?- prob((path(X,Y),X\=Y),P).
   X = a,Y = b,P = 0.3 ;
   X = a,Y = c,P = 0.624 ;
   X = b,Y = a,P = 0.020000000000000004 ;
   X = b,Y = c,P = 0.2 ;
   X = c,Y = a,P = 0.1.
   X = c,Y = b,P = 0.03 ;

      
   This model:
  expectation:
[ [ 'path_a_a', 1 ],
  [ 'path_a_b', 0.31124999999999997 ],
  [ 'path_a_c', 0.6266999999999999 ],
  [ 'path_b_a', 0.02214999999999999 ],
  [ 'path_b_b', 1 ],
  [ 'path_b_c', 0.21009999999999998 ],
  [ 'path_c_a', 0.09909999999999994 ],
  [ 'path_c_b', 0.029600000000000005 ],
  [ 'path_c_c', 1 ] ]

  Using enumerate 100000 samples:
expectation:
[ [ 'path_a_a', 1 ],
  [ 'path_a_b', 0.3004945239360229 ],
  [ 'path_a_c', 0.6300061952097052 ],
  [ 'path_b_a', 0.01824375246955022 ],
  [ 'path_b_b', 1 ],
  [ 'path_b_c', 0.21000387340886562 ],
  [ 'path_c_a', 0.09692660953259824 ],
  [ 'path_c_b', 0.0281965994567631 ],
  [ 'path_c_c', 1 ] ]


*/



var model = function() {

    var nodes = ["a","b","c"];

    // Visit a specific node from another node.
    // We have to add an dummy node '""' to get the probabilities correct.
    var path1 = function(node) {
        if (node == "a") {
            return categorical({ps:[0.3,0.6,0.1],vs:["b","c",""]});
        } else if (node == "b") {
            return categorical({ps:[0.2,0.8],vs:["c",""]});

        } else if (node == "c") {
            return categorical({ps:[0.1,0.9],vs:["a",""]});            
        }
    }
        
    var path2 = function(x, y) {
        if (
            x == y ||
            path1(x) == y || 
            sum(map(function(z) { z != x && z != y && path1(z) == y && path2(x,z) },nodes)) > 0
           ) {
            return true;
        } else {
            return false;
        }        
    }

    return {
        // path_a:path1("a"),
        // path_b:path1("b"),
        // path_c:path1("c"),
        path_a_a:path2("a","a"),        
        path_a_b:path2("a","b"),
        path_a_c:path2("a","c"),
        path_b_a:path2("b","a"),
        path_b_b:path2("b","b"),        
        path_b_c:path2("b","c"),
        path_c_a:path2("c","a"),
        path_c_b:path2("c","b"),
        path_c_c:path2("c","c"),
    }
}

// var d = Infer(model);
// var d = Infer({method:"enumerate",maxExecutions:100000},model);
var d = Infer({method:"rejection",samples:20000},model);
// var d = Infer({method:"forward"},model);
// var d = Infer({method:"MCMC",kernel:"MH",samples:10000,lag:10,verbose:true},model);
// var d = Infer({method:"SMC",particles:10000},model);
// display(d);

exp_map_all(d,["marginals","expectation"]);

