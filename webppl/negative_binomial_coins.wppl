/*
  From Mathematica (NegativeBinomialDistribution)
  """
  The number of tails before getting 4 heads with a fair coin:
    heads4 = NegativeBinomialDistribution[4, 1/2]

  Compute the probability of getting at least 6 tails before getting 4 heads:
    Probability[tails >= 6, tails -> heads4]
    -> 
    65/256  (0.25390625)


  Compute the expected number of tails before getting 4 heads:
     Mean[heads4]
     -> 
     4
  """

  Using "full" enumerate takes too long
  * Using enumerate and maxExecutions:100000 (1.8s)

    expectation:
    [ [ 'heads4', 3.999999796732477 ],
      [ 'p_at_least_six_tails', 0.2539062456598767 ] ]

*/

// n: number of failures
// p: probability of success
var negative_binomial = function(n,p) {
    return negative_binomial_tmp(n, p, 0, 0);
};

// helper function
var negative_binomial_tmp = function(n, p, s, f) {
    if (s == n) {
        return f;
    } else {
        return flip(p) ? negative_binomial_tmp(n,p,s+1,f) :  negative_binomial_tmp(n,p,s,f+1);
    }
    
};


var model = function() {
    var heads4 = negative_binomial(4,1/2)
    var p_at_least_six_tails = heads4 >= 6

    return {
        heads4:heads4,
        p_at_least_six_tails:p_at_least_six_tails,
        
    }
}

// var d = Infer(model)
// var d = Enumerate(model) // Too slow
// var d = Infer({method:"rejection",samples:10000},model)
var d = Infer({method:"enumerate",maxExecutions:1000000},model)
// display(d)
exp_map(d,["heads4","p_at_least_six_tails"])
