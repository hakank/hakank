/*
  (Simple) True skill problem.
  
  Example inspired by
  Johannes Borgstrom, Andrew D. Gordon, Michael Greenberg, James Margetson, and Jurgen Van Gael:
  "Measure Transformer Semantics for Bayesian Machine Learning"
  https://www.microsoft.com/en-us/research/publication/measure-transformer-semantics-for-bayesian-machine-learning-2011/?from=http%3A%2F%2Fresearch.microsoft.com%2Fpubs%2F135344%2Fmsr-tr-2011-18.pdf

  Note that we constraint the generated worlds so they satisfies the
  observation constraints (a > b > c). This means that we will ge only
  a small part of all worlds (about 0.16).

  expectation:
  [ [ 'performanceA', 109.59240210575246 ],
    [ 'performanceB', 104.76207518088235 ],
    [ 'performanceC', 97.85205598136476 ],
    [ 'skillA', 102.35807181904363 ],
    [ 'skillB', 101.73919523147582 ],
    [ 'skillC', 99.8781166789569 ],
    [ 'aGtB', 1 ],
    [ 'bGtC', 1 ],
    [ 'aGtC', 1 ] ]


  Cf: ~/cplint/trueskill.pl
      ~/blog/true_skill.blog
      ~/psi/true_skill.psi

*/

var model = function() {

    // There are three people, a, b, and c
    
    // Each person has an unknown Skill and a
    // known performance, where the skill is
    // reflected in the performance (with uncertainties).
    var skill = mem(function(p) {
        return gaussian(100,Math.sqrt(10))
    });
    
    var performance = mem(function(p) {
        return gaussian(skill(p), Math.sqrt(15));
    });
    
    // Now we see that a is better than b and c, and b is better than c.
    condition(performance("a") > performance("b"));
    condition(performance("a") > performance("c"));
    condition(performance("b") > performance("c"));


    // What are their performance and (underlying) skills?    
    return {
        performanceA:performance("a"),
        performanceB:performance("b"),
        performanceC:performance("c"),
        skillA:skill("a"),
        skillB:skill("b"),
        skillC:skill("c"),
        aGtB:performance("a")> performance("b"),
        bGtC:performance("b")> performance("c"), 
        aGtC:performance("a")> performance("c"),       
    };
}

// var d = Infer(model);
// var d = Infer({method:"rejection",samples:1000},model);
// var d = Infer({method:"SMC",particles:1000},model);
var d = Infer({method:"MCMC",samples:1000},model);
// display(d);


exp_map_all(d);
