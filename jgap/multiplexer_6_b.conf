#
# Multiplexer-6
#
# 2 address + 2^2 data = 6
#
# See John R. Koza 
# "Genetic Programming - On the programming of
# computers by means of natural selection" 
# (i.e. his first GP book)
# page 169ff
#
# Most common solution:
#   D1 + ((D3 - D1) * A1)
# 
presentation: Multiplexer-6
num_input_variables: 6
variable_names: A1 A0 D3 D2 D1 D0 T
# functions: AndD,NotD,OrD,IfElseD
# functions: AndD,NotD,OrD
functions: Add,Subtract,Multiply,Divide
terminal_range: 0 1
terminal_wholenumbers: true
max_init_depth: 4
population_size: 4000
max_crossover_depth: 4
# num_evolutions: 1000
num_evolutions: 51
# Note: I don't know the
# value of Koza's program.
# Let's go crazy
max_nodes: 21
adf_arity: 0
adf_type: boolean
adf_functions: Not,And,Or
show_similiar: true
# Note: Koza don't use mutation
mutation_prob: 0.0
crossover_prob: 0.90
reproduction_prob: 0.10
show_all_generations: true
data
0 0 0 0 0 0 0
0 0 0 0 0 1 1
0 0 0 0 1 0 0
0 0 0 0 1 1 1
0 0 0 1 0 0 0
0 0 0 1 0 1 1
0 0 0 1 1 0 0
0 0 0 1 1 1 1
0 0 1 0 0 0 0
0 0 1 0 0 1 1
0 0 1 0 1 0 0
0 0 1 0 1 1 1
0 0 1 1 0 0 0
0 0 1 1 0 1 1
0 0 1 1 1 0 0
0 0 1 1 1 1 1
0 1 0 0 0 0 0
0 1 0 0 0 1 0
0 1 0 0 1 0 1
0 1 0 0 1 1 1
0 1 0 1 0 0 0
0 1 0 1 0 1 0
0 1 0 1 1 0 1
0 1 0 1 1 1 1
0 1 1 0 0 0 0
0 1 1 0 0 1 0
0 1 1 0 1 0 1
0 1 1 0 1 1 1
0 1 1 1 0 0 0
0 1 1 1 0 1 0
0 1 1 1 1 0 1
0 1 1 1 1 1 1
1 0 0 0 0 0 0
1 0 0 0 0 1 0
1 0 0 0 1 0 0
1 0 0 0 1 1 0
1 0 0 1 0 0 1
1 0 0 1 0 1 1
1 0 0 1 1 0 1
1 0 0 1 1 1 1
1 0 1 0 0 0 0
1 0 1 0 0 1 0
1 0 1 0 1 0 0
1 0 1 0 1 1 0
1 0 1 1 0 0 1
1 0 1 1 0 1 1
1 0 1 1 1 0 1
1 0 1 1 1 1 1
1 1 0 0 0 0 0
1 1 0 0 0 1 0
1 1 0 0 1 0 0
1 1 0 0 1 1 0
1 1 0 1 0 0 0
1 1 0 1 0 1 0
1 1 0 1 1 0 0
1 1 0 1 1 1 0
1 1 1 0 0 0 1
1 1 1 0 0 1 1
1 1 1 0 1 0 1
1 1 1 0 1 1 1
1 1 1 1 0 0 1
1 1 1 1 0 1 1
1 1 1 1 1 0 1
1 1 1 1 1 1 1
