% 
% Kakuro puzzle in ASP.
% 
% http://en.wikipedia.org/wiki/Kakuro
% """
% The object of the puzzle is to insert a digit from 1 to 9 inclusive 
% into each white cell such that the sum of the numbers in each entry 
% matches the clue associated with it and that no digit is duplicated in 
% any entry. It is that lack of duplication that makes creating Kakuro 
% puzzles with unique solutions possible, and which means solving a Kakuro 
% puzzle involves investigating combinations more, compared to Sudoku in 
% which the focus is on permutations. There is an unwritten rule for 
% making Kakuro puzzles that each clue must have at least two numbers 
% that add up to it. This is because including one number is mathematically 
% trivial when solving Kakuro puzzles; one can simply disregard the 
% number entirely and subtract it from the clue it indicates.
% """
%
% This model solves the problem at the Wikipedia page. 
% For a larger picture, see
% http://en.wikipedia.org/wiki/File:Kakuro_black_box.svg
%
% The solution:
%   9 7 0 0 8 7 9
%   8 9 0 8 9 5 7
%   6 8 5 9 7 0 0
%   0 6 1 0 2 6 0
%   0 0 4 6 1 3 2
%   8 9 3 1 0 1 4
%   3 1 2 0 0 2 1
%
% or rather
%
%   9 7 _ _ 8 7 9
%   8 9 _ 8 9 5 7
%   6 8 5 9 7 _ _
%   _ 6 1 _ 2 6 _
%   _ _ 4 6 1 3 2
%   8 9 3 1 _ 1 4
%   3 1 2 _ _ 2 1
% 
% This was created by Hakan Kjellerstrand, hakank@gmail.com
% See also http://www.hakank.org/answer_set_programming/
%

#const n=7.

%
% Hints:
% p(Sum,  index,....)
%
p(16, 1,1, 1,2).
p(24, 1,5, 1,6, 1,7).
p(17, 2,1, 2,2).
p(29, 2,4, 2,5, 2,6, 2,7).
p(35, 3,1, 3,2, 3,3, 3,4, 3,5).
p(7,  4,2, 4,3).
p(8,  4,5, 4,6).
p(16, 5,3, 5,4, 5,5, 5,6, 5,7).
p(21, 6,1, 6,2, 6,3, 6,4).
p(5,  6,6, 6,7).
p(6,  7,1, 7,2, 7,3).
p(3,  7,6, 7,7).

p(23, 1,1, 2,1, 3,1).
p(30, 1,2, 2,2, 3,2, 4,2).
p(27, 1,5, 2,5, 3,5, 4,5, 5,5).
p(12, 1,6, 2,6).
p(16, 1,7, 2,7).
p(17, 2,4, 3,4).
p(15, 3,3, 4,3, 5,3, 6,3, 7,3).
p(12, 4,6, 5,6, 6,6, 7,6).
p(7,  5,4, 6,4).
p(7,  5,7, 6,7, 7,7).
p(11, 6,1, 7,1).
p(10, 6,2, 7,2).

% blanks
blank(1,3).
blank(1,4).
blank(2,3).
blank(3,6).
blank(3,7).
blank(4,1).
blank(4,4).
blank(4,7).
blank(5,1).
blank(5,2).
blank(6,5).
blank(7,4).
blank(7,5).


%
% domains
%
val0(0..9).
% val1(1..9).
ix(1..n).

% unique index of X,Y
1 { x(X,Y,N) : val0(N) } 1 :- ix(X),ix(Y).

% handle the blanks
:- blank(X,Y), x(X,Y, N), N != 0.
:- not blank(X,Y), x(X,Y, N), N == 0.

% 2 arguments
check(Res, X1,X2, Y1,Y2) :-
    p(Res, X1,X2, Y1,Y2),
    x(X1,X2,X), x(Y1,Y2,Y),
    X+Y == Res,
    X!=Y.
:- p(Res, X1,X2, Y1,Y2),
    not check(Res, X1,X2, Y1,Y2).

% 3 arguments
check(Res, X1,X2, Y1,Y2, Z1,Z2) :-
    p(Res, X1,X2, Y1,Y2, Z1,Z2),
    x(X1,X2,X), x(Y1,Y2,Y), x(Z1,Z2,Z), 
    X+Y+Z == Res,
    X!=Y,X!=Z,
    Y!=Z.
:- p(Res, X1,X2, Y1,Y2, Z1,Z2),
    not check(Res, X1,X2, Y1,Y2, Z1,Z2).


% 4 arguments
check(Res, X1,X2, Y1,Y2, Z1,Z2, A1,A2) :-
    p(Res, X1,X2, Y1,Y2, Z1,Z2, A1,A2),
    x(X1,X2,X), x(Y1,Y2,Y), x(Z1,Z2,Z), x(A1,A2,A), 
    X+Y+Z+A == Res,
    X!=Y,X!=Z,X!=A,
    Y!=Z,Y!=A,
    Z!=A.
:- p(Res, X1,X2, Y1,Y2, Z1,Z2, A1,A2),
    not check(Res, X1,X2, Y1,Y2, Z1,Z2, A1,A2).

% 5 arguments
check(Res, X1,X2, Y1,Y2, Z1,Z2, A1,A2, B1,B2) :-
    p(Res, X1,X2, Y1,Y2, Z1,Z2, A1,A2, B1,B2),
    x(X1,X2,X), x(Y1,Y2,Y), x(Z1,Z2,Z), x(A1,A2,A), x(B1,B2,B),    
    X+Y+Z+A+B == Res,
    X!=Y,X!=Z,X!=A,X!=B,
    Y!=Z,Y!=A,Y!=B,
    Z!=A,Z!=B,
    A!=B.
:- p(Res, X1,X2, Y1,Y2, Z1,Z2, A1,A2, B1,B2),
    not check(Res, X1,X2, Y1,Y2, Z1,Z2, A1,A2, B1,B2).
    
#show x/3.
