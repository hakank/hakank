% 
% Coins of the realm problem in ASP.
% 
% Martin Gardner:
% What is the smallest number of different coins that will enable any value 
% from 1 to 100 to be made with no more than two coins, i.e. either one 
% or two coins.
%
% """
% In this country at least eight coins are required to make the sum of 
% 99 cents: a half-dollar, a quarter, two dimes and four pennies. Imagine 
% you are the leader of a small country and you have the task of setting up 
% a system of coinage based on the cent as the smallest unit. Your objective 
% is to issue the smallest number of different coins that will enable any 
% value from 1 to 100 cents (inclusive) to be made with no more than two coins. 
%
% For example, the objective is easily met with 18 coins of the following 
% values: 1, 2, 3, 4, ... 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90. Can 
% you do better? Every value must be obtainable either by one coin or 
% as a sum of two coins. The two coins need not, of course, have different values. 
% """
%
% gringo + clasp
% 
% $ gringo coins_of_the_realm.lp4 | clasp -t2
% (-t2: use 2 threads)
% 
% used_coin(0) 
% used_coin(1) 
% used_coin(3) 
% used_coin(4) 
% used_coin(9) 
% used_coin(11) 
% used_coin(16) 
% num_coins(17) 
% used_coin(20) 
% used_coin(25) 
% used_coin(30) 
% used_coin(34) 
% used_coin(39) 
% used_coin(41) 
% used_coin(46) 
% used_coin(47) 
% used_coin(49) 
% used_coin(50) 
% ....
%
% Time         : 0.291s (Solving: 0.26s 1st Model: 0.00s Unsat: 0.00s)
% CPU Time     : 0.530s
%
% Using just one thread takes > 1hour.

%
% Using clingo + trendy (single thread) is faster;
%   $ clingo coins_of_the_realm.lp4 --conf=trendy
%   ...
%   0.320s

% clingo5 is much slower, but this is quite fast (using 12 threads):
% $ clingo coins_of_the_realm.lp4 -t 12
% ...
% Time:    2.378s

% 
% 
% This was created by Hakan Kjellerstrand, hakank@gmail.com
% See also http://www.hakank.org/answer_set_programming/
%

#const n = 100.
#const m = n / 2.

values(1..n).
coins(0..m).

% ensure that all values 1..n are covered by C1+C2 
% (where C1 can be 0)
1 { x(V,C1,C2) : coins(C1),coins(C2), C1 <= C2, C1 + C2 == V } 1 :- values(V).

% :- values(Value), x(Value,C1,C2), C1+C2 != Value.

% the used coins
% 1 { used_coin(C1) }  :- values(V),x(V,C1,_). % include 0
1 { used_coin(C1) }  :- values(V),x(V,C1,_), C1 != 0. % skipping 0
1 { used_coin(C2) }  :- values(V),x(V,_,C2).

num_coins(Coins) :- Coins = #count{1,C:used_coin(C)}.

% minimize the number of used coins
#minimize {1,C:used_coin(C)}.

#show num_coins/1.
% #show x/3.
#show used_coin/1.
